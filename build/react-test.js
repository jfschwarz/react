process = {env: {}};//# sourceURL=populist/loader.js
(function(entries, sources) {
  var modules = {};
  var hasOwn = modules.hasOwnProperty;
  var global = Function("return this")();
  var doc = global.document;
  var head = doc.documentElement.firstChild;

  function internalRequire(id) {
    var module = getModule(id);
    if (module && !hasOwn.call(module, "exports")) {
      module(function(rid) {
        return internalRequire(absolutize(id, rid));
      }, module.exports = {}, module, global);

      // If the module id has a non-null value in the entries object,
      // define a global reference to its exports object.
      var globalName = entries[id];
      if (globalName && hasOwn.call(entries, id))
        global[globalName] = module.exports;
    }

    return module.exports;
  }

  function getModule(id) {
    if (!hasOwn.call(modules, id)) {
      if (hasOwn.call(sources, id)) {
        var name = "module$" + Math.random().toString(36).slice(2);
        var script = doc.createElement("script");
        var code = "function " + name + "(require,exports,module,global){" +
          sources[id] + "\n}\n//# sourceURL=" + id + ".js\n";
        script.setAttribute("type", "text/javascript");
        script.setAttribute("encoding", "utf8");
        script.text = code;
        var error;
        var oldOnError = global.onerror;
        global.onerror = function(message, url, lineNumber) {
          error = new SyntaxError(message);
          error.url = id + '.js';
          error.line = lineNumber;
        };
        head.appendChild(script);
        global.onerror = oldOnError;
        if (!global[name]) {
          console.error(error.message);
          console.error(error.url + ':' + error.line);
          console.error(sources[id].split(/\r\n|\r|\n/)[error.line - 1]);
          throw error;
        }
        modules[id] = global[name];
      } else {
        throw new Error("Missing module: " + id);
      }
    }

    return modules[id];
  }

  var pathNormExp = /\/(\.?|[^\/]+\/\.\.)\//;
  function absolutize(id, rid) {
    if (rid.charAt(0) === ".") {
      rid = "/" + id + "/../" + rid;
      while (rid != (id = rid.replace(pathNormExp, "/")))
        rid = id;
      rid = rid.replace(/^\//, "");
    }
    return rid;
  }

  // Eagerly require all identifiers that are keys of the entries object.
  for (var id in entries)
    if (hasOwn.call(entries, id))
      internalRequire(id);
})({"test/all":"harness"},{
"test/all":"// This file exists both to give a single entry point for all the utility\n// modules in src/test and to specify an ordering on those modules, since\n// some still have implicit dependencies on others.\n\nrequire(\"./phantomjs-shims\");\nrequire(\"../ReactTestUtils\");\nrequire(\"../reactComponentExpect\");\nrequire(\"../mocks\");\nrequire(\"../mock-modules\");\nrequire(\"./mock-timers\");\n\nexports.enableTest = function(testID) {\n  describe(testID, function() {\n    beforeEach(function() {\n      require(\"../mock-modules\").setMockMap(mockMap);\n    });\n\n    require(\"../mock-modules\").clearMockMap();\n    require(\"../\" + testID);\n    var mockMap = require(\"../mock-modules\").getMockMap();\n  });\n};\n\nexports.removeNextSiblings = function(node) {\n  var parent = node && node.parentNode;\n  if (parent) {\n    while (node.nextSibling) {\n      parent.removeChild(node.nextSibling);\n    }\n  }\n};\n",
"addons/__tests__/update-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar update = require(\"../../update\");\n\ndescribe('update', function() {\n  it('should support push', function() {\n    expect(update([1], {$push: [7]})).toEqual([1, 7]);\n    expect(update.bind(null, [], {$push: 7})).toThrow(\n      'Invariant Violation: update(): expected spec of $push to be an ' +\n      'array; got 7. Did you forget to wrap your parameter in an array?'\n    );\n    expect(update.bind(null, 1, {$push: 7})).toThrow(\n      'Invariant Violation: update(): expected target of $push to be an ' +\n      'array; got 1.'\n    );\n  });\n\n  it('should support unshift', function() {\n    expect(update([1], {$unshift: [7]})).toEqual([7, 1]);\n    expect(update.bind(null, [], {$unshift: 7})).toThrow(\n      'Invariant Violation: update(): expected spec of $unshift to be an ' +\n      'array; got 7. Did you forget to wrap your parameter in an array?'\n    );\n    expect(update.bind(null, 1, {$unshift: 7})).toThrow(\n      'Invariant Violation: update(): expected target of $unshift to be an ' +\n      'array; got 1.'\n    );\n  });\n\n  it('should support splice', function() {\n    expect(update([1, 4, 3], {$splice: [[1, 1, 2]]})).toEqual([1, 2, 3]);\n    expect(update.bind(null, [], {$splice: 1})).toThrow(\n      'Invariant Violation: update(): expected spec of $splice to be an ' +\n      'array of arrays; got 1. Did you forget to wrap your parameters in an '+\n      'array?'\n    );\n    expect(update.bind(null, [], {$splice: [1]})).toThrow(\n      'Invariant Violation: update(): expected spec of $splice to be an ' +\n      'array of arrays; got 1. Did you forget to wrap your parameters in an ' +\n      'array?'\n    );\n    expect(update.bind(null, 1, {$splice: 7})).toThrow(\n      'Invariant Violation: Expected $splice target to be an array; got 1'\n    );\n  });\n\n  it('should support merge', function() {\n    expect(update({a: 'b'}, {$merge: {c: 'd'}})).toEqual({a: 'b', c: 'd'});\n    expect(update.bind(null, {}, {$merge: 7})).toThrow(\n      'Invariant Violation: update(): $merge expects a spec of type ' +\n      '\\'object\\'; got 7'\n    );\n    expect(update.bind(null, 7, {$merge: {a: 'b'}})).toThrow(\n      'Invariant Violation: update(): $merge expects a target of type ' +\n      '\\'object\\'; got 7'\n    );\n  });\n\n  it('should support set', function() {\n    expect(update({a: 'b'}, {$set: {c: 'd'}})).toEqual({c: 'd'});\n  });\n\n  it('should support apply', function() {\n    expect(update(2, {$apply: function(x) { return x * 2; }})).toEqual(4);\n    expect(update.bind(null, 2, {$apply: 123})).toThrow(\n      'Invariant Violation: update(): expected spec of $apply to be a ' +\n      'function; got 123.'\n    );\n  });\n\n  it('should support deep updates', function() {\n    expect(update({a: 'b', c: {d: 'e'}}, {c: {d: {$set: 'f'}}})).toEqual({\n      a: 'b',\n      c: {d: 'f'}\n    });\n  });\n\n  it('should require a command', function() {\n    expect(update.bind(null, {a: 'b'}, {a: 'c'})).toThrow(\n      'Invariant Violation: update(): You provided a key path to update() ' +\n      'that did not contain one of $push, $unshift, $splice, $set, $merge, ' +\n      '$apply. Did you forget to include {$set: ...}?'\n    );\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"addons/__tests__/update-test\", module);\n",
"addons/link/__tests__/LinkedStateMixin-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\n/*jshint evil:true */\n\ndescribe('LinkedStateMixin', function() {\n  var LinkedStateMixin;\n  var React;\n  var ReactLink;\n\n  beforeEach(function() {\n    LinkedStateMixin = require(\"../../../LinkedStateMixin\");\n    React = require(\"../../../React\");\n    ReactLink = require(\"../../../ReactLink\");\n  });\n\n  it('should create a ReactLink for state', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      mixins: [LinkedStateMixin],\n\n      getInitialState: function() {\n        return {value: 'initial value'};\n      },\n\n      render: function() {\n        return React.createElement(\"span\", null, \"value is \", this.state.value);\n      }\n    });\n    var container = document.createElement('div');\n    var component = React.render(React.createElement(Component, null), container);\n    var link = component.linkState('value');\n    expect(component.state.value).toBe('initial value');\n    expect(link.value).toBe('initial value');\n    link.requestChange('new value');\n    expect(component.state.value).toBe('new value');\n    expect(component.linkState('value').value).toBe('new value');\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"addons/link/__tests__/LinkedStateMixin-test\", module);\n",
"addons/link/__tests__/ReactLinkPropTypes-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"../../../emptyFunction\");\nvar LinkPropTypes = require(\"../../../ReactLink\").PropTypes;\nvar React = require(\"../../../React\");\nvar ReactPropTypeLocations = require(\"../../../ReactPropTypeLocations\");\n\nvar invalidMessage = 'Invalid prop `testProp` supplied to `testComponent`.';\nvar requiredMessage =\n  'Required prop `testProp` was not specified in `testComponent`.';\n\nfunction typeCheckFail(declaration, value, message) {\n  var props = {testProp: value};\n  var error = declaration(\n    props,\n    'testProp',\n    'testComponent',\n    ReactPropTypeLocations.prop\n  );\n  expect(error instanceof Error).toBe(true);\n  expect(error.message).toBe(message);\n}\n\nfunction typeCheckPass(declaration, value) {\n  var props = {testProp: value};\n  var error = declaration(\n    props,\n    'testProp',\n    'testComponent',\n    ReactPropTypeLocations.prop\n  );\n  expect(error).toBe(undefined);\n}\n\ndescribe('ReactLink', function() {\n  it('should fail if the argument does not implement the Link API', function() {\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.any),\n      {},\n      'Required prop `value` was not specified in `testComponent`.'\n    );\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.any),\n      {value: 123},\n      'Required prop `requestChange` was not specified in `testComponent`.'\n    );\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.any),\n      {requestChange: emptyFunction},\n      'Required prop `value` was not specified in `testComponent`.'\n    );\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.any),\n      {value: null, requestChange: null},\n      'Required prop `value` was not specified in `testComponent`.'\n    );\n  });\n\n  it('should allow valid links even if no type was specified', function() {\n    typeCheckPass(\n      LinkPropTypes.link(),\n      {value: 42, requestChange: emptyFunction}\n    );\n    typeCheckPass(\n      LinkPropTypes.link(),\n      {value: {}, requestChange: emptyFunction\n    });\n  });\n\n  it('should allow no link to be passed at all', function() {\n    typeCheckPass(\n      LinkPropTypes.link(React.PropTypes.string),\n      undefined\n    );\n  });\n\n  it('should allow valid links with correct value format', function() {\n    typeCheckPass(\n      LinkPropTypes.link(React.PropTypes.any),\n      {value: 42, requestChange: emptyFunction}\n    );\n    typeCheckPass(\n      LinkPropTypes.link(React.PropTypes.number),\n      {value: 42, requestChange: emptyFunction}\n    );\n    typeCheckPass(\n      LinkPropTypes.link(React.PropTypes.renderable),\n      {value: 42, requestChange: emptyFunction}\n    );\n  });\n\n  it('should fail if the link`s value type does not match', function() {\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.string),\n      {value: 123, requestChange: emptyFunction},\n      'Invalid prop `value` of type `number` supplied to `testComponent`,' +\n      ' expected `string`.'\n    );\n  });\n\n  it('should be implicitly optional and not warn without values', function() {\n    typeCheckPass(LinkPropTypes.link(), null);\n    typeCheckPass(LinkPropTypes.link(), undefined);\n    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), null);\n    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), undefined);\n  });\n\n  it('should warn for missing required values', function() {\n    typeCheckFail(LinkPropTypes.link().isRequired, null, requiredMessage);\n    typeCheckFail(LinkPropTypes.link().isRequired, undefined, requiredMessage);\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.string).isRequired,\n      null,\n      requiredMessage\n    );\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.string).isRequired,\n      undefined,\n      requiredMessage\n    );\n  });\n\n  it('should be compatible with React.PropTypes.oneOfType', function() {\n    typeCheckPass(\n      React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]),\n      {value: 123, requestChange: emptyFunction}\n    );\n    typeCheckFail(\n      React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]),\n      123,\n      invalidMessage\n    );\n    typeCheckPass(\n      LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])),\n      {value: 123, requestChange: emptyFunction}\n    );\n    typeCheckFail(\n      LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])),\n      {value: 'imastring', requestChange: emptyFunction},\n      'Invalid prop `value` supplied to `testComponent`.'\n    );\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"addons/link/__tests__/ReactLinkPropTypes-test\", module);\n",
"addons/transitions/__tests__/ReactCSSTransitionGroup-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactCSSTransitionGroup;\nvar mocks;\n\n// Most of the real functionality is covered in other unit tests, this just\n// makes sure we're wired up correctly.\ndescribe('ReactCSSTransitionGroup', function() {\n  var container;\n\n  beforeEach(function() {\n    React = require(\"../../../React\");\n    ReactCSSTransitionGroup = require(\"../../../ReactCSSTransitionGroup\");\n    mocks = require(\"../../../mocks\");\n\n    container = document.createElement('div');\n  });\n\n  it('should warn after time with no transitionend', function() {\n    var a = React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"one\", id: \"one\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n\n    setTimeout.mock.calls.length = 0;\n\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"two\", id: \"two\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(2);\n    expect(a.getDOMNode().childNodes[0].id).toBe('two');\n    expect(a.getDOMNode().childNodes[1].id).toBe('one');\n\n    console.warn = mocks.getMockFunction();\n\n    // For some reason jst is adding extra setTimeout()s and grunt test isn't,\n    // so we need to do this disgusting hack.\n    for (var i = 0 ; i < setTimeout.mock.calls.length; i++) {\n      if (setTimeout.mock.calls[i][1] === 5000) {\n        setTimeout.mock.calls[i][0]();\n        break;\n      }\n    }\n\n    expect(a.getDOMNode().childNodes.length).toBe(2);\n    expect(console.warn.mock.calls.length).toBe(1);\n  });\n\n  it('should keep both sets of DOM nodes around', function() {\n    var a = React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"one\", id: \"one\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"two\", id: \"two\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(2);\n    expect(a.getDOMNode().childNodes[0].id).toBe('two');\n    expect(a.getDOMNode().childNodes[1].id).toBe('one');\n  });\n\n  it('should switch transitionLeave from false to true', function() {\n    var a = React.render(\n      React.createElement(ReactCSSTransitionGroup, {\n          transitionName: \"yolo\", \n          transitionEnter: false, \n          transitionLeave: false}, \n        React.createElement(\"span\", {key: \"one\", id: \"one\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {\n          transitionName: \"yolo\", \n          transitionEnter: false, \n          transitionLeave: false}, \n        React.createElement(\"span\", {key: \"two\", id: \"two\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {\n          transitionName: \"yolo\", \n          transitionEnter: false, \n          transitionLeave: true}, \n        React.createElement(\"span\", {key: \"three\", id: \"three\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(2);\n    expect(a.getDOMNode().childNodes[0].id).toBe('three');\n    expect(a.getDOMNode().childNodes[1].id).toBe('two');\n  });\n\n  it('should work with no children', function() {\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}\n      ),\n      container\n    );\n  });\n\n  it('should work with a null child', function() {\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        [null]\n      ),\n      container\n    );\n  });\n\n  it('should transition from one to null', function() {\n    var a = React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"one\", id: \"one\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        null\n      ),\n      container\n    );\n    // (Here, we expect the original child to stick around but test that no\n    // exception is thrown)\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    expect(a.getDOMNode().childNodes[0].id).toBe('one');\n  });\n\n  it('should transition from false to one', function() {\n    var a = React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        false\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(0);\n    React.render(\n      React.createElement(ReactCSSTransitionGroup, {transitionName: \"yolo\"}, \n        React.createElement(\"span\", {key: \"one\", id: \"one\"})\n      ),\n      container\n    );\n    expect(a.getDOMNode().childNodes.length).toBe(1);\n    expect(a.getDOMNode().childNodes[0].id).toBe('one');\n  });\n\n});\n\nrequire(\"../../../mock-modules\").register(\"addons/transitions/__tests__/ReactCSSTransitionGroup-test\", module);\n",
"addons/transitions/__tests__/ReactTransitionChildMapping-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTransitionChildMapping;\n\ndescribe('ReactTransitionChildMapping', function() {\n  beforeEach(function() {\n    React = require(\"../../../React\");\n    ReactTransitionChildMapping = require(\"../../../ReactTransitionChildMapping\");\n  });\n\n  it('should support getChildMapping', function() {\n    var oneone = React.createElement(\"div\", {key: \"oneone\"});\n    var onetwo = React.createElement(\"div\", {key: \"onetwo\"});\n    var one = React.createElement(\"div\", {key: \"one\"}, oneone, onetwo);\n    var two = React.createElement(\"div\", {key: \"two\"});\n    var component = React.createElement(\"div\", null, one, two);\n    expect(\n      ReactTransitionChildMapping.getChildMapping(component.props.children)\n    ).toEqual({\n      '.$one': one,\n      '.$two': two\n    });\n  });\n\n  it('should support mergeChildMappings for adding keys', function() {\n    var prev = {\n      one: true,\n      two: true\n    };\n    var next = {\n      one: true,\n      two: true,\n      three: true\n    };\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true\n    });\n  });\n\n  it('should support mergeChildMappings for removing keys', function() {\n    var prev = {\n      one: true,\n      two: true,\n      three: true\n    };\n    var next = {\n      one: true,\n      two: true\n    };\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true\n    });\n  });\n\n  it('should support mergeChildMappings for adding and removing', function() {\n    var prev = {\n      one: true,\n      two: true,\n      three: true\n    };\n    var next = {\n      one: true,\n      two: true,\n      four: true\n    };\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true,\n      four: true\n    });\n  });\n\n  it('should reconcile overlapping insertions and deletions', function() {\n    var prev = {\n      one: true,\n      two: true,\n      four: true,\n      five: true\n    };\n    var next = {\n      one: true,\n      two: true,\n      three: true,\n      five: true\n    };\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true,\n      three: true,\n      four: true,\n      five: true\n    });\n  });\n\n  it('should support mergeChildMappings with undefined input', function() {\n    var prev = {\n      one: true,\n      two: true\n    };\n\n    var next = undefined;\n\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      one: true,\n      two: true\n    });\n\n    prev = undefined;\n\n    next = {\n      three: true,\n      four: true\n    };\n\n    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({\n      three: true,\n      four: true\n    });\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"addons/transitions/__tests__/ReactTransitionChildMapping-test\", module);\n",
"addons/transitions/__tests__/ReactTransitionGroup-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTransitionGroup;\nvar mocks;\n\n// Most of the real functionality is covered in other unit tests, this just\n// makes sure we're wired up correctly.\ndescribe('ReactTransitionGroup', function() {\n  var container;\n\n  beforeEach(function() {\n    React = require(\"../../../React\");\n    ReactTransitionGroup = require(\"../../../ReactTransitionGroup\");\n    mocks = require(\"../../../mocks\");\n\n    container = document.createElement('div');\n  });\n\n\n  it('should handle willEnter correctly', function() {\n    var log = [];\n\n    var Child = React.createClass({displayName: \"Child\",\n      componentDidMount: function() {\n        log.push('didMount');\n      },\n      componentWillEnter: function(cb) {\n        log.push('willEnter');\n        cb();\n      },\n      componentDidEnter: function() {\n        log.push('didEnter');\n      },\n      componentWillLeave: function(cb) {\n        log.push('willLeave');\n        cb();\n      },\n      componentDidLeave: function() {\n        log.push('didLeave');\n      },\n      componentWillUnmount: function() {\n        log.push('willUnmount');\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {count: 1};\n      },\n      render: function() {\n        var children = [];\n        for (var i = 0; i < this.state.count; i++) {\n          children.push(React.createElement(Child, {key: i}));\n        }\n        return React.createElement(ReactTransitionGroup, null, children);\n      }\n    });\n\n    var instance = React.render(React.createElement(Component, null), container);\n    expect(log).toEqual(['didMount']);\n\n    instance.setState({count: 2}, function() {\n      expect(log).toEqual(['didMount', 'didMount', 'willEnter', 'didEnter']);\n      instance.setState({count: 1}, function() {\n        expect(log).toEqual([\n          \"didMount\", \"didMount\", \"willEnter\", \"didEnter\",\n          \"willLeave\", \"didLeave\", \"willUnmount\"\n        ]);\n      });\n    });\n  });\n\n  it('should handle enter/leave/enter/leave correctly', function() {\n    var log = [];\n    var cb;\n\n    var Child = React.createClass({displayName: \"Child\",\n      componentDidMount: function() {\n        log.push('didMount');\n      },\n      componentWillEnter: function(_cb) {\n        log.push('willEnter');\n        cb = _cb;\n      },\n      componentDidEnter: function() {\n        log.push('didEnter');\n      },\n      componentWillLeave: function(cb) {\n        log.push('willLeave');\n        cb();\n      },\n      componentDidLeave: function() {\n        log.push('didLeave');\n      },\n      componentWillUnmount: function() {\n        log.push('willUnmount');\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {count: 1};\n      },\n      render: function() {\n        var children = [];\n        for (var i = 0; i < this.state.count; i++) {\n          children.push(React.createElement(Child, {key: i}));\n        }\n        return React.createElement(ReactTransitionGroup, null, children);\n      }\n    });\n\n    var instance = React.render(React.createElement(Component, null), container);\n    expect(log).toEqual(['didMount']);\n    instance.setState({count: 2});\n    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);\n    for (var i = 0; i < 5; i++) {\n      instance.setState({count: 2});\n      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);\n      instance.setState({count: 1});\n    }\n    cb();\n    expect(log).toEqual([\n      'didMount', 'didMount', 'willEnter',\n      'didEnter', 'willLeave', 'didLeave', 'willUnmount'\n    ]);\n  });\n\n  it('should handle enter/leave/enter correctly', function() {\n    var log = [];\n    var cb;\n\n    var Child = React.createClass({displayName: \"Child\",\n      componentDidMount: function() {\n        log.push('didMount');\n      },\n      componentWillEnter: function(_cb) {\n        log.push('willEnter');\n        cb = _cb;\n      },\n      componentDidEnter: function() {\n        log.push('didEnter');\n      },\n      componentWillLeave: function(cb) {\n        log.push('willLeave');\n        cb();\n      },\n      componentDidLeave: function() {\n        log.push('didLeave');\n      },\n      componentWillUnmount: function() {\n        log.push('willUnmount');\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {count: 1};\n      },\n      render: function() {\n        var children = [];\n        for (var i = 0; i < this.state.count; i++) {\n          children.push(React.createElement(Child, {key: i}));\n        }\n        return React.createElement(ReactTransitionGroup, null, children);\n      }\n    });\n\n    var instance = React.render(React.createElement(Component, null), container);\n    expect(log).toEqual(['didMount']);\n    instance.setState({count: 2});\n    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);\n    for (var i = 0; i < 5; i++) {\n      instance.setState({count: 1});\n      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);\n      instance.setState({count: 2});\n    }\n    cb();\n    expect(log).toEqual([\n      'didMount', 'didMount', 'willEnter', 'didEnter'\n    ]);\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"addons/transitions/__tests__/ReactTransitionGroup-test\", module);\n",
"browser/__tests__/ReactBrowserEventEmitter-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\")\n    .dontMock('EventPluginHub')\n    .dontMock('ReactMount')\n    .dontMock('ReactBrowserEventEmitter')\n    .dontMock('ReactInstanceHandles')\n    .dontMock('EventPluginHub')\n    .dontMock('TapEventPlugin')\n    .dontMock('TouchEventUtils')\n    .dontMock('keyOf');\n\n\nvar keyOf = require(\"../../keyOf\");\nvar mocks = require(\"../../mocks\");\n\nvar ReactMount = require(\"../../ReactMount\");\nvar idToNode = {};\nvar getID = ReactMount.getID;\nvar setID = function(el, id) {\n  ReactMount.setID(el, id);\n  idToNode[id] = el;\n};\nvar oldGetNode = ReactMount.getNode;\n\nvar EventPluginHub;\nvar ReactBrowserEventEmitter;\nvar ReactTestUtils;\nvar TapEventPlugin;\nvar EventListener;\n\nvar tapMoveThreshold;\nvar idCallOrder = [];\nvar recordID = function(id) {\n  idCallOrder.push(id);\n};\nvar recordIDAndStopPropagation = function(id, event) {\n  recordID(id);\n  event.stopPropagation();\n};\nvar recordIDAndReturnFalse = function(id, event) {\n  recordID(id);\n  return false;\n};\nvar LISTENER = mocks.getMockFunction();\nvar ON_CLICK_KEY = keyOf({onClick: null});\nvar ON_TOUCH_TAP_KEY = keyOf({onTouchTap: null});\nvar ON_CHANGE_KEY = keyOf({onChange: null});\n\n\n/**\n * Since `ReactBrowserEventEmitter` is fairly well separated from the DOM, we\n * can test almost all of `ReactBrowserEventEmitter` without ever rendering\n * anything in the DOM. As long as we provide IDs that follow `React's`\n * conventional id namespace hierarchy. The only reason why we create these DOM\n * nodes is so that when we feed them into `ReactBrowserEventEmitter` (through\n * `ReactTestUtils`), the event handlers may receive a DOM node to inspect.\n */\nvar CHILD = document.createElement('div');\nvar PARENT = document.createElement('div');\nvar GRANDPARENT = document.createElement('div');\nsetID(CHILD, '.0.0.0.0');\nsetID(PARENT, '.0.0.0');\nsetID(GRANDPARENT, '.0.0');\n\nfunction registerSimpleTestHandler() {\n  ReactBrowserEventEmitter.putListener(getID(CHILD), ON_CLICK_KEY, LISTENER);\n  var listener =\n        ReactBrowserEventEmitter.getListener(getID(CHILD), ON_CLICK_KEY);\n  expect(listener).toEqual(LISTENER);\n  return ReactBrowserEventEmitter.getListener(getID(CHILD), ON_CLICK_KEY);\n}\n\n\ndescribe('ReactBrowserEventEmitter', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    LISTENER.mockClear();\n    EventPluginHub = require(\"../../EventPluginHub\");\n    TapEventPlugin = require(\"../../TapEventPlugin\");\n    ReactMount = require(\"../../ReactMount\");\n    EventListener = require(\"../../EventListener\");\n    ReactBrowserEventEmitter = require(\"../../ReactBrowserEventEmitter\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    ReactMount.getNode = function(id) {\n      return idToNode[id];\n    };\n    idCallOrder = [];\n    tapMoveThreshold = TapEventPlugin.tapMoveThreshold;\n    EventPluginHub.injection.injectEventPluginsByName({\n      TapEventPlugin: TapEventPlugin\n    });\n  });\n\n  afterEach(function() {\n    ReactMount.getNode = oldGetNode;\n  });\n\n  it('should store a listener correctly', function() {\n    registerSimpleTestHandler();\n    var listener =\n          ReactBrowserEventEmitter.getListener(getID(CHILD), ON_CLICK_KEY);\n    expect(listener).toBe(LISTENER);\n  });\n\n  it('should retrieve a listener correctly', function() {\n    registerSimpleTestHandler();\n    var listener =\n          ReactBrowserEventEmitter.getListener(getID(CHILD), ON_CLICK_KEY);\n    expect(listener).toEqual(LISTENER);\n  });\n\n  it('should clear all handlers when asked to', function() {\n    registerSimpleTestHandler();\n    ReactBrowserEventEmitter.deleteAllListeners(getID(CHILD));\n    var listener =\n          ReactBrowserEventEmitter.getListener(getID(CHILD), ON_CLICK_KEY);\n    expect(listener).toBe(undefined);\n  });\n\n  it('should invoke a simple handler registered on a node', function() {\n    registerSimpleTestHandler();\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(LISTENER.mock.calls.length).toBe(1);\n  });\n\n  it(\n    'should not invoke handlers if ReactBrowserEventEmitter is disabled',\n    function() {\n      registerSimpleTestHandler();\n      ReactBrowserEventEmitter.setEnabled(false);\n      ReactTestUtils.SimulateNative.click(CHILD);\n      expect(LISTENER.mock.calls.length).toBe(0);\n      ReactBrowserEventEmitter.setEnabled(true);\n      ReactTestUtils.SimulateNative.click(CHILD);\n      expect(LISTENER.mock.calls.length).toBe(1);\n    }\n  );\n\n  it('should bubble simply', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(PARENT))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(GRANDPARENT))\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(idCallOrder.length).toBe(3);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n    expect(idCallOrder[1]).toBe(getID(PARENT));\n    expect(idCallOrder[2]).toBe(getID(GRANDPARENT));\n  });\n\n  it('should set currentTarget', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      function(event) {\n        recordID(getID(CHILD));\n        expect(event.currentTarget).toBe(CHILD);\n      }\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      function(event) {\n        recordID(getID(PARENT));\n        expect(event.currentTarget).toBe(PARENT);\n      }\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_CLICK_KEY,\n      function(event) {\n        recordID(getID(GRANDPARENT));\n        expect(event.currentTarget).toBe(GRANDPARENT);\n      }\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(idCallOrder.length).toBe(3);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n    expect(idCallOrder[1]).toBe(getID(PARENT));\n    expect(idCallOrder[2]).toBe(getID(GRANDPARENT));\n  });\n\n  it('should support stopPropagation()', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      recordIDAndStopPropagation.bind(null, getID(PARENT))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(GRANDPARENT))\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(idCallOrder.length).toBe(2);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n    expect(idCallOrder[1]).toBe(getID(PARENT));\n  });\n\n  it('should stop after first dispatch if stopPropagation', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      recordIDAndStopPropagation.bind(null, getID(CHILD))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(PARENT))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(GRANDPARENT))\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(idCallOrder.length).toBe(1);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n  });\n\n  it('should stopPropagation if false is returned, but warn', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      recordIDAndReturnFalse.bind(null, getID(CHILD))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(PARENT))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_CLICK_KEY,\n      recordID.bind(null, getID(GRANDPARENT))\n    );\n    spyOn(console, 'warn');\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(idCallOrder.length).toBe(1);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n    expect(console.warn.calls.length).toEqual(1);\n    expect(console.warn.calls[0].args[0]).toBe(\n      'Warning: Returning `false` from an event handler is deprecated and ' +\n      'will be ignored in a future release. Instead, manually call ' +\n      'e.stopPropagation() or e.preventDefault(), as appropriate.'\n    );\n  });\n\n  /**\n   * The entire event registration state of the world should be \"locked-in\" at\n   * the time the event occurs. This is to resolve many edge cases that come\n   * about from a listener on a lower-in-DOM node causing structural changes at\n   * places higher in the DOM. If this lower-in-DOM node causes new content to\n   * be rendered at a place higher-in-DOM, we need to be careful not to invoke\n   * these new listeners.\n   */\n\n  it('should invoke handlers that were removed while bubbling', function() {\n    var handleParentClick = mocks.getMockFunction();\n    var handleChildClick = function(event) {\n      ReactBrowserEventEmitter.deleteAllListeners(getID(PARENT));\n    };\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      handleChildClick\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_CLICK_KEY,\n      handleParentClick\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(handleParentClick.mock.calls.length).toBe(1);\n  });\n\n  it('should not invoke newly inserted handlers while bubbling', function() {\n    var handleParentClick = mocks.getMockFunction();\n    var handleChildClick = function(event) {\n      ReactBrowserEventEmitter.putListener(\n        getID(PARENT),\n        ON_CLICK_KEY,\n        handleParentClick\n      );\n    };\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_CLICK_KEY,\n      handleChildClick\n    );\n    ReactTestUtils.Simulate.click(CHILD);\n    expect(handleParentClick.mock.calls.length).toBe(0);\n  });\n\n  it('should infer onTouchTap from a touchStart/End', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactTestUtils.SimulateNative.touchStart(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    ReactTestUtils.SimulateNative.touchEnd(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    expect(idCallOrder.length).toBe(1);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n  });\n\n  it('should infer onTouchTap from when dragging below threshold', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactTestUtils.SimulateNative.touchStart(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    ReactTestUtils.SimulateNative.touchEnd(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, tapMoveThreshold - 1)\n    );\n    expect(idCallOrder.length).toBe(1);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n  });\n\n  it('should not onTouchTap from when dragging beyond threshold', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactTestUtils.SimulateNative.touchStart(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    ReactTestUtils.SimulateNative.touchEnd(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, tapMoveThreshold + 1)\n    );\n    expect(idCallOrder.length).toBe(0);\n  });\n\n  it('should listen to events only once', function() {\n    spyOn(EventListener, 'listen');\n    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);\n    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);\n    expect(EventListener.listen.callCount).toBe(1);\n  });\n\n  it('should work with event plugins without dependencies', function() {\n    spyOn(EventListener, 'listen');\n\n    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);\n\n    expect(EventListener.listen.argsForCall[0][1]).toBe('click');\n  });\n\n  it('should work with event plugins with dependencies', function() {\n    spyOn(EventListener, 'listen');\n    spyOn(EventListener, 'capture');\n\n    ReactBrowserEventEmitter.listenTo(ON_CHANGE_KEY, document);\n\n    var setEventListeners = [];\n    var listenCalls = EventListener.listen.argsForCall;\n    var captureCalls = EventListener.capture.argsForCall;\n    for (var i = 0, l = listenCalls.length; i < l; i++) {\n      setEventListeners.push(listenCalls[i][1]);\n    }\n    for (i = 0, l = captureCalls.length; i < l; i++) {\n      setEventListeners.push(captureCalls[i][1]);\n    }\n\n    var module =\n          ReactBrowserEventEmitter.registrationNameModules[ON_CHANGE_KEY];\n    var dependencies = module.eventTypes.change.dependencies;\n    expect(setEventListeners.length).toEqual(dependencies.length);\n\n    for (i = 0, l = setEventListeners.length; i < l; i++) {\n      expect(dependencies.indexOf(setEventListeners[i])).toBeTruthy();\n    }\n  });\n\n  it('should bubble onTouchTap', function() {\n    ReactBrowserEventEmitter.putListener(\n      getID(CHILD),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(CHILD))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(PARENT),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(PARENT))\n    );\n    ReactBrowserEventEmitter.putListener(\n      getID(GRANDPARENT),\n      ON_TOUCH_TAP_KEY,\n      recordID.bind(null, getID(GRANDPARENT))\n    );\n    ReactTestUtils.SimulateNative.touchStart(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    ReactTestUtils.SimulateNative.touchEnd(\n      CHILD,\n      ReactTestUtils.nativeTouchData(0, 0)\n    );\n    expect(idCallOrder.length).toBe(3);\n    expect(idCallOrder[0]).toBe(getID(CHILD));\n    expect(idCallOrder[1]).toBe(getID(PARENT));\n    expect(idCallOrder[2]).toBe(getID(GRANDPARENT));\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"browser/__tests__/ReactBrowserEventEmitter-test\", module);\n",
"browser/__tests__/ReactDOM-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactDOM = require(\"../../ReactDOM\");\nvar ReactMount = require(\"../../ReactMount\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar div = React.createFactory('div');\n\ndescribe('ReactDOM', function() {\n  // TODO: uncomment this test once we can run in phantom, which\n  // supports real submit events.\n  /*\n  it('should bubble onSubmit', function() {\n    var count = 0;\n    var form;\n    var Parent = React.createClass({\n      handleSubmit: function() {\n        count++;\n        return false;\n      },\n      render: function() {\n        return <Child />;\n      }\n    });\n    var Child = React.createClass({\n      render: function() {\n        return <form><input type=\"submit\" value=\"Submit\" /></form>;\n      },\n      componentDidMount: function() {\n        form = this.getDOMNode();\n      }\n    });\n    var instance = ReactTestUtils.renderIntoDocument(<Parent />);\n    form.submit();\n    expect(count).toEqual(1);\n  });\n  */\n\n  it(\"should allow children to be passed as an argument\", function() {\n    var argDiv = ReactTestUtils.renderIntoDocument(\n      div(null, 'child')\n    );\n    var argNode = ReactMount.getNode(argDiv._rootNodeID);\n    expect(argNode.innerHTML).toBe('child');\n  });\n\n  it(\"should overwrite props.children with children argument\", function() {\n    var conflictDiv = ReactTestUtils.renderIntoDocument(\n      div({children: 'fakechild'}, 'child')\n    );\n    var conflictNode = ReactMount.getNode(conflictDiv._rootNodeID);\n    expect(conflictNode.innerHTML).toBe('child');\n  });\n\n  /**\n   * We need to make sure that updates occur to the actual node that's in the\n   * DOM, instead of a stale cache.\n   */\n  it(\"should purge the DOM cache when removing nodes\", function() {\n    var myDiv = ReactTestUtils.renderIntoDocument(\n      React.createElement(\"div\", null, {\n        theDog: React.createElement(\"div\", {className: \"dog\"}),\n        theBird: React.createElement(\"div\", {className: \"bird\"})\n      })\n    );\n    // Warm the cache with theDog\n    myDiv.setProps({\n      children: {\n        theDog: React.createElement(\"div\", {className: \"dogbeforedelete\"}),\n        theBird: React.createElement(\"div\", {className: \"bird\"})\n      }\n    });\n    // Remove theDog - this should purge the cache\n    myDiv.setProps({\n      children: {\n        theBird: React.createElement(\"div\", {className: \"bird\"})\n      }\n    });\n    // Now, put theDog back. It's now a different DOM node.\n    myDiv.setProps({\n      children: {\n        theDog: React.createElement(\"div\", {className: \"dog\"}),\n        theBird: React.createElement(\"div\", {className: \"bird\"})\n      }\n    });\n    // Change the className of theDog. It will use the same element\n    myDiv.setProps({\n      children: {\n        theDog: React.createElement(\"div\", {className: \"bigdog\"}),\n        theBird: React.createElement(\"div\", {className: \"bird\"})\n      }\n    });\n    var root = ReactMount.getNode(myDiv._rootNodeID);\n    var dog = root.childNodes[0];\n    expect(dog.className).toBe('bigdog');\n  });\n\n  it('allow React.DOM factories to be called without warnings', function() {\n    spyOn(console, 'warn');\n    var element = React.DOM.div();\n    expect(element.type).toBe('div');\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('warns but allow dom factories to be used in createFactory', function() {\n    spyOn(console, 'warn');\n    var factory = React.createFactory(React.DOM.div);\n    expect(factory().type).toBe('div');\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'Do not pass React.DOM.div'\n    );\n  });\n\n  it('warns but allow dom factories to be used in createElement', function() {\n    spyOn(console, 'warn');\n    var element = React.createElement(React.DOM.div);\n    expect(element.type).toBe('div');\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'Do not pass React.DOM.div'\n    );\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"browser/__tests__/ReactDOM-test\", module);\n",
"browser/__tests__/ReactWebWorker-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\ndescribe('ReactWebWorker', function() {\n  ;(typeof Worker == 'undefined' ? xit : it)('can run React in a web worker', function() {\n    var done = false;\n    var error;\n\n    var worker = new Worker(window.ReactWebWorker_URL || '/src/test/worker.js?_=' + Date.now().toString(36));\n    worker.addEventListener('message', function(e) {\n      var data = JSON.parse(e.data);\n      if (data.type == 'error') {\n        error = data.message + \"\\n\" + data.stack;\n        done = true;\n      } else if (data.type == 'log') {\n        console.log(data.message);\n      } else {\n        expect(data.type).toBe('done');\n        done = true;\n      }\n    });\n\n    waitsFor(function() {\n      return done;\n    }, \"the final message to arrive from the worker\", 2e4);\n\n    runs(function() {\n      if (error) {\n        console.error(error);\n        throw new Error(error);\n      }\n    });\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"browser/__tests__/ReactWebWorker-test\", module);\n",
"browser/eventPlugins/__tests__/EnterLeaveEventPlugin-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar EnterLeaveEventPlugin;\nvar EventConstants;\nvar React;\nvar ReactMount;\n\nvar topLevelTypes;\n\ndescribe('EnterLeaveEventPlugin', function() {\n  beforeEach(function() {\n    require(\"../../../mock-modules\").dumpCache();\n\n    EnterLeaveEventPlugin = require(\"../../../EnterLeaveEventPlugin\");\n    EventConstants = require(\"../../../EventConstants\");\n    React = require(\"../../../React\");\n    ReactMount = require(\"../../../ReactMount\");\n\n    topLevelTypes = EventConstants.topLevelTypes;\n  });\n\n  it('should set relatedTarget properly in iframe', function() {\n    var iframe = document.createElement('iframe');\n    document.body.appendChild(iframe);\n\n    var iframeDocument = iframe.contentDocument;\n\n    iframeDocument.write(\n      '<!DOCTYPE html><html><head></head><body></body></html>'\n    );\n    iframeDocument.close();\n\n    var component = React.render(React.createElement(\"div\", null), iframeDocument.body);\n    var div = component.getDOMNode();\n\n    var extracted = EnterLeaveEventPlugin.extractEvents(\n      topLevelTypes.topMouseOver,\n      div,\n      ReactMount.getID(div),\n      {target: div}\n    );\n    expect(extracted.length).toBe(2);\n\n    var leave = extracted[0];\n    var enter = extracted[1];\n\n    expect(leave.target).toBe(iframe.contentWindow);\n    expect(leave.relatedTarget).toBe(div);\n    expect(enter.target).toBe(div);\n    expect(enter.relatedTarget).toBe(iframe.contentWindow);\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/eventPlugins/__tests__/EnterLeaveEventPlugin-test\", module);\n",
"browser/eventPlugins/__tests__/AnalyticsEventPlugin-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../../mocks\");\n\ndescribe('AnalyticsEventPlugin', function() {\n  var AnalyticsEventPluginFactory;\n  var EventPluginHub;\n  var EventPluginRegistry;\n  var React;\n  var ReactBrowserEventEmitter;\n  var ReactTestUtils;\n\n  var DefaultEventPluginOrder;\n  var EnterLeaveEventPlugin;\n  var ChangeEventPlugin;\n  var ReactInstanceHandles;\n  var SimpleEventPlugin;\n\n  beforeEach(function() {\n    AnalyticsEventPluginFactory = require(\"../../../AnalyticsEventPluginFactory\");\n    EventPluginHub = require(\"../../../EventPluginHub\");\n    EventPluginRegistry = require(\"../../../EventPluginRegistry\");\n    React = require(\"../../../React\");\n    ReactBrowserEventEmitter = require(\"../../../ReactBrowserEventEmitter\");\n    ReactTestUtils = require(\"../../../ReactTestUtils\");\n\n    EventPluginRegistry._resetEventPlugins();\n\n    // Re-inject default events system after resetting.\n    DefaultEventPluginOrder = require(\"../../../DefaultEventPluginOrder\");\n    EnterLeaveEventPlugin = require(\"../../../EnterLeaveEventPlugin\");\n    ChangeEventPlugin = require(\"../../../ChangeEventPlugin\");\n    ReactInstanceHandles = require(\"../../../ReactInstanceHandles\");\n    SimpleEventPlugin = require(\"../../../SimpleEventPlugin\");\n\n    EventPluginHub.injection.injectEventPluginOrder(DefaultEventPluginOrder);\n    EventPluginHub.injection.injectInstanceHandle(ReactInstanceHandles);\n\n    EventPluginHub.injection.injectEventPluginsByName({\n      'SimpleEventPlugin': SimpleEventPlugin,\n      'EnterLeaveEventPlugin': EnterLeaveEventPlugin,\n      'ChangeEventPlugin': ChangeEventPlugin\n    });\n\n  });\n\n  it('should count events correctly', function() {\n    var numClickEvents = 5;\n    var numDoubleClickEvents = 7;\n    var TEST_ANALYTICS_ID = 'test_analytics_id';\n    var TestValidEvents = React.createClass({displayName: \"TestValidEvents\",\n      render: function() {\n        return (\n          React.createElement(\"div\", {ref: \"testDiv\", \n            \"data-analytics-id\": TEST_ANALYTICS_ID, \n            \"data-analytics-events\": \"click,doubleClick\"}, \n            \"Test\"\n          )\n        );\n      }\n    });\n    var renderedComponent =\n      ReactTestUtils.renderIntoDocument(React.createElement(TestValidEvents, null));\n\n    var cb = mocks.getMockFunction().mockImplementation(\n      function(analyticsData) {\n        expect(Object.keys(analyticsData).length).toBe(1);\n        expect(Object.keys(analyticsData[TEST_ANALYTICS_ID]).length).toBe(2);\n        expect(analyticsData[TEST_ANALYTICS_ID].click).toBe(numClickEvents);\n        expect(analyticsData[TEST_ANALYTICS_ID].doubleClick).toBe(\n          numDoubleClickEvents\n        );\n      }\n    );\n\n    EventPluginHub.injection.injectEventPluginsByName({\n      AnalyticsEventPlugin:\n        AnalyticsEventPluginFactory.createAnalyticsPlugin(cb)\n    });\n\n    // Simulate some clicks\n    for (var i = 0; i < numClickEvents; i++) {\n      ReactTestUtils.SimulateNative.click(renderedComponent.refs.testDiv);\n    }\n    // Simulate some double clicks\n    for (i = 0; i < numDoubleClickEvents; i++) {\n      ReactTestUtils.SimulateNative.doubleClick(renderedComponent.refs.testDiv);\n    }\n    // Simulate some other events not being tracked for analytics\n    ReactTestUtils.SimulateNative.focus(renderedComponent.refs.testDiv);\n\n    window.mockRunTimersOnce();\n    expect(cb).toBeCalled();\n  });\n\n  it('error non no callback', function() {\n    expect(function() {\n      AnalyticsEventPluginFactory.createAnalyticsPlugin(null);\n    }).toThrow();\n  });\n\n  it('error on invalid analytics events', function() {\n    var TestInvalidEvents = React.createClass({displayName: \"TestInvalidEvents\",\n      render: function() {\n        return (\n          React.createElement(\"div\", {ref: \"testDiv\", \n            \"data-analytics-id\": \"test_invalid_events\", \n            \"data-analytics-events\": \"click,123\"}, \n            \"Test\"\n          )\n        );\n      }\n    });\n    var renderedComponent =\n      ReactTestUtils.renderIntoDocument(React.createElement(TestInvalidEvents, null));\n\n    var cb = mocks.getMockFunction();\n\n    EventPluginHub.injection.injectEventPluginsByName({\n      AnalyticsEventPlugin: AnalyticsEventPluginFactory.createAnalyticsPlugin(\n        cb\n      )\n    });\n\n    var error = false;\n    try {\n      ReactTestUtils.SimulateNative.click(renderedComponent.refs.testDiv);\n    } catch(e) {\n      error = true;\n    }\n\n    expect(error).toBe(true);\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/eventPlugins/__tests__/AnalyticsEventPlugin-test\", module);\n",
"browser/eventPlugins/__tests__/ResponderEventPlugin-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar EventPluginHub;\nvar EventConstants;\nvar EventPropagators;\nvar ReactInstanceHandles;\nvar ResponderEventPlugin;\nvar SyntheticEvent;\n\nvar GRANDPARENT_ID = '.0';\nvar PARENT_ID = '.0.0';\nvar CHILD_ID = '.0.0.0';\n\nvar topLevelTypes;\nvar responderEventTypes;\nvar spies;\n\nvar DUMMY_NATIVE_EVENT = {};\nvar DUMMY_RENDERED_TARGET = {};\n\nvar onStartShouldSetResponder = function(id, cb, capture) {\n  var registrationNames = responderEventTypes\n    .startShouldSetResponder\n    .phasedRegistrationNames;\n  EventPluginHub.putListener(\n    id,\n    capture ? registrationNames.captured : registrationNames.bubbled,\n    cb\n  );\n};\n\nvar onScrollShouldSetResponder = function(id, cb, capture) {\n  var registrationNames = responderEventTypes\n    .scrollShouldSetResponder\n    .phasedRegistrationNames;\n  EventPluginHub.putListener(\n    id,\n    capture ? registrationNames.captured : registrationNames.bubbled,\n    cb\n  );\n};\n\nvar onMoveShouldSetResponder = function(id, cb, capture) {\n  var registrationNames = responderEventTypes\n    .moveShouldSetResponder\n    .phasedRegistrationNames;\n  EventPluginHub.putListener(\n    id,\n    capture ? registrationNames.captured : registrationNames.bubbled,\n    cb\n  );\n};\n\n\nvar onResponderGrant = function(id, cb) {\n  EventPluginHub.putListener(\n    id,\n    responderEventTypes.responderGrant.registrationName,\n    cb\n  );\n};\n\nvar extractForTouchStart = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topTouchStart,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\nvar extractForTouchMove = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topTouchMove,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\nvar extractForTouchEnd = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topTouchEnd,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\nvar extractForMouseDown = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topMouseDown,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\nvar extractForMouseMove = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topMouseMove,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\n\nvar extractForMouseUp = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topMouseUp,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\nvar extractForScroll = function(renderedTargetID) {\n  return ResponderEventPlugin.extractEvents(\n    topLevelTypes.topScroll,\n    DUMMY_NATIVE_EVENT,\n    renderedTargetID,\n    DUMMY_RENDERED_TARGET\n  );\n};\n\n\nvar onGrantChild;\nvar onGrantParent;\nvar onGrantGrandParent;\n\n\nvar existsInExtraction = function(extracted, test) {\n  if (Array.isArray(extracted)) {\n    for (var i = 0; i < extracted.length; i++) {\n      if (test(extracted[i])) {\n        return true;\n      }\n    }\n  } else if (extracted) {\n    return test(extracted);\n  }\n  return false;\n};\n\n/**\n * Helper validators.\n */\nfunction assertGrantEvent(id, extracted) {\n  var test = function(event) {\n    return event instanceof SyntheticEvent &&\n      event.dispatchConfig === responderEventTypes.responderGrant &&\n      event.dispatchMarker === id;\n  };\n  expect(ResponderEventPlugin.getResponderID()).toBe(id);\n  expect(existsInExtraction(extracted, test)).toBe(true);\n}\n\nfunction assertResponderMoveEvent(id, extracted) {\n  var test = function(event) {\n    return event instanceof SyntheticEvent &&\n      event.dispatchConfig === responderEventTypes.responderMove &&\n      event.dispatchMarker === id;\n  };\n  expect(ResponderEventPlugin.getResponderID()).toBe(id);\n  expect(existsInExtraction(extracted, test)).toBe(true);\n}\n\nfunction assertTerminateEvent(id, extracted) {\n  var test = function(event) {\n    return event instanceof SyntheticEvent &&\n      event.dispatchConfig === responderEventTypes.responderTerminate &&\n      event.dispatchMarker === id;\n  };\n  expect(ResponderEventPlugin.getResponderID()).not.toBe(id);\n  expect(existsInExtraction(extracted, test)).toBe(true);\n}\n\nfunction assertRelease(id, extracted) {\n  var test = function(event) {\n    return event instanceof SyntheticEvent &&\n      event.dispatchConfig === responderEventTypes.responderRelease &&\n      event.dispatchMarker === id;\n  };\n  expect(ResponderEventPlugin.getResponderID()).toBe(null);\n  expect(existsInExtraction(extracted, test)).toBe(true);\n}\n\n\nfunction assertNothingExtracted(extracted) {\n  expect(Array.isArray(extracted)).toBe(false);  // No grant events.\n  expect(Array.isArray(extracted)).toBeFalsy();\n}\n\n\n/**\n * TODO:\n * - Test that returning false from `responderTerminationRequest` will never\n *   cause the responder to be lost.\n * - Automate some of this testing by providing config data - generalize.\n */\n\ndescribe('ResponderEventPlugin', function() {\n  beforeEach(function() {\n    require(\"../../../mock-modules\").dumpCache();\n\n    EventPluginHub = require(\"../../../EventPluginHub\");\n    EventConstants = require(\"../../../EventConstants\");\n    EventPropagators = require(\"../../../EventPropagators\");\n    ReactInstanceHandles = require(\"../../../ReactInstanceHandles\");\n    ResponderEventPlugin = require(\"../../../ResponderEventPlugin\");\n    SyntheticEvent = require(\"../../../SyntheticEvent\");\n    EventPluginHub.injection.injectInstanceHandle(ReactInstanceHandles);\n\n    // dumpCache, in open-source tests, only resets existing mocks. It does not\n    // reset module-state though -- so we need to do this explicitly in the test\n    // for now. Once that's no longer the case, we can delete this line.\n    EventPluginHub.__purge();\n\n    topLevelTypes = EventConstants.topLevelTypes;\n    responderEventTypes = ResponderEventPlugin.eventTypes;\n\n    spies = {\n      onStartShouldSetResponderChild: function() {},\n      onStartShouldSetResponderParent: function() {},\n      onStartShouldSetResponderParentCapture: function() {},\n      onStartShouldSetResponderGrandParent: function() {},\n      onMoveShouldSetResponderParent: function() {},\n      onScrollShouldSetResponderParent: function() {}\n    };\n\n    onGrantChild = function() {};\n    onGrantParent = function() {};\n    onGrantGrandParent = function() {};\n  });\n\n  it('should not auto-set responder on touch start', function() {\n    // Notice we're not registering the startShould* handler.\n    var extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n  });\n\n  it('should not auto-set responder on mouse down', function() {\n    // Notice we're not registering the startShould* handler.\n    var extracted = extractForMouseDown(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n    extractForMouseUp(CHILD_ID); // Let up!\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n\n    // Register `onMoveShould*` handler.\n    spyOn(spies, 'onMoveShouldSetResponderParent').andReturn(true);\n    onMoveShouldSetResponder(PARENT_ID, spies.onMoveShouldSetResponderParent);\n    onResponderGrant(PARENT_ID, onGrantParent);\n    // Move mouse while not pressing down\n    extracted = extractForMouseMove(CHILD_ID);\n    assertNothingExtracted(extracted);\n    // Not going to call `onMoveShould`* if not touching.\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(0);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n\n    // Now try the move extraction again, this time while holding down, and not\n    // letting up.\n    extracted = extractForMouseDown(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n\n    // Now moving can set the responder, if pressing down, even if there is no\n    // current responder.\n    extracted = extractForMouseMove(CHILD_ID);\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(1);\n    expect(ResponderEventPlugin.getResponderID()).toBe(PARENT_ID);\n    assertGrantEvent(PARENT_ID, extracted);\n\n    extractForMouseUp(CHILD_ID);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n  });\n\n  it('should not extract a grant/release event if double start', function() {\n    // Return true - we should become the responder.\n    var extracted;\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onResponderGrant(CHILD_ID, onGrantChild);\n\n    extracted = extractForTouchStart(CHILD_ID);\n    assertGrantEvent(CHILD_ID, extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n\n    // Now we do *not* clear out the touch via a simulated touch end. This mocks\n    // out an environment that likely will never happen, but could in some odd\n    // error state so it's nice to make sure we recover gracefully.\n    // extractForTouchEnd(CHILD_ID); // Clear the responder\n    extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted();\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(2);\n  });\n\n  it('should bubble/capture responder on start', function() {\n    // Return true - we should become the responder.\n    var extracted;\n    spyOn(spies, 'onStartShouldSetResponderParent').andReturn(true);\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onStartShouldSetResponder(PARENT_ID, spies.onStartShouldSetResponderParent);\n    onResponderGrant(CHILD_ID, onGrantChild);\n    onResponderGrant(PARENT_ID, onGrantParent);\n\n    // Nothing extracted if no responder.\n    extracted = extractForTouchMove(GRANDPARENT_ID);\n    assertNothingExtracted(extracted);\n\n    extracted = extractForTouchStart(CHILD_ID);\n    assertGrantEvent(CHILD_ID, extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n    expect(spies.onStartShouldSetResponderParent.callCount).toBe(0);\n\n    // Even if moving on the grandparent, the child will receive responder moves\n    // (This is even true for mouse interactions - which we should absolutely\n    // test)\n    extracted = extractForTouchMove(GRANDPARENT_ID);\n    assertResponderMoveEvent(CHILD_ID, extracted);\n    extracted = extractForTouchMove(CHILD_ID); // Test move on child node too.\n    assertResponderMoveEvent(CHILD_ID, extracted);\n\n    // Reset the responder - id passed here shouldn't matter:\n    // TODO: Test varying the id here.\n    extracted = extractForTouchEnd(GRANDPARENT_ID); // Clear the responder\n    assertRelease(CHILD_ID, extracted);\n\n    // Now make sure the parent requests responder on capture.\n    spyOn(spies, 'onStartShouldSetResponderParentCapture').andReturn(true);\n    onStartShouldSetResponder(\n      PARENT_ID,\n      spies.onStartShouldSetResponderParent,\n      true    // Capture\n    );\n    onResponderGrant(PARENT_ID, onGrantGrandParent);\n    extracted = extractForTouchStart(PARENT_ID);\n    expect(ResponderEventPlugin.getResponderID()).toBe(PARENT_ID);\n    assertGrantEvent(PARENT_ID, extracted);\n    // Now move on various nodes, ensuring that the responder move is emitted to\n    // the parent node.\n    extracted = extractForTouchMove(GRANDPARENT_ID);\n    assertResponderMoveEvent(PARENT_ID, extracted);\n    extracted = extractForTouchMove(CHILD_ID); // Test move on child node too.\n    assertResponderMoveEvent(PARENT_ID, extracted);\n\n    // Reset the responder - id passed here shouldn't matter:\n    // TODO: Test varying the id here.\n    extracted = extractForTouchEnd(GRANDPARENT_ID); // Clear the responder\n    assertRelease(PARENT_ID, extracted);\n\n  });\n\n  it('should invoke callback to ask if responder is desired', function() {\n    // Return true - we should become the responder.\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n\n    var extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n    expect(ResponderEventPlugin.getResponderID()).toBe(CHILD_ID);\n    extractForTouchEnd(CHILD_ID); // Clear the responder\n\n    // Now try returning false - we should not become the responder.\n    spies.onStartShouldSetResponderChild.andReturn(false);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(2);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n    extractForTouchEnd(CHILD_ID);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null); // Still null\n\n    // Same thing as before but return true from \"shouldSet\".\n    spies.onStartShouldSetResponderChild.andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onResponderGrant(CHILD_ID, onGrantChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(3);\n    assertGrantEvent(CHILD_ID, extracted);\n    extracted = extractForTouchEnd(CHILD_ID); // Clear the responder\n    assertRelease(CHILD_ID, extracted);\n  });\n\n  it('should give up responder to parent on move iff allowed', function() {\n    // Return true - we should become the responder.\n    var extracted;\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    spyOn(spies, 'onMoveShouldSetResponderParent').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onMoveShouldSetResponder(PARENT_ID, spies.onMoveShouldSetResponderParent);\n    onResponderGrant(CHILD_ID, onGrantChild);\n    onResponderGrant(PARENT_ID, onGrantParent);\n\n    spies.onStartShouldSetResponderChild.andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(0); // none yet\n    assertGrantEvent(CHILD_ID, extracted);    // Child is the current responder\n\n    extracted = extractForTouchMove(CHILD_ID);\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(1);\n    assertGrantEvent(PARENT_ID, extracted);\n    assertTerminateEvent(CHILD_ID, extracted);\n\n    extracted = extractForTouchEnd(CHILD_ID); // Clear the responder\n    assertRelease(PARENT_ID, extracted);\n  });\n\n  it('should responder move only on direct responder', function() {\n    // Return true - we should become the responder.\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n\n    var extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n    expect(ResponderEventPlugin.getResponderID()).toBe(CHILD_ID);\n    extractForTouchEnd(CHILD_ID); // Clear the responder\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n\n    // Now try returning false - we should not become the responder.\n    spies.onStartShouldSetResponderChild.andReturn(false);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    assertNothingExtracted(extracted);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(2);\n    expect(ResponderEventPlugin.getResponderID()).toBe(null);\n    extractForTouchEnd(CHILD_ID); // Clear the responder\n\n    // Same thing as before but return true from \"shouldSet\".\n    spies.onStartShouldSetResponderChild.andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onResponderGrant(CHILD_ID, onGrantChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(3);\n    assertGrantEvent(CHILD_ID, extracted);\n    extracted = extractForTouchEnd(CHILD_ID); // Clear the responder\n    assertRelease(CHILD_ID, extracted);\n  });\n\n  it('should give up responder to parent on scroll iff allowed', function() {\n    // Return true - we should become the responder.\n    var extracted;\n    spyOn(spies, 'onStartShouldSetResponderChild').andReturn(true);\n    spyOn(spies, 'onMoveShouldSetResponderParent').andReturn(false);\n    spyOn(spies, 'onScrollShouldSetResponderParent').andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    onMoveShouldSetResponder(PARENT_ID, spies.onMoveShouldSetResponderParent);\n    onScrollShouldSetResponder(\n      PARENT_ID,\n      spies.onScrollShouldSetResponderParent\n    );\n    onResponderGrant(CHILD_ID, onGrantChild);\n    onResponderGrant(PARENT_ID, onGrantParent);\n\n    spies.onStartShouldSetResponderChild.andReturn(true);\n    onStartShouldSetResponder(CHILD_ID, spies.onStartShouldSetResponderChild);\n    extracted = extractForTouchStart(CHILD_ID);\n    expect(spies.onStartShouldSetResponderChild.callCount).toBe(1);\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(0); // none yet\n    assertGrantEvent(CHILD_ID, extracted);    // Child is the current responder\n\n    extracted = extractForTouchMove(CHILD_ID);\n    expect(spies.onMoveShouldSetResponderParent.callCount).toBe(1);\n    assertNothingExtracted(extracted);\n\n    extracted = extractForScroll(CHILD_ID); // Could have been parent here too.\n    expect(spies.onScrollShouldSetResponderParent.callCount).toBe(1);\n    assertGrantEvent(PARENT_ID, extracted);\n    assertTerminateEvent(CHILD_ID, extracted);\n\n    extracted = extractForTouchEnd(CHILD_ID); // Clear the responder\n    assertRelease(PARENT_ID, extracted);\n  });\n\n\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/eventPlugins/__tests__/ResponderEventPlugin-test\", module);\n",
"browser/server/__tests__/ReactServerRendering-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nrequire(\"../../../mock-modules\")\n  .dontMock('ExecutionEnvironment')\n  .dontMock('React')\n  .dontMock('ReactMount')\n  .dontMock('ReactServerRendering')\n  .dontMock('ReactTestUtils')\n  .dontMock('ReactMarkupChecksum');\n\nvar mocks = require(\"../../../mocks\");\n\nvar ExecutionEnvironment;\nvar React;\nvar ReactMarkupChecksum;\nvar ReactMount;\nvar ReactReconcileTransaction;\nvar ReactTestUtils;\nvar ReactServerRendering;\n\nvar ID_ATTRIBUTE_NAME;\n\ndescribe('ReactServerRendering', function() {\n  beforeEach(function() {\n    require(\"../../../mock-modules\").dumpCache();\n    React = require(\"../../../React\");\n    ReactMarkupChecksum = require(\"../../../ReactMarkupChecksum\");\n    ReactMount = require(\"../../../ReactMount\");\n    ReactTestUtils = require(\"../../../ReactTestUtils\");\n    ReactReconcileTransaction = require(\"../../../ReactReconcileTransaction\");\n\n    ExecutionEnvironment = require(\"../../../ExecutionEnvironment\");\n    ExecutionEnvironment.canUseDOM = false;\n    ReactServerRendering = require(\"../../../ReactServerRendering\");\n\n    var DOMProperty = require(\"../../../DOMProperty\");\n    ID_ATTRIBUTE_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\n  });\n\n  describe('renderComponentToString', function() {\n    it('should generate simple markup', function() {\n      var response = ReactServerRendering.renderToString(\n        React.createElement(\"span\", null, \"hello world\")\n      );\n      expect(response).toMatch(\n        '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\" ' +\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"[^\"]+\">hello world</span>'\n      );\n    });\n\n    it('should not register event listeners', function() {\n      var EventPluginHub = require(\"../../../EventPluginHub\");\n      var cb = mocks.getMockFunction();\n\n      ReactServerRendering.renderToString(\n        React.createElement(\"span\", {onClick: cb}, \"hello world\")\n      );\n      expect(EventPluginHub.__getListenerBank()).toEqual({});\n    });\n\n    it('should render composite components', function() {\n      var Parent = React.createClass({displayName: \"Parent\",\n        render: function() {\n          return React.createElement(\"div\", null, React.createElement(Child, {name: \"child\"}));\n        }\n      });\n      var Child = React.createClass({displayName: \"Child\",\n        render: function() {\n          return React.createElement(\"span\", null, \"My name is \", this.props.name);\n        }\n      });\n      var response = ReactServerRendering.renderToString(\n        React.createElement(Parent, null)\n      );\n      expect(response).toMatch(\n        '<div ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\" ' +\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"[^\"]+\">' +\n          '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\">' +\n            '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\">My name is </span>' +\n            '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\">child</span>' +\n          '</span>' +\n        '</div>'\n      );\n    });\n\n    it('should only execute certain lifecycle methods', function() {\n      function runTest() {\n        var lifecycle = [];\n        var TestComponent = React.createClass({displayName: \"TestComponent\",\n          componentWillMount: function() {\n            lifecycle.push('componentWillMount');\n          },\n          componentDidMount: function() {\n            lifecycle.push('componentDidMount');\n          },\n          getInitialState: function() {\n            lifecycle.push('getInitialState');\n            return {name: 'TestComponent'};\n          },\n          render: function() {\n            lifecycle.push('render');\n            return React.createElement(\"span\", null, \"Component name: \", this.state.name);\n          },\n          componentWillUpdate: function() {\n            lifecycle.push('componentWillUpdate');\n          },\n          componentDidUpdate: function() {\n            lifecycle.push('componentDidUpdate');\n          },\n          shouldComponentUpdate: function() {\n            lifecycle.push('shouldComponentUpdate');\n          },\n          componentWillReceiveProps: function() {\n            lifecycle.push('componentWillReceiveProps');\n          },\n          componentWillUnmount: function() {\n            lifecycle.push('componentWillUnmount');\n          }\n        });\n\n        var response = ReactServerRendering.renderToString(\n          React.createElement(TestComponent, null)\n        );\n\n        expect(response).toMatch(\n          '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\" ' +\n            ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"[^\"]+\">' +\n            '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\">Component name: </span>' +\n            '<span ' + ID_ATTRIBUTE_NAME + '=\"[^\"]+\">TestComponent</span>' +\n          '</span>'\n        );\n        expect(lifecycle).toEqual(\n          ['getInitialState', 'componentWillMount', 'render']\n        );\n      }\n\n      runTest();\n\n      // This should work the same regardless of whether you can use DOM or not.\n      ExecutionEnvironment.canUseDOM = true;\n      runTest();\n    });\n\n    it('should have the correct mounting behavior', function() {\n      // This test is testing client-side behavior.\n      ExecutionEnvironment.canUseDOM = true;\n\n      var mountCount = 0;\n      var numClicks = 0;\n\n      var TestComponent = React.createClass({displayName: \"TestComponent\",\n        componentDidMount: function() {\n          mountCount++;\n        },\n        click: function() {\n          numClicks++;\n        },\n        render: function() {\n          return (\n            React.createElement(\"span\", {ref: \"span\", onClick: this.click}, \"Name: \", this.props.name)\n          );\n        }\n      });\n\n      var element = document.createElement('div');\n      React.render(React.createElement(TestComponent, null), element);\n\n      var lastMarkup = element.innerHTML;\n\n      // Exercise the update path. Markup should not change,\n      // but some lifecycle methods should be run again.\n      React.render(React.createElement(TestComponent, {name: \"x\"}), element);\n      expect(mountCount).toEqual(1);\n\n      // Unmount and remount. We should get another mount event and\n      // we should get different markup, as the IDs are unique each time.\n      React.unmountComponentAtNode(element);\n      expect(element.innerHTML).toEqual('');\n      React.render(React.createElement(TestComponent, {name: \"x\"}), element);\n      expect(mountCount).toEqual(2);\n      expect(element.innerHTML).not.toEqual(lastMarkup);\n\n      // Now kill the node and render it on top of server-rendered markup, as if\n      // we used server rendering. We should mount again, but the markup should\n      // be unchanged. We will append a sentinel at the end of innerHTML to be\n      // sure that innerHTML was not changed.\n      React.unmountComponentAtNode(element);\n      expect(element.innerHTML).toEqual('');\n\n      ExecutionEnvironment.canUseDOM = false;\n      lastMarkup = ReactServerRendering.renderToString(\n        React.createElement(TestComponent, {name: \"x\"})\n      );\n      ExecutionEnvironment.canUseDOM = true;\n      element.innerHTML = lastMarkup + ' __sentinel__';\n\n      React.render(React.createElement(TestComponent, {name: \"x\"}), element);\n      expect(mountCount).toEqual(3);\n      expect(element.innerHTML.indexOf('__sentinel__') > -1).toBe(true);\n      React.unmountComponentAtNode(element);\n      expect(element.innerHTML).toEqual('');\n\n      // Now simulate a situation where the app is not idempotent. React should\n      // warn but do the right thing.\n      var _warn = console.warn;\n      console.warn = mocks.getMockFunction();\n      element.innerHTML = lastMarkup;\n      var instance = React.render(React.createElement(TestComponent, {name: \"y\"}), element);\n      expect(mountCount).toEqual(4);\n      expect(console.warn.mock.calls.length).toBe(1);\n      expect(element.innerHTML.length > 0).toBe(true);\n      expect(element.innerHTML).not.toEqual(lastMarkup);\n      console.warn = _warn;\n\n      // Ensure the events system works\n      expect(numClicks).toEqual(0);\n      ReactTestUtils.Simulate.click(instance.refs.span.getDOMNode());\n      expect(numClicks).toEqual(1);\n    });\n\n    it('should throw with silly args', function() {\n      expect(\n        ReactServerRendering.renderToString.bind(\n          ReactServerRendering,\n          'not a component'\n        )\n      ).toThrow(\n        'Invariant Violation: renderToString(): You must pass ' +\n        'a valid ReactElement.'\n      );\n    });\n  });\n\n  describe('renderComponentToStaticMarkup', function() {\n    it('should not put checksum and React ID on components', function() {\n      var lifecycle = [];\n      var NestedComponent = React.createClass({displayName: \"NestedComponent\",\n        render: function() {\n          return React.createElement(\"div\", null, \"inner text\");\n        }\n      });\n\n      var TestComponent = React.createClass({displayName: \"TestComponent\",\n        render: function() {\n          lifecycle.push('render');\n          return React.createElement(\"span\", null, React.createElement(NestedComponent, null));\n        }\n      });\n\n      var response = ReactServerRendering.renderToStaticMarkup(\n        React.createElement(TestComponent, null)\n      );\n\n      expect(response).toBe('<span><div>inner text</div></span>');\n    });\n\n    it('should not put checksum and React ID on text components', function() {\n      var TestComponent = React.createClass({displayName: \"TestComponent\",\n        render: function() {\n          return React.createElement(\"span\", null, 'hello', \" \", 'world');\n        }\n      });\n\n      var response = ReactServerRendering.renderToStaticMarkup(\n        React.createElement(TestComponent, null)\n      );\n\n      expect(response).toBe('<span>hello world</span>');\n    });\n\n    it('should not register event listeners', function() {\n      var EventPluginHub = require(\"../../../EventPluginHub\");\n      var cb = mocks.getMockFunction();\n\n      ReactServerRendering.renderToString(\n        React.createElement(\"span\", {onClick: cb}, \"hello world\")\n      );\n      expect(EventPluginHub.__getListenerBank()).toEqual({});\n    });\n\n    it('should only execute certain lifecycle methods', function() {\n      function runTest() {\n        var lifecycle = [];\n        var TestComponent = React.createClass({displayName: \"TestComponent\",\n          componentWillMount: function() {\n            lifecycle.push('componentWillMount');\n          },\n          componentDidMount: function() {\n            lifecycle.push('componentDidMount');\n          },\n          getInitialState: function() {\n            lifecycle.push('getInitialState');\n            return {name: 'TestComponent'};\n          },\n          render: function() {\n            lifecycle.push('render');\n            return React.createElement(\"span\", null, \"Component name: \", this.state.name);\n          },\n          componentWillUpdate: function() {\n            lifecycle.push('componentWillUpdate');\n          },\n          componentDidUpdate: function() {\n            lifecycle.push('componentDidUpdate');\n          },\n          shouldComponentUpdate: function() {\n            lifecycle.push('shouldComponentUpdate');\n          },\n          componentWillReceiveProps: function() {\n            lifecycle.push('componentWillReceiveProps');\n          },\n          componentWillUnmount: function() {\n            lifecycle.push('componentWillUnmount');\n          }\n        });\n\n        var response = ReactServerRendering.renderToStaticMarkup(\n          React.createElement(TestComponent, null)\n        );\n\n        expect(response).toBe('<span>Component name: TestComponent</span>');\n        expect(lifecycle).toEqual(\n          ['getInitialState', 'componentWillMount', 'render']\n        );\n      }\n\n      runTest();\n\n      // This should work the same regardless of whether you can use DOM or not.\n      ExecutionEnvironment.canUseDOM = true;\n      runTest();\n    });\n\n    it('should throw with silly args', function() {\n      expect(\n        ReactServerRendering.renderToStaticMarkup.bind(\n          ReactServerRendering,\n          'not a component'\n        )\n      ).toThrow(\n        'Invariant Violation: renderToStaticMarkup(): You must pass ' +\n        'a valid ReactElement.'\n      );\n    });\n\n    it('allows setState in componentWillMount without using DOM', function() {\n      var Component = React.createClass({displayName: \"Component\",\n        componentWillMount: function() {\n          this.setState({text: 'hello, world'});\n        },\n        render: function() {\n          return React.createElement(\"div\", null, this.state.text);\n        }\n      });\n\n      ReactReconcileTransaction.prototype.perform = function() {\n        // We shouldn't ever be calling this on the server\n        throw new Error('Browser reconcile transaction should not be used');\n      };\n      var markup = ReactServerRendering.renderToString(\n        React.createElement(Component, null)\n      );\n      expect(markup.indexOf('hello, world') >= 0).toBe(true);\n    });\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/server/__tests__/ReactServerRendering-test\", module);\n",
"browser/syntheticEvents/__tests__/SyntheticEvent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar SyntheticEvent;\n\ndescribe('SyntheticEvent', function() {\n  var createEvent;\n\n  beforeEach(function() {\n    SyntheticEvent = require(\"../../../SyntheticEvent\");\n\n    createEvent = function(nativeEvent) {\n      return SyntheticEvent.getPooled({}, '', nativeEvent);\n    };\n  });\n\n  it('should normalize `target` from the nativeEvent', function() {\n    var target = document.createElement('div');\n    var syntheticEvent = createEvent({srcElement: target});\n\n    expect(syntheticEvent.target).toBe(target);\n    expect(syntheticEvent.type).toBe(undefined);\n  });\n\n  it('should be able to `preventDefault`', function() {\n    var nativeEvent = {};\n    var syntheticEvent = createEvent(nativeEvent);\n\n    expect(syntheticEvent.isDefaultPrevented()).toBe(false);\n    syntheticEvent.preventDefault();\n    expect(syntheticEvent.isDefaultPrevented()).toBe(true);\n\n    expect(syntheticEvent.defaultPrevented).toBe(true);\n\n    expect(nativeEvent.returnValue).toBe(false);\n  });\n\n  it('should be prevented if nativeEvent is prevented', function() {\n    expect(\n      createEvent({defaultPrevented: true}).isDefaultPrevented()\n    ).toBe(true);\n    expect(createEvent({returnValue: false}).isDefaultPrevented()).toBe(true);\n  });\n\n  it('should be able to `stopPropagation`', function() {\n    var nativeEvent = {};\n    var syntheticEvent = createEvent(nativeEvent);\n\n    expect(syntheticEvent.isPropagationStopped()).toBe(false);\n    syntheticEvent.stopPropagation();\n    expect(syntheticEvent.isPropagationStopped()).toBe(true);\n\n    expect(nativeEvent.cancelBubble).toBe(true);\n  });\n\n  it('should be able to `persist`', function() {\n    var syntheticEvent = createEvent({});\n\n    expect(syntheticEvent.isPersistent()).toBe(false);\n    syntheticEvent.persist();\n    expect(syntheticEvent.isPersistent()).toBe(true);\n  });\n\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/syntheticEvents/__tests__/SyntheticEvent-test\", module);\n",
"browser/syntheticEvents/__tests__/SyntheticWheelEvent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar SyntheticWheelEvent;\n\ndescribe('SyntheticWheelEvent', function() {\n  var createEvent;\n\n  beforeEach(function() {\n    SyntheticWheelEvent = require(\"../../../SyntheticWheelEvent\");\n\n    createEvent = function(nativeEvent) {\n      return SyntheticWheelEvent.getPooled({}, '', nativeEvent);\n    };\n  });\n\n  it('should normalize properties from the Event interface', function() {\n    var target = document.createElement('div');\n    var syntheticEvent = createEvent({srcElement: target});\n\n    expect(syntheticEvent.target).toBe(target);\n    expect(syntheticEvent.type).toBe(undefined);\n  });\n\n  it('should normalize properties from the MouseEvent interface', function() {\n    expect(createEvent({which: 2, button: 1}).button).toBe(1);\n  });\n\n  it('should normalize properties from the WheelEvent interface', function() {\n    var standardEvent = createEvent({deltaX: 10, deltaY: -50});\n    expect(standardEvent.deltaX).toBe(10);\n    expect(standardEvent.deltaY).toBe(-50);\n\n    var webkitEvent = createEvent({wheelDeltaX: -10, wheelDeltaY: 50});\n    expect(webkitEvent.deltaX).toBe(10);\n    expect(webkitEvent.deltaY).toBe(-50);\n  });\n\n  it('should be able to `preventDefault` and `stopPropagation`', function() {\n    var nativeEvent = {};\n    var syntheticEvent = createEvent(nativeEvent);\n\n    expect(syntheticEvent.isDefaultPrevented()).toBe(false);\n    syntheticEvent.preventDefault();\n    expect(syntheticEvent.isDefaultPrevented()).toBe(true);\n\n    expect(syntheticEvent.isPropagationStopped()).toBe(false);\n    syntheticEvent.stopPropagation();\n    expect(syntheticEvent.isPropagationStopped()).toBe(true);\n  });\n\n  it('should be able to `persist`', function() {\n    var syntheticEvent = createEvent({});\n\n    expect(syntheticEvent.isPersistent()).toBe(false);\n    syntheticEvent.persist();\n    expect(syntheticEvent.isPersistent()).toBe(true);\n  });\n\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/syntheticEvents/__tests__/SyntheticWheelEvent-test\", module);\n",
"browser/ui/__tests__/ReactDOMComponent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar assign = require(\"../../../Object.assign\");\nvar mocks = require(\"../../../mocks\");\n\ndescribe('ReactDOMComponent', function() {\n\n  describe('updateDOM', function() {\n    var React;\n    var ReactTestUtils;\n    var transaction;\n\n    beforeEach(function() {\n      React = require(\"../../../React\");\n      ReactTestUtils = require(\"../../../ReactTestUtils\");\n\n      var ReactReconcileTransaction = require(\"../../../ReactReconcileTransaction\");\n      transaction = new ReactReconcileTransaction();\n    });\n\n    it(\"should handle className\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: {}}));\n\n      stub.receiveComponent({props: { className: 'foo' }}, transaction);\n      expect(stub.getDOMNode().className).toEqual('foo');\n      stub.receiveComponent({props: { className: 'bar' }}, transaction);\n      expect(stub.getDOMNode().className).toEqual('bar');\n      stub.receiveComponent({props: { className: null }}, transaction);\n      expect(stub.getDOMNode().className).toEqual('');\n    });\n\n    it(\"should gracefully handle various style value types\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: {}}));\n      var stubStyle = stub.getDOMNode().style;\n\n      // set initial style\n      var setup = { display: 'block', left: '1', top: 2, fontFamily: 'Arial' };\n      stub.receiveComponent({props: { style: setup }}, transaction);\n      expect(stubStyle.display).toEqual('block');\n      expect(stubStyle.left).toEqual('1px');\n      expect(stubStyle.fontFamily).toEqual('Arial');\n\n      // reset the style to their default state\n      var reset = { display: '', left: null, top: false, fontFamily: true };\n      stub.receiveComponent({props: { style: reset }}, transaction);\n      expect(stubStyle.display).toEqual('');\n      expect(stubStyle.left).toEqual('');\n      expect(stubStyle.top).toEqual('');\n      expect(stubStyle.fontFamily).toEqual('');\n    });\n\n    it(\"should update styles when mutating style object\", function() {\n      var styles = { display: 'none', fontFamily: 'Arial', lineHeight: 1.2 };\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: styles}));\n\n      var stubStyle = stub.getDOMNode().style;\n      stubStyle.display = styles.display;\n      stubStyle.fontFamily = styles.fontFamily;\n\n      styles.display = 'block';\n\n      stub.receiveComponent({props: { style: styles }}, transaction);\n      expect(stubStyle.display).toEqual('block');\n      expect(stubStyle.fontFamily).toEqual('Arial');\n      expect(stubStyle.lineHeight).toEqual('1.2');\n\n      styles.fontFamily = 'Helvetica';\n\n      stub.receiveComponent({props: { style: styles }}, transaction);\n      expect(stubStyle.display).toEqual('block');\n      expect(stubStyle.fontFamily).toEqual('Helvetica');\n      expect(stubStyle.lineHeight).toEqual('1.2');\n\n      styles.lineHeight = 0.5;\n\n      stub.receiveComponent({props: { style: styles }}, transaction);\n      expect(stubStyle.display).toEqual('block');\n      expect(stubStyle.fontFamily).toEqual('Helvetica');\n      expect(stubStyle.lineHeight).toEqual('0.5');\n\n      stub.receiveComponent({props: { style: undefined }}, transaction);\n      expect(stubStyle.display).toBe('');\n      expect(stubStyle.fontFamily).toBe('');\n      expect(stubStyle.lineHeight).toBe('');\n    });\n\n    it(\"should update styles if initially null\", function() {\n      var styles = null;\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: styles}));\n\n      var stubStyle = stub.getDOMNode().style;\n\n      styles = {display: 'block'};\n\n      stub.receiveComponent({props: { style: styles }}, transaction);\n      expect(stubStyle.display).toEqual('block');\n    });\n\n    it(\"should remove attributes\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"img\", {height: \"17\"}));\n\n      expect(stub.getDOMNode().hasAttribute('height')).toBe(true);\n      stub.receiveComponent({props: {}}, transaction);\n      expect(stub.getDOMNode().hasAttribute('height')).toBe(false);\n    });\n\n    it(\"should remove properties\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {className: \"monkey\"}));\n\n      expect(stub.getDOMNode().className).toEqual('monkey');\n      stub.receiveComponent({props: {}}, transaction);\n      expect(stub.getDOMNode().className).toEqual('');\n    });\n\n    it(\"should clear a single style prop when changing 'style'\", function() {\n      var styles = {display: 'none', color: 'red'};\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: styles}));\n\n      var stubStyle = stub.getDOMNode().style;\n\n      styles = {color: 'green'};\n      stub.receiveComponent({props: { style: styles }}, transaction);\n      expect(stubStyle.display).toEqual('');\n      expect(stubStyle.color).toEqual('green');\n    });\n\n    it(\"should clear all the styles when removing 'style'\", function() {\n      var styles = {display: 'none', color: 'red'};\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {style: styles}));\n\n      var stubStyle = stub.getDOMNode().style;\n\n      stub.receiveComponent({props: {}}, transaction);\n      expect(stubStyle.display).toEqual('');\n      expect(stubStyle.color).toEqual('');\n    });\n\n    it(\"should empty element when removing innerHTML\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(\n        React.createElement(\"div\", {dangerouslySetInnerHTML: {__html: ':)'}})\n      );\n\n      expect(stub.getDOMNode().innerHTML).toEqual(':)');\n      stub.receiveComponent({props: {}}, transaction);\n      expect(stub.getDOMNode().innerHTML).toEqual('');\n    });\n\n    it(\"should transition from string content to innerHTML\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(\n        React.createElement(\"div\", null, \"hello\")\n      );\n\n      expect(stub.getDOMNode().innerHTML).toEqual('hello');\n      stub.receiveComponent(\n        {props: {dangerouslySetInnerHTML: {__html: 'goodbye'}}},\n        transaction\n      );\n      expect(stub.getDOMNode().innerHTML).toEqual('goodbye');\n    });\n\n    it(\"should transition from innerHTML to string content\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(\n        React.createElement(\"div\", {dangerouslySetInnerHTML: {__html: 'bonjour'}})\n      );\n\n      expect(stub.getDOMNode().innerHTML).toEqual('bonjour');\n      stub.receiveComponent({props: {children: 'adieu'}}, transaction);\n      expect(stub.getDOMNode().innerHTML).toEqual('adieu');\n    });\n\n    it(\"should not incur unnecessary DOM mutations\", function() {\n      var stub = ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {value: \"\"}));\n\n      var node = stub.getDOMNode();\n      var nodeValue = ''; // node.value always returns undefined\n      var nodeValueSetter = mocks.getMockFunction();\n      Object.defineProperty(node, 'value', {\n        get: function() {\n          return nodeValue;\n        },\n        set: nodeValueSetter.mockImplementation(function(newValue) {\n          nodeValue = newValue;\n        })\n      });\n\n      stub.receiveComponent({props: {value: ''}}, transaction);\n      expect(nodeValueSetter.mock.calls.length).toBe(0);\n\n      stub.receiveComponent({props: {}}, transaction);\n      expect(nodeValueSetter.mock.calls.length).toBe(1);\n    });\n  });\n\n  describe('createOpenTagMarkup', function() {\n    var genMarkup;\n\n    function quoteRegexp(str) {\n      return (str+'').replace(/([.?*+\\^$\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    }\n\n    beforeEach(function() {\n      require(\"../../../mock-modules\").dumpCache();\n\n      var ReactDefaultInjection = require(\"../../../ReactDefaultInjection\");\n      ReactDefaultInjection.inject();\n\n      var ReactDOMComponent = require(\"../../../ReactDOMComponent\");\n      var ReactReconcileTransaction = require(\"../../../ReactReconcileTransaction\");\n\n      var NodeStub = function(initialProps) {\n        this.props = initialProps || {};\n        this._rootNodeID = 'test';\n      };\n      assign(NodeStub.prototype, ReactDOMComponent.Mixin);\n\n      genMarkup = function(props) {\n        var transaction = new ReactReconcileTransaction();\n        return (new NodeStub(props))._createOpenTagMarkupAndPutListeners(\n          transaction\n        );\n      };\n\n      this.addMatchers({\n        toHaveAttribute: function(attr, value) {\n          var expected = '(?:^|\\\\s)' + attr + '=[\\\\\\'\"]';\n          if (typeof value != 'undefined') {\n            expected += quoteRegexp(value) + '[\\\\\\'\"]';\n          }\n          return this.actual.match(new RegExp(expected));\n        }\n      });\n    });\n\n    it(\"should generate the correct markup with className\", function() {\n      expect(genMarkup({ className: 'a' })).toHaveAttribute('class', 'a');\n      expect(genMarkup({ className: 'a b' })).toHaveAttribute('class', 'a b');\n      expect(genMarkup({ className: '' })).toHaveAttribute('class', '');\n    });\n\n    it(\"should escape style names and values\", function() {\n      expect(genMarkup({\n        style: {'b&ckground': '<3'}\n      })).toHaveAttribute('style', 'b&amp;ckground:&lt;3;');\n    });\n  });\n\n  describe('createContentMarkup', function() {\n    var genMarkup;\n\n    function quoteRegexp(str) {\n      return (str+'').replace(/([.?*+\\^$\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    }\n\n    beforeEach(function() {\n      require(\"../../../mock-modules\").dumpCache();\n\n      var ReactDOMComponent = require(\"../../../ReactDOMComponent\");\n      var ReactReconcileTransaction = require(\"../../../ReactReconcileTransaction\");\n\n      var NodeStub = function(initialProps) {\n        this.props = initialProps || {};\n        this._rootNodeID = 'test';\n      };\n      assign(NodeStub.prototype, ReactDOMComponent.Mixin);\n\n      genMarkup = function(props) {\n        var transaction = new ReactReconcileTransaction();\n        return (new NodeStub(props))._createContentMarkup(transaction);\n      };\n\n      this.addMatchers({\n        toHaveInnerhtml: function(html) {\n          var expected = '^' + quoteRegexp(html) + '$';\n          return this.actual.match(new RegExp(expected));\n        }\n      });\n    });\n\n    it(\"should handle dangerouslySetInnerHTML\", function() {\n      var innerHTML = {__html: 'testContent'};\n      expect(\n        genMarkup({ dangerouslySetInnerHTML: innerHTML })\n      ).toHaveInnerhtml('testContent');\n    });\n  });\n\n  describe('mountComponent', function() {\n    var mountComponent;\n\n    beforeEach(function() {\n      require(\"../../../mock-modules\").dumpCache();\n\n      var ReactComponent = require(\"../../../ReactComponent\");\n      var ReactMultiChild = require(\"../../../ReactMultiChild\");\n      var ReactDOMComponent = require(\"../../../ReactDOMComponent\");\n      var ReactReconcileTransaction = require(\"../../../ReactReconcileTransaction\");\n\n      var StubNativeComponent = function(element) {\n        ReactComponent.Mixin.construct.call(this, element);\n      };\n      assign(StubNativeComponent.prototype, ReactComponent.Mixin);\n      assign(StubNativeComponent.prototype, ReactDOMComponent.Mixin);\n      assign(StubNativeComponent.prototype, ReactMultiChild.Mixin);\n\n      mountComponent = function(props) {\n        var transaction = new ReactReconcileTransaction();\n        var stubComponent = new StubNativeComponent({\n          type: StubNativeComponent,\n          props: props,\n          _owner: null,\n          _context: null\n        });\n        return stubComponent.mountComponent('test', transaction, 0);\n      };\n    });\n\n    it(\"should validate against multiple children props\", function() {\n      expect(function() {\n        mountComponent({ children: '', dangerouslySetInnerHTML: '' });\n      }).toThrow(\n        'Invariant Violation: Can only set one of `children` or ' +\n        '`props.dangerouslySetInnerHTML`.'\n      );\n    });\n\n    it(\"should warn about contentEditable and children\", function() {\n      spyOn(console, 'warn');\n      mountComponent({ contentEditable: true, children: '' });\n      expect(console.warn.argsForCall.length).toBe(1);\n      expect(console.warn.argsForCall[0][0]).toContain('contentEditable');\n    });\n\n    it(\"should validate against invalid styles\", function() {\n      expect(function() {\n        mountComponent({ style: 'display: none' });\n      }).toThrow(\n        'Invariant Violation: The `style` prop expects a mapping from style ' +\n        'properties to values, not a string.'\n      );\n    });\n  });\n\n  describe('updateComponent', function() {\n    var React;\n    var container;\n\n    beforeEach(function() {\n      React = require(\"../../../React\");\n      container = document.createElement('div');\n    });\n\n    it(\"should validate against multiple children props\", function() {\n      React.render(React.createElement(\"div\", null), container);\n\n      expect(function() {\n        React.render(\n          React.createElement(\"div\", {children: \"\", dangerouslySetInnerHTML: {__html: ''}}),\n          container\n        );\n      }).toThrow(\n        'Invariant Violation: Can only set one of `children` or ' +\n        '`props.dangerouslySetInnerHTML`.'\n      );\n    });\n\n    it(\"should warn about contentEditable and children\", function() {\n      spyOn(console, 'warn');\n      React.render(\n        React.createElement(\"div\", {contentEditable: true}, React.createElement(\"div\", null)),\n        container\n      );\n      expect(console.warn.argsForCall.length).toBe(1);\n      expect(console.warn.argsForCall[0][0]).toContain('contentEditable');\n    });\n\n    it(\"should validate against invalid styles\", function() {\n      React.render(React.createElement(\"div\", null), container);\n\n      expect(function() {\n        React.render(React.createElement(\"div\", {style: 1}), container);\n      }).toThrow(\n        'Invariant Violation: The `style` prop expects a mapping from style ' +\n        'properties to values, not a string.'\n      );\n    });\n  });\n\n  describe('unmountComponent', function() {\n    it(\"should clean up listeners\", function() {\n      var React = require(\"../../../React\");\n      var ReactBrowserEventEmitter = require(\"../../../ReactBrowserEventEmitter\");\n      var ReactMount = require(\"../../../ReactMount\");\n\n      var container = document.createElement('div');\n      document.documentElement.appendChild(container);\n\n      var callback = function() {};\n      var instance = React.createElement(\"div\", {onClick: callback});\n      instance = React.render(instance, container);\n\n      var rootNode = instance.getDOMNode();\n      var rootNodeID = ReactMount.getID(rootNode);\n      expect(\n        ReactBrowserEventEmitter.getListener(rootNodeID, 'onClick')\n      ).toBe(callback);\n\n      React.unmountComponentAtNode(container);\n\n      expect(\n        ReactBrowserEventEmitter.getListener(rootNodeID, 'onClick')\n      ).toBe(undefined);\n    });\n  });\n\n  describe('onScroll warning', function() {\n    it('should warn about the `onScroll` issue when unsupported (IE8)', function()  {\n      // Mock this here so we can mimic IE8 support. We require isEventSupported\n      // before React so it's pre-mocked before React qould require it.\n      require(\"../../../mock-modules\")\n        .dumpCache()\n        .mock('isEventSupported');\n      var isEventSupported = require(\"../../../isEventSupported\");\n      isEventSupported.mockReturnValueOnce(false);\n\n      var React = require(\"../../../React\");\n      var ReactTestUtils = require(\"../../../ReactTestUtils\");\n\n      spyOn(console, 'warn');\n      ReactTestUtils.renderIntoDocument(React.createElement(\"div\", {onScroll: function(){}}));\n      expect(console.warn.callCount).toBe(1);\n      expect(console.warn.mostRecentCall.args[0]).toBe(\n        'This browser doesn\\'t support the `onScroll` event'\n      );\n    });\n  });\n\n  describe('tag sanitization', function() {\n    it('should throw when an invalid tag name is used', function()  {\n      var React = require(\"../../../React\");\n      var ReactTestUtils = require(\"../../../ReactTestUtils\");\n      var hackzor = React.createElement('script tag');\n      expect(\n        function()  {return ReactTestUtils.renderIntoDocument(hackzor);}\n      ).toThrow(\n        'Invariant Violation: Invalid tag: script tag'\n      );\n    });\n\n    it('should throw when an attack vector is used', function()  {\n      var React = require(\"../../../React\");\n      var ReactTestUtils = require(\"../../../ReactTestUtils\");\n      var hackzor = React.createElement('div><img /><div');\n      expect(\n        function()  {return ReactTestUtils.renderIntoDocument(hackzor);}\n      ).toThrow(\n        'Invariant Violation: Invalid tag: div><img /><div'\n      );\n    });\n\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactDOMComponent-test\", module);\n",
"browser/ui/__tests__/ReactDOMIDOperations-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\ndescribe('ReactDOMIDOperations', function() {\n  var DOMPropertyOperations = require(\"../../../DOMPropertyOperations\");\n  var ReactDOMIDOperations = require(\"../../../ReactDOMIDOperations\");\n  var ReactMount = require(\"../../../ReactMount\");\n  var keyOf = require(\"../../../keyOf\");\n\n  it('should disallow updating special properties', function() {\n    spyOn(ReactMount, \"getNode\");\n    spyOn(DOMPropertyOperations, \"setValueForProperty\");\n\n    expect(function() {\n      ReactDOMIDOperations.updatePropertyByID(\n        'testID',\n        keyOf({dangerouslySetInnerHTML: null}),\n        {__html: 'testContent'}\n      );\n    }).toThrow();\n\n    expect(\n      ReactMount.getNode.argsForCall[0][0]\n    ).toBe('testID');\n\n    expect(\n      DOMPropertyOperations.setValueForProperty.callCount\n    ).toBe(0);\n  });\n\n  it('should update innerHTML and preserve whitespace', function() {\n    var stubNode = document.createElement('div');\n    spyOn(ReactMount, \"getNode\").andReturn(stubNode);\n\n    var html = '\\n  \\t  <span>  \\n  testContent  \\t  </span>  \\n  \\t';\n\n    ReactDOMIDOperations.updateInnerHTMLByID(\n      'testID',\n      html\n    );\n\n    expect(\n      ReactMount.getNode.argsForCall[0][0]\n    ).toBe('testID');\n\n    expect(stubNode.innerHTML).toBe(html);\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactDOMIDOperations-test\", module);\n",
"browser/ui/__tests__/ReactEventListener-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n'use strict';\n\nvar mocks = require(\"../../../mocks\");\n\n\nvar EVENT_TARGET_PARAM = 1;\n\ndescribe('ReactEventListener', function() {\n  var React;\n\n  var ReactMount;\n  var ReactEventListener;\n  var handleTopLevel;\n\n  beforeEach(function() {\n    require(\"../../../mock-modules\").dumpCache();\n    React = require(\"../../../React\");\n\n    ReactMount = require(\"../../../ReactMount\");\n    ReactEventListener = require(\"../../../ReactEventListener\");\n\n    handleTopLevel = mocks.getMockFunction();\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  });\n\n  describe('Propagation', function() {\n    it('should propagate events one level down', function() {\n      var childContainer = document.createElement('div');\n      var childControl = React.createElement(\"div\", null, \"Child\");\n      var parentContainer = document.createElement('div');\n      var parentControl = React.createElement(\"div\", null, \"Parent\");\n      childControl = ReactMount.render(childControl, childContainer);\n      parentControl =\n        ReactMount.render(parentControl, parentContainer);\n      parentControl.getDOMNode().appendChild(childContainer);\n\n      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');\n      callback({\n        target: childControl.getDOMNode()\n      });\n\n      var calls = handleTopLevel.mock.calls;\n      expect(calls.length).toBe(2);\n      expect(calls[0][EVENT_TARGET_PARAM]).toBe(childControl.getDOMNode());\n      expect(calls[1][EVENT_TARGET_PARAM]).toBe(parentControl.getDOMNode());\n    });\n\n    it('should propagate events two levels down', function() {\n      var childContainer = document.createElement('div');\n      var childControl = React.createElement(\"div\", null, \"Child\");\n      var parentContainer = document.createElement('div');\n      var parentControl = React.createElement(\"div\", null, \"Parent\");\n      var grandParentContainer = document.createElement('div');\n      var grandParentControl = React.createElement(\"div\", null, \"Parent\");\n      childControl = ReactMount.render(childControl, childContainer);\n      parentControl =\n        ReactMount.render(parentControl, parentContainer);\n      grandParentControl =\n        ReactMount.render(grandParentControl, grandParentContainer);\n      parentControl.getDOMNode().appendChild(childContainer);\n      grandParentControl.getDOMNode().appendChild(parentContainer);\n\n      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');\n      callback({\n        target: childControl.getDOMNode()\n      });\n\n      var calls = handleTopLevel.mock.calls;\n      expect(calls.length).toBe(3);\n      expect(calls[0][EVENT_TARGET_PARAM]).toBe(childControl.getDOMNode());\n      expect(calls[1][EVENT_TARGET_PARAM]).toBe(parentControl.getDOMNode());\n      expect(calls[2][EVENT_TARGET_PARAM])\n        .toBe(grandParentControl.getDOMNode());\n    });\n\n    it('should not get confused by disappearing elements', function() {\n      var childContainer = document.createElement('div');\n      var childControl = React.createElement(\"div\", null, \"Child\");\n      var parentContainer = document.createElement('div');\n      var parentControl = React.createElement(\"div\", null, \"Parent\");\n      childControl = ReactMount.render(childControl, childContainer);\n      parentControl =\n        ReactMount.render(parentControl, parentContainer);\n      parentControl.getDOMNode().appendChild(childContainer);\n\n      // ReactBrowserEventEmitter.handleTopLevel might remove the\n      // target from the DOM. Here, we have handleTopLevel remove the\n      // node when the first event handlers are called; we'll still\n      // expect to receive a second call for the parent control.\n      var childNode = childControl.getDOMNode();\n      handleTopLevel.mockImplementation(\n        function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n          if (topLevelTarget === childNode) {\n            ReactMount.unmountComponentAtNode(childContainer);\n          }\n        }\n      );\n\n      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');\n      callback({\n        target: childNode\n      });\n\n      var calls = handleTopLevel.mock.calls;\n      expect(calls.length).toBe(2);\n      expect(calls[0][EVENT_TARGET_PARAM]).toBe(childNode);\n      expect(calls[1][EVENT_TARGET_PARAM]).toBe(parentControl.getDOMNode());\n    });\n\n    it('should batch between handlers from different roots', function() {\n      var childContainer = document.createElement('div');\n      var parentContainer = document.createElement('div');\n      var childControl = ReactMount.render(\n        React.createElement(\"div\", null, \"Child\"),\n        childContainer\n      );\n      var parentControl = ReactMount.render(\n        React.createElement(\"div\", null, \"Parent\"),\n        parentContainer\n      );\n      parentControl.getDOMNode().appendChild(childContainer);\n\n      // Suppose an event handler in each root enqueues an update to the\n      // childControl element -- the two updates should get batched together.\n      var childNode = childControl.getDOMNode();\n      handleTopLevel.mockImplementation(\n        function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n          ReactMount.render(\n            React.createElement(\"div\", null, topLevelTarget === childNode ? '1' : '2'),\n            childContainer\n          );\n          // Since we're batching, neither update should yet have gone through.\n          expect(childNode.textContent).toBe('Child');\n        }\n      );\n\n      var callback =\n        ReactEventListener.dispatchEvent.bind(ReactEventListener, 'test');\n      callback({\n        target: childNode\n      });\n\n      var calls = handleTopLevel.mock.calls;\n      expect(calls.length).toBe(2);\n      expect(childNode.textContent).toBe('2');\n    });\n  });\n\n  it('should not fire duplicate events for a React DOM tree', function() {\n    var container = document.createElement('div');\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n\n      getInner: function() {\n        return this.refs.inner;\n      },\n\n      render: function() {\n        var inner = React.createElement(\"div\", {ref: \"inner\"}, \"Inner\");\n        return React.createElement(\"div\", null, React.createElement(\"div\", {id: \"outer\"}, inner));\n      }\n\n    });\n\n    var instance = ReactMount.render(React.createElement(Wrapper, null), container);\n\n    var callback = ReactEventListener.dispatchEvent.bind(null, 'test');\n    callback({\n      target: instance.getInner().getDOMNode()\n    });\n\n    var calls = handleTopLevel.mock.calls;\n    expect(calls.length).toBe(1);\n    expect(calls[0][EVENT_TARGET_PARAM]).toBe(instance.getInner().getDOMNode());\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactEventListener-test\", module);\n",
"browser/ui/__tests__/ReactMount-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../../mocks\");\n\ndescribe('ReactMount', function() {\n  var React = require(\"../../../React\");\n  var ReactMount = require(\"../../../ReactMount\");\n  var ReactTestUtils = require(\"../../../ReactTestUtils\");\n\n  describe('constructAndRenderComponentByID', function() {\n    it('throws if given an id for a component that doesn\\'t exist', function() {\n      expect(function() {\n        ReactMount.constructAndRenderComponentByID(\n          function dummyComponentConstructor() {},\n          {},\n          'SOME_ID_THAT_DOESNT_EXIST'\n        );\n      }).toThrow();\n    });\n  });\n\n  it('throws when given a string', function() {\n    expect(function() {\n      ReactTestUtils.renderIntoDocument('div');\n    }).toThrow(\n      'Invariant Violation: renderComponent(): Invalid component element. ' +\n      'Instead of passing an element string, make sure to instantiate it ' +\n      'by passing it to React.createElement.'\n    );\n  });\n\n  it('throws when given a factory', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(Component);\n    }).toThrow(\n      'Invariant Violation: renderComponent(): Invalid component element. ' +\n      'Instead of passing a component class, make sure to instantiate it ' +\n      'by passing it to React.createElement.'\n    );\n  });\n\n  it('should render different components in same root', function() {\n    var container = document.createElement('container');\n    document.documentElement.appendChild(container);\n\n    ReactMount.render(React.createElement(\"div\", null), container);\n    expect(container.firstChild.nodeName).toBe('DIV');\n\n    ReactMount.render(React.createElement(\"span\", null), container);\n    expect(container.firstChild.nodeName).toBe('SPAN');\n  });\n\n  it('should unmount and remount if the key changes', function() {\n    var container = document.createElement('container');\n\n    var mockMount = mocks.getMockFunction();\n    var mockUnmount = mocks.getMockFunction();\n\n    var Component = React.createClass({displayName: \"Component\",\n      componentDidMount: mockMount,\n      componentWillUnmount: mockUnmount,\n      render: function() {\n        return React.createElement(\"span\", null, this.props.text);\n      }\n    });\n\n    expect(mockMount.mock.calls.length).toBe(0);\n    expect(mockUnmount.mock.calls.length).toBe(0);\n\n    ReactMount.render(React.createElement(Component, {text: \"orange\", key: \"A\"}), container);\n    expect(container.firstChild.innerHTML).toBe('orange');\n    expect(mockMount.mock.calls.length).toBe(1);\n    expect(mockUnmount.mock.calls.length).toBe(0);\n\n    // If we change the key, the component is unmounted and remounted\n    ReactMount.render(React.createElement(Component, {text: \"green\", key: \"B\"}), container);\n    expect(container.firstChild.innerHTML).toBe('green');\n    expect(mockMount.mock.calls.length).toBe(2);\n    expect(mockUnmount.mock.calls.length).toBe(1);\n\n    // But if we don't change the key, the component instance is reused\n    ReactMount.render(React.createElement(Component, {text: \"blue\", key: \"B\"}), container);\n    expect(container.firstChild.innerHTML).toBe('blue');\n    expect(mockMount.mock.calls.length).toBe(2);\n    expect(mockUnmount.mock.calls.length).toBe(1);\n  });\n\n  it('should reuse markup if rendering to the same target twice', function() {\n    var container = document.createElement('container');\n    var instance1 = React.render(React.createElement(\"div\", null), container);\n    var instance2 = React.render(React.createElement(\"div\", null), container);\n\n    expect(instance1 === instance2).toBe(true);\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactMount-test\", module);\n",
"browser/ui/__tests__/ReactMountDestruction-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../../React\");\n\ndescribe('ReactMount', function() {\n  it(\"should destroy a react root upon request\", function() {\n    var mainContainerDiv = document.createElement('div');\n    document.documentElement.appendChild(mainContainerDiv);\n\n    var instanceOne = (\n      React.createElement(\"div\", {className: \"firstReactDiv\"}\n      )\n    );\n    var firstRootDiv = document.createElement('div');\n    mainContainerDiv.appendChild(firstRootDiv);\n    React.render(instanceOne, firstRootDiv);\n\n    var instanceTwo = (\n      React.createElement(\"div\", {className: \"secondReactDiv\"}\n      )\n    );\n    var secondRootDiv = document.createElement('div');\n    mainContainerDiv.appendChild(secondRootDiv);\n    React.render(instanceTwo, secondRootDiv);\n\n    // Test that two react roots are rendered in isolation\n    expect(firstRootDiv.firstChild.className).toBe('firstReactDiv');\n    expect(secondRootDiv.firstChild.className).toBe('secondReactDiv');\n\n    // Test that after unmounting each, they are no longer in the document.\n    React.unmountComponentAtNode(firstRootDiv);\n    expect(firstRootDiv.firstChild).toBeNull();\n    React.unmountComponentAtNode(secondRootDiv);\n    expect(secondRootDiv.firstChild).toBeNull();\n  });\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactMountDestruction-test\", module);\n",
"browser/ui/__tests__/ReactRenderDocument-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar React;\nvar ReactMount;\n\nvar getTestDocument;\n\nvar testDocument;\n\nvar UNMOUNT_INVARIANT_MESSAGE =\n  'Invariant Violation: ReactFullPageComponenthtml tried to unmount. ' +\n  'Because of cross-browser quirks it is impossible to unmount some ' +\n  'top-level components (eg <html>, <head>, and <body>) reliably and ' +\n  'efficiently. To fix this, have a single top-level component that ' +\n  'never unmounts render these elements.';\n\ndescribe('rendering React components at document', function() {\n  beforeEach(function() {\n    require(\"../../../mock-modules\").dumpCache();\n\n    React = require(\"../../../React\");\n    ReactMount = require(\"../../../ReactMount\");\n    getTestDocument = require(\"../../../getTestDocument\");\n\n    testDocument = getTestDocument();\n  });\n\n  it('should be able to get root component id for document node', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var Root = React.createClass({displayName: \"Root\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              \"Hello world\"\n            )\n          )\n        );\n      }\n    });\n\n    var markup = React.renderToString(React.createElement(Root, null));\n    testDocument = getTestDocument(markup);\n    var component = React.render(React.createElement(Root, null), testDocument);\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n\n    var componentID = ReactMount.getReactRootID(testDocument);\n    expect(componentID).toBe(component._rootNodeID);\n  });\n\n  it('should not be able to unmount component from document node', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var Root = React.createClass({displayName: \"Root\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              \"Hello world\"\n            )\n          )\n        );\n      }\n    });\n\n    var markup = React.renderToString(React.createElement(Root, null));\n    testDocument = getTestDocument(markup);\n    React.render(React.createElement(Root, null), testDocument);\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n\n    expect(function() {\n      React.unmountComponentAtNode(testDocument);\n    }).toThrow(UNMOUNT_INVARIANT_MESSAGE);\n\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n  });\n\n  it('should not be able to switch root constructors', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              \"Hello world\"\n            )\n          )\n        );\n      }\n    });\n\n    var Component2 = React.createClass({displayName: \"Component2\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              \"Goodbye world\"\n            )\n          )\n        );\n      }\n    });\n\n    var markup = React.renderToString(React.createElement(Component, null));\n    testDocument = getTestDocument(markup);\n\n    React.render(React.createElement(Component, null), testDocument);\n\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n\n    // Reactive update\n    expect(function() {\n      React.render(React.createElement(Component2, null), testDocument);\n    }).toThrow(UNMOUNT_INVARIANT_MESSAGE);\n\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n  });\n\n  it('should be able to mount into document', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              this.props.text\n            )\n          )\n        );\n      }\n    });\n\n    var markup = React.renderToString(\n      React.createElement(Component, {text: \"Hello world\"})\n    );\n    testDocument = getTestDocument(markup);\n\n    React.render(React.createElement(Component, {text: \"Hello world\"}), testDocument);\n\n    expect(testDocument.body.innerHTML).toBe('Hello world');\n  });\n\n  it('should give helpful errors on state desync', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              this.props.text\n            )\n          )\n        );\n      }\n    });\n\n    var markup = React.renderToString(\n      React.createElement(Component, {text: \"Goodbye world\"})\n    );\n    testDocument = getTestDocument(markup);\n\n    expect(function() {\n      // Notice the text is different!\n      React.render(React.createElement(Component, {text: \"Hello world\"}), testDocument);\n    }).toThrow(\n      'Invariant Violation: ' +\n      'You\\'re trying to render a component to the document using ' +\n      'server rendering but the checksum was invalid. This usually ' +\n      'means you rendered a different component type or props on ' +\n      'the client from the one on the server, or your render() methods ' +\n      'are impure. React cannot handle this case due to cross-browser ' +\n      'quirks by rendering at the document root. You should look for ' +\n      'environment dependent code in your components and ensure ' +\n      'the props are the same client and server side.'\n    );\n  });\n\n  it('should throw on full document render w/ no markup', function() {\n    expect(testDocument).not.toBeUndefined();\n\n    var container = testDocument;\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return (\n          React.createElement(\"html\", null, \n            React.createElement(\"head\", null, \n              React.createElement(\"title\", null, \"Hello World\")\n            ), \n            React.createElement(\"body\", null, \n              this.props.text\n            )\n          )\n        );\n      }\n    });\n\n    expect(function() {\n      React.render(React.createElement(Component, null), container);\n    }).toThrow(\n      'Invariant Violation: You\\'re trying to render a component to the ' +\n      'document but you didn\\'t use server rendering. We can\\'t do this ' +\n      'without using server rendering due to cross-browser quirks. See ' +\n      'renderComponentToString() for server rendering.'\n    );\n  });\n\n});\n\nrequire(\"../../../mock-modules\").register(\"browser/ui/__tests__/ReactRenderDocument-test\", module);\n",
"browser/ui/dom/__tests__/CSSProperty-test":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\ndescribe('CSSProperty', function() {\n  var CSSProperty;\n\n  beforeEach(function() {\n    require(\"../../../../mock-modules\").dumpCache();\n    CSSProperty = require(\"../../../../CSSProperty\");\n  });\n\n  it('should generate browser prefixes for its `isUnitlessNumber`', function() {\n    expect(CSSProperty.isUnitlessNumber.lineClamp).toBeTruthy();\n    expect(CSSProperty.isUnitlessNumber.WebkitLineClamp).toBeTruthy();\n    expect(CSSProperty.isUnitlessNumber.msFlexGrow).toBeTruthy();\n    expect(CSSProperty.isUnitlessNumber.MozFlexGrow).toBeTruthy();\n  });\n\n});\n\nrequire(\"../../../../mock-modules\").register(\"browser/ui/dom/__tests__/CSSProperty-test\", module);\n",
"browser/ui/dom/__tests__/CSSPropertyOperations-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar React = require(\"../../../../React\");\n\ndescribe('CSSPropertyOperations', function() {\n  var CSSPropertyOperations;\n\n  beforeEach(function() {\n    require(\"../../../../mock-modules\").dumpCache();\n    CSSPropertyOperations = require(\"../../../../CSSPropertyOperations\");\n  });\n\n  it('should create markup for simple styles', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      backgroundColor: '#3b5998',\n      display: 'none'\n    })).toBe('background-color:#3b5998;display:none;');\n  });\n\n  it('should ignore undefined styles', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      backgroundColor: undefined,\n      display: 'none'\n    })).toBe('display:none;');\n  });\n\n  it('should ignore null styles', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      backgroundColor: null,\n      display: 'none'\n    })).toBe('display:none;');\n  });\n\n  it('should return null for no styles', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      backgroundColor: null,\n      display: null\n    })).toBe(null);\n  });\n\n  it('should automatically append `px` to relevant styles', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      left: 0,\n      margin: 16,\n      opacity: 0.5,\n      padding: '4px'\n    })).toBe('left:0;margin:16px;opacity:0.5;padding:4px;');\n  });\n\n  it('should trim values so `px` will be appended correctly', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      margin: '16 ',\n      opacity: 0.5,\n      padding: ' 4 '\n    })).toBe('margin:16px;opacity:0.5;padding:4px;');\n  });\n\n  it('should not append `px` to styles that might need a number', function() {\n    var CSSProperty = require(\"../../../../CSSProperty\");\n    var unitlessProperties = Object.keys(CSSProperty.isUnitlessNumber);\n    unitlessProperties.forEach(function(property) {\n      var styles = {};\n      styles[property] = 1;\n      expect(CSSPropertyOperations.createMarkupForStyles(styles))\n        .toMatch(/:1;$/);\n    });\n  });\n\n  it('should create vendor-prefixed markup correctly', function() {\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      msTransition: 'none',\n      MozTransition: 'none'\n    })).toBe('-ms-transition:none;-moz-transition:none;');\n  });\n\n  it('should set style attribute when styles exist', function() {\n    var styles = {\n      backgroundColor: '#000',\n      display: 'none'\n    };\n    var div = React.createElement(\"div\", {style: styles});\n    var root = document.createElement('div');\n    div = React.render(div, root);\n    expect(/style=\".*\"/.test(root.innerHTML)).toBe(true);\n  });\n\n  it('should not set style attribute when no styles exist', function() {\n    var styles = {\n      backgroundColor: null,\n      display: null\n    };\n    var div = React.createElement(\"div\", {style: styles});\n    var root = document.createElement('div');\n    React.render(div, root);\n    expect(/style=\".*\"/.test(root.innerHTML)).toBe(false);\n  });\n\n  it('should warn when using hyphenated style names', function() {\n    spyOn(console, 'warn');\n\n    expect(CSSPropertyOperations.createMarkupForStyles({\n      'background-color': 'crimson'\n    })).toBe('background-color:crimson;');\n\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain('backgroundColor');\n  });\n\n  it('should warn when updating hyphenated style names', function() {\n    spyOn(console, 'warn');\n\n    var root = document.createElement('div');\n    var styles = {\n      '-ms-transform': 'translate3d(0, 0, 0)',\n      '-webkit-transform': 'translate3d(0, 0, 0)'\n    };\n\n    React.render(React.createElement(\"div\", null), root);\n    React.render(React.createElement(\"div\", {style: styles}), root);\n\n    expect(console.warn.argsForCall.length).toBe(2);\n    expect(console.warn.argsForCall[0][0]).toContain('msTransform');\n    expect(console.warn.argsForCall[1][0]).toContain('WebkitTransform');\n  });\n\n});\n\nrequire(\"../../../../mock-modules\").register(\"browser/ui/dom/__tests__/CSSPropertyOperations-test\", module);\n",
"browser/ui/dom/__tests__/DOMPropertyOperations-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('DOMPropertyOperations', function() {\n  var DOMPropertyOperations;\n  var DOMProperty;\n\n  var mocks;\n\n  beforeEach(function() {\n    require(\"../../../../mock-modules\").dumpCache();\n    var ReactDefaultInjection = require(\"../../../../ReactDefaultInjection\");\n    ReactDefaultInjection.inject();\n\n    DOMPropertyOperations = require(\"../../../../DOMPropertyOperations\");\n    DOMProperty = require(\"../../../../DOMProperty\");\n\n    mocks = require(\"../../../../mocks\");\n  });\n\n  describe('createMarkupForProperty', function() {\n\n    it('should create markup for simple properties', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'name',\n        'simple'\n      )).toBe('name=\"simple\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'name',\n        false\n      )).toBe('name=\"false\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'name',\n        null\n      )).toBe('');\n    });\n\n    it('should work with the id attribute', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'id',\n        'simple'\n      )).toBe('id=\"simple\"');\n    });\n\n    it('should warn about incorrect casing', function() {\n      spyOn(console, 'warn');\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'tabindex',\n        '1'\n      )).toBe(null);\n      expect(console.warn.argsForCall.length).toBe(1);\n      expect(console.warn.argsForCall[0][0]).toContain('tabIndex');\n    });\n\n    it('should warn about class', function() {\n      spyOn(console, 'warn');\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'class',\n        'muffins'\n      )).toBe(null);\n      expect(console.warn.argsForCall.length).toBe(1);\n      expect(console.warn.argsForCall[0][0]).toContain('className');\n    });\n\n    it('should create markup for boolean properties', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'checked',\n        'simple'\n      )).toBe('checked');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'checked',\n        true\n      )).toBe('checked');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'checked',\n        false\n      )).toBe('');\n    });\n\n    it('should create markup for booleanish properties', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        'simple'\n      )).toBe('download=\"simple\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        true\n      )).toBe('download');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        'true'\n      )).toBe('download=\"true\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        false\n      )).toBe('');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        'false'\n      )).toBe('download=\"false\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        undefined\n      )).toBe('');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        null\n      )).toBe('');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'download',\n        0\n      )).toBe('download=\"0\"');\n    });\n\n    it('should create markup for custom attributes', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'aria-label',\n        'simple'\n      )).toBe('aria-label=\"simple\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'aria-label',\n        false\n      )).toBe('aria-label=\"false\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'aria-label',\n        null\n      )).toBe('');\n    });\n\n    it('should create markup for numeric properties', function() {\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'start',\n        5\n      )).toBe('start=\"5\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'start',\n        0\n      )).toBe('start=\"0\"');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'size',\n        0\n      )).toBe('');\n\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'size',\n        1\n      )).toBe('size=\"1\"');\n    });\n\n  });\n\n  describe('setValueForProperty', function() {\n    var stubNode;\n\n    beforeEach(function() {\n      stubNode = document.createElement('div');\n    });\n\n    it('should set values as properties by default', function() {\n      DOMPropertyOperations.setValueForProperty(stubNode, 'title', 'Tip!');\n      expect(stubNode.title).toBe('Tip!');\n    });\n\n    it('should set values as attributes if necessary', function() {\n      DOMPropertyOperations.setValueForProperty(stubNode, 'role', '#');\n      expect(stubNode.getAttribute('role')).toBe('#');\n      expect(stubNode.role).toBeUndefined();\n    });\n\n    it('should convert attribute values to string first', function() {\n      // Browsers default to this behavior, but some test environments do not.\n      // This ensures that we have consistent behavior.\n      var obj = {toString: function() { return '<html>'; }};\n      DOMPropertyOperations.setValueForProperty(stubNode, 'role', obj);\n      expect(stubNode.getAttribute('role')).toBe('<html>');\n    });\n\n    it('should remove for falsey boolean properties', function() {\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'allowFullScreen',\n        false\n      );\n      expect(stubNode.hasAttribute('allowFullScreen')).toBe(false);\n    });\n\n    it('should remove when setting custom attr to null', function() {\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'data-foo',\n        'bar'\n      );\n      expect(stubNode.hasAttribute('data-foo')).toBe(true);\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'data-foo',\n        null\n      );\n      expect(stubNode.hasAttribute('data-foo')).toBe(false);\n    });\n\n    it('should use mutation method where applicable', function() {\n      var foobarSetter = mocks.getMockFunction();\n      // inject foobar DOM property\n      DOMProperty.injection.injectDOMPropertyConfig({\n        Properties: {foobar: null},\n        DOMMutationMethods: {\n          foobar: foobarSetter\n        }\n      });\n\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'foobar',\n        'cows say moo'\n      );\n\n      expect(foobarSetter.mock.calls.length).toBe(1);\n      expect(foobarSetter.mock.calls[0][0]).toBe(stubNode);\n      expect(foobarSetter.mock.calls[0][1]).toBe('cows say moo');\n    });\n\n    it('should set className to empty string instead of null', function() {\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'className',\n        'selected'\n      );\n      expect(stubNode.className).toBe('selected');\n\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'className',\n        null\n      );\n      // className should be '', not 'null' or null (which becomes 'null' in\n      // some browsers)\n      expect(stubNode.className).toBe('');\n    });\n\n    it('should remove property properly even with different name', function() {\n      // Suppose 'foobar' is a property that corresponds to the underlying\n      // 'className' property:\n      DOMProperty.injection.injectDOMPropertyConfig({\n        Properties: {foobar: DOMProperty.injection.MUST_USE_PROPERTY},\n        DOMPropertyNames: {\n          foobar: 'className'\n        }\n      });\n\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'foobar',\n        'selected'\n      );\n      expect(stubNode.className).toBe('selected');\n\n      DOMPropertyOperations.setValueForProperty(\n        stubNode,\n        'foobar',\n        null\n      );\n      // className should be '', not 'null' or null (which becomes 'null' in\n      // some browsers)\n      expect(stubNode.className).toBe('');\n    });\n\n  });\n\n  describe('injectDOMPropertyConfig', function() {\n    it('should support custom attributes', function() {\n      // foobar does not exist yet\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'foobar',\n        'simple'\n      )).toBe(null);\n\n      // foo-* does not exist yet\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'foo-xyz',\n        'simple'\n      )).toBe(null);\n\n      // inject foobar DOM property\n      DOMProperty.injection.injectDOMPropertyConfig({\n        isCustomAttribute: function(name) {\n          return name.indexOf('foo-') === 0;\n        },\n        Properties: {foobar: null}\n      });\n\n      // Ensure old attributes still work\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'name',\n        'simple'\n      )).toBe('name=\"simple\"');\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'data-name',\n        'simple'\n      )).toBe('data-name=\"simple\"');\n\n      // foobar should work\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'foobar',\n        'simple'\n      )).toBe('foobar=\"simple\"');\n\n      // foo-* should work\n      expect(DOMPropertyOperations.createMarkupForProperty(\n        'foo-xyz',\n        'simple'\n      )).toBe('foo-xyz=\"simple\"');\n\n      // It should complain about double injections.\n      expect(function() {\n        DOMProperty.injection.injectDOMPropertyConfig(\n          {Properties: {foobar: null}}\n        );\n      }).toThrow();\n    });\n  });\n});\n\nrequire(\"../../../../mock-modules\").register(\"browser/ui/dom/__tests__/DOMPropertyOperations-test\", module);\n",
"browser/ui/dom/__tests__/Danger-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n/*jslint evil: true */\n\n\"use strict\";\n\nvar React = require(\"../../../../React\");\nvar instantiateReactComponent = require(\"../../../../instantiateReactComponent\");\n\ndescribe('Danger', function() {\n\n  describe('dangerouslyRenderMarkup', function() {\n    var Danger;\n    var transaction;\n\n    beforeEach(function() {\n      require(\"../../../../mock-modules\").dumpCache();\n      Danger = require(\"../../../../Danger\");\n\n      var ReactReconcileTransaction = require(\"../../../../ReactReconcileTransaction\");\n      transaction = new ReactReconcileTransaction();\n    });\n\n    it('should render markup', function() {\n      var markup = instantiateReactComponent(\n        React.createElement(\"div\", null)\n      ).mountComponent('.rX', transaction, 0);\n      var output = Danger.dangerouslyRenderMarkup([markup])[0];\n\n      expect(output.nodeName).toBe('DIV');\n    });\n\n    it('should render markup with props', function() {\n      var markup = instantiateReactComponent(\n        React.createElement(\"div\", {className: \"foo\"})\n      ).mountComponent(\n        '.rX',\n        transaction,\n        0\n      );\n      var output = Danger.dangerouslyRenderMarkup([markup])[0];\n\n      expect(output.nodeName).toBe('DIV');\n      expect(output.className).toBe('foo');\n    });\n\n    it('should render wrapped markup', function() {\n      var markup = instantiateReactComponent(\n        React.createElement(\"th\", null)\n      ).mountComponent('.rX', transaction, 0);\n      var output = Danger.dangerouslyRenderMarkup([markup])[0];\n\n      expect(output.nodeName).toBe('TH');\n    });\n\n    it('should render lists of markup with similar `nodeName`', function() {\n      var renderedMarkup = Danger.dangerouslyRenderMarkup(\n        ['<p id=\"A\">1</p>', '<p id=\"B\">2</p>', '<p id=\"C\">3</p>']\n      );\n\n      expect(renderedMarkup.length).toBe(3);\n\n      expect(renderedMarkup[0].nodeName).toBe('P');\n      expect(renderedMarkup[1].nodeName).toBe('P');\n      expect(renderedMarkup[2].nodeName).toBe('P');\n\n      expect(renderedMarkup[0].innerHTML).toBe('1');\n      expect(renderedMarkup[1].innerHTML).toBe('2');\n      expect(renderedMarkup[2].innerHTML).toBe('3');\n    });\n\n    it('should render lists of markup with different `nodeName`', function() {\n      var renderedMarkup = Danger.dangerouslyRenderMarkup(\n        ['<p id=\"A\">1</p>', '<td id=\"B\">2</td>', '<p id=\"C\">3</p>']\n      );\n\n      expect(renderedMarkup.length).toBe(3);\n\n      expect(renderedMarkup[0].nodeName).toBe('P');\n      expect(renderedMarkup[1].nodeName).toBe('TD');\n      expect(renderedMarkup[2].nodeName).toBe('P');\n\n      expect(renderedMarkup[0].innerHTML).toBe('1');\n      expect(renderedMarkup[1].innerHTML).toBe('2');\n      expect(renderedMarkup[2].innerHTML).toBe('3');\n    });\n\n    it('should throw when rendering invalid markup', function() {\n      expect(function() {\n        Danger.dangerouslyRenderMarkup(['']);\n      }).toThrow(\n        'Invariant Violation: dangerouslyRenderMarkup(...): Missing markup.'\n      );\n\n      spyOn(console, \"error\");\n\n      var renderedMarkup = Danger.dangerouslyRenderMarkup(['<p></p><p></p>']);\n      var args = console.error.argsForCall[0];\n\n      expect(renderedMarkup.length).toBe(1);\n      expect(renderedMarkup[0].nodeName).toBe('P');\n\n      expect(console.error.argsForCall.length).toBe(1);\n\n      expect(args.length).toBe(2);\n      expect(args[0]).toBe('Danger: Discarding unexpected node:');\n      expect(args[1].nodeName).toBe('P');\n    });\n  });\n\n});\n\nrequire(\"../../../../mock-modules\").register(\"browser/ui/dom/__tests__/Danger-test\", module);\n",
"browser/ui/dom/__tests__/getNodeForCharacterOffset-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar getTestDocument = require(\"../../../../getTestDocument\");\n\nvar getNodeForCharacterOffset = require(\"../../../../getNodeForCharacterOffset\");\n\n// Create node from HTML string\nfunction createNode(html) {\n  var node = (getTestDocument() || document).createElement('div');\n  node.innerHTML = html;\n  return node;\n}\n\n// Check getNodeForCharacterOffset return value matches expected result.\nfunction expectNodeOffset(result, textContent, nodeOffset) {\n  expect(result.node.textContent).toBe(textContent);\n  expect(result.offset).toBe(nodeOffset);\n}\n\ndescribe('getNodeForCharacterOffset', function() {\n  it('should handle siblings', function() {\n    var node = createNode('<i>123</i><i>456</i><i>789</i>');\n\n    expectNodeOffset(getNodeForCharacterOffset(node, 0), '123', 0);\n    expectNodeOffset(getNodeForCharacterOffset(node, 4), '456', 1);\n  });\n\n  it('should handle trailing chars', function() {\n    var node = createNode('<i>123</i><i>456</i><i>789</i>');\n\n    expectNodeOffset(getNodeForCharacterOffset(node, 3), '123', 3);\n    expectNodeOffset(getNodeForCharacterOffset(node, 9), '789', 3);\n  });\n\n  it('should handle trees', function() {\n    var node = createNode(\n      '<i>' +\n        '<i>1</i>' +\n        '<i>' +\n          '<i>' +\n            '<i>2</i>' +\n            '<i></i>' +\n          '</i>' +\n        '</i>' +\n        '<i>' +\n          '3' +\n          '<i>45</i>' +\n        '</i>' +\n      '</i>'\n    );\n\n    expectNodeOffset(getNodeForCharacterOffset(node, 3), '3', 1);\n    expectNodeOffset(getNodeForCharacterOffset(node, 5), '45', 2);\n    expect(getNodeForCharacterOffset(node, 10)).toBeUndefined();\n  });\n\n  it('should handle non-existent offset', function() {\n    var node = createNode('<i>123</i>');\n\n    expect(getNodeForCharacterOffset(node, -1)).toBeUndefined();\n    expect(getNodeForCharacterOffset(node, 4)).toBeUndefined();\n  });\n});\n\nrequire(\"../../../../mock-modules\").register(\"browser/ui/dom/__tests__/getNodeForCharacterOffset-test\", module);\n",
"browser/ui/dom/components/__tests__/ReactDOMButton-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\n/*jshint evil:true */\n\nvar mocks = require(\"../../../../../mocks\");\n\ndescribe('ReactDOMButton', function() {\n  var React;\n  var ReactTestUtils;\n\n  var onClick = mocks.getMockFunction();\n\n  function expectClickThru(button) {\n    onClick.mockClear();\n    ReactTestUtils.Simulate.click(button.getDOMNode());\n    expect(onClick.mock.calls.length).toBe(1);\n  }\n\n  function expectNoClickThru(button) {\n    onClick.mockClear();\n    ReactTestUtils.Simulate.click(button.getDOMNode());\n    expect(onClick.mock.calls.length).toBe(0);\n  }\n\n  function mounted(button) {\n    button = ReactTestUtils.renderIntoDocument(button);\n    return button;\n  }\n\n  beforeEach(function() {\n    React = require(\"../../../../../React\");\n    ReactTestUtils = require(\"../../../../../ReactTestUtils\");\n  });\n\n  it('should forward clicks when it starts out not disabled', function() {\n    expectClickThru(mounted(React.createElement(\"button\", {onClick: onClick})));\n  });\n\n  it('should not forward clicks when it starts out disabled', function() {\n    expectNoClickThru(\n      mounted(React.createElement(\"button\", {disabled: true, onClick: onClick}))\n    );\n  });\n\n  it('should forward clicks when it becomes not disabled', function() {\n    var btn = mounted(React.createElement(\"button\", {disabled: true, onClick: onClick}));\n    btn.setProps({disabled: false});\n    expectClickThru(btn);\n  });\n\n  it('should not forward clicks when it becomes disabled', function() {\n    var btn = mounted(React.createElement(\"button\", {onClick: onClick}));\n    btn.setProps({disabled: true});\n    expectNoClickThru(btn);\n  });\n\n  it('should work correctly if the listener is changed', function() {\n    var btn = mounted(\n      React.createElement(\"button\", {disabled: true, onClick: function() {}})\n    );\n\n    btn.setProps({\n      disabled: false,\n      onClick: onClick\n    });\n\n    expectClickThru(btn);\n  });\n});\n\nrequire(\"../../../../../mock-modules\").register(\"browser/ui/dom/components/__tests__/ReactDOMButton-test\", module);\n",
"browser/ui/dom/components/__tests__/ReactDOMInput-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\n/*jshint evil:true */\n\nvar emptyFunction = require(\"../../../../../emptyFunction\");\nvar mocks = require(\"../../../../../mocks\");\n\ndescribe('ReactDOMInput', function() {\n  var React;\n  var ReactLink;\n  var ReactTestUtils;\n\n  beforeEach(function() {\n    React = require(\"../../../../../React\");\n    ReactLink = require(\"../../../../../ReactLink\");\n    ReactTestUtils = require(\"../../../../../ReactTestUtils\");\n  });\n\n  it('should display `defaultValue` of number 0', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", defaultValue: 0});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('0');\n  });\n\n  it('should display \"true\" for `defaultValue` of `true`', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", defaultValue: true});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('true');\n  });\n\n  it('should display \"false\" for `defaultValue` of `false`', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", defaultValue: false});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('false');\n  });\n\n  it('should display \"foobar\" for `defaultValue` of `objToString`', function() {\n    var objToString = {\n      toString: function() {\n        return \"foobar\";\n      }\n    };\n\n    var stub = React.createElement(\"input\", {type: \"text\", defaultValue: objToString});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('foobar');\n  });\n\n  it('should display `value` of number 0', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", value: 0});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('0');\n  });\n\n  it('should allow setting `value` to `true`', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", value: \"yolo\", onChange: emptyFunction});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('yolo');\n\n    stub.replaceProps({value: true, onChange: emptyFunction});\n    expect(node.value).toEqual('true');\n  });\n\n  it(\"should allow setting `value` to `false`\", function() {\n    var stub = React.createElement(\"input\", {type: \"text\", value: \"yolo\", onChange: emptyFunction});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('yolo');\n\n    stub.replaceProps({value: false});\n    expect(node.value).toEqual('false');\n  });\n\n  it('should allow setting `value` to `objToString`', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", value: \"foo\", onChange: emptyFunction});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('foo');\n\n    var objToString = {\n      toString: function() {\n        return \"foobar\";\n      }\n    };\n\n    stub.replaceProps({value: objToString, onChange: emptyFunction});\n    expect(node.value).toEqual('foobar');\n  });\n\n  it('should properly control a value of number `0`', function() {\n    var stub = React.createElement(\"input\", {type: \"text\", value: 0, onChange: emptyFunction});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    node.value = 'giraffe';\n    ReactTestUtils.Simulate.change(node);\n    expect(node.value).toBe('0');\n  });\n\n  it('should not set a value for submit buttons unnecessarily', function() {\n    var stub = React.createElement(\"input\", {type: \"submit\"});\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    // The value shouldn't be '', or else the button will have no text; it\n    // should have the default \"Submit\" or \"Submit Query\" label. Most browsers\n    // report this as not having a `value` attribute at all; IE reports it as\n    // the actual label that the user sees.\n    expect(\n      !node.hasAttribute('value') || node.getAttribute('value').length > 0\n    ).toBe(true);\n  });\n\n  it('should control radio buttons', function() {\n    var RadioGroup = React.createClass({displayName: \"RadioGroup\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            React.createElement(\"input\", {\n              ref: \"a\", \n              type: \"radio\", \n              name: \"fruit\", \n              checked: true, \n              onChange: emptyFunction}\n            ), \"A\", \n            React.createElement(\"input\", {\n              ref: \"b\", \n              type: \"radio\", \n              name: \"fruit\", \n              onChange: emptyFunction}\n            ), \"B\", \n\n            React.createElement(\"form\", null, \n              React.createElement(\"input\", {\n                ref: \"c\", \n                type: \"radio\", \n                name: \"fruit\", \n                defaultChecked: true, \n                onChange: emptyFunction}\n              )\n            )\n          )\n        );\n      }\n    });\n\n    var stub = ReactTestUtils.renderIntoDocument(React.createElement(RadioGroup, null));\n    var aNode = stub.refs.a.getDOMNode();\n    var bNode = stub.refs.b.getDOMNode();\n    var cNode = stub.refs.c.getDOMNode();\n\n    expect(aNode.checked).toBe(true);\n    expect(bNode.checked).toBe(false);\n    // c is in a separate form and shouldn't be affected at all here\n    expect(cNode.checked).toBe(true);\n\n    bNode.checked = true;\n    // This next line isn't necessary in a proper browser environment, but\n    // jsdom doesn't uncheck the others in a group (which makes this whole test\n    // a little less effective)\n    aNode.checked = false;\n    expect(cNode.checked).toBe(true);\n\n    // Now let's run the actual ReactDOMInput change event handler\n    ReactTestUtils.Simulate.change(bNode);\n\n    // The original state should have been restored\n    expect(aNode.checked).toBe(true);\n    expect(cNode.checked).toBe(true);\n  });\n\n  it('should support ReactLink', function() {\n    var container = document.createElement('div');\n    var link = new ReactLink('yolo', mocks.getMockFunction());\n    var instance = React.createElement(\"input\", {type: \"text\", valueLink: link});\n\n    instance = React.render(instance, container);\n\n    expect(instance.getDOMNode().value).toBe('yolo');\n    expect(link.value).toBe('yolo');\n    expect(link.requestChange.mock.calls.length).toBe(0);\n\n    instance.getDOMNode().value = 'test';\n    ReactTestUtils.Simulate.change(instance.getDOMNode());\n\n    expect(link.requestChange.mock.calls.length).toBe(1);\n    expect(link.requestChange.mock.calls[0][0]).toEqual('test');\n  });\n\n  it('should warn with value and no onChange handler', function() {\n    var oldWarn = console.warn;\n    try {\n      console.warn = mocks.getMockFunction();\n\n      var node = document.createElement('div');\n      var link = new ReactLink('yolo', mocks.getMockFunction());\n      React.render(React.createElement(\"input\", {type: \"text\", valueLink: link}), node);\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(\n        React.createElement(\"input\", {type: \"text\", value: \"zoink\", onChange: mocks.getMockFunction()}),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(\n        React.createElement(\"input\", {type: \"text\", value: \"zoink\", readOnly: true}),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"input\", {type: \"text\", value: \"zoink\"}), node);\n      expect(console.warn.mock.calls.length).toBe(1);\n\n      React.render(\n        React.createElement(\"input\", {type: \"text\", value: \"zoink\", readOnly: false}),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(2);\n    } finally {\n      console.warn = oldWarn;\n    }\n  });\n\n  it('should throw if both value and valueLink are provided', function() {\n    // Silences console.error messages\n    // ReactErrorUtils.guard is applied to all methods of a React component\n    // and calls console.error in __DEV__ (true for test environment)\n    spyOn(console, 'error');\n\n    var node = document.createElement('div');\n    var link = new ReactLink('yolo', mocks.getMockFunction());\n    var instance = React.createElement(\"input\", {type: \"text\", valueLink: link});\n\n    expect(React.render.bind(React, instance, node)).not.toThrow();\n\n    instance =\n      React.createElement(\"input\", {\n        type: \"text\", \n        valueLink: link, \n        value: \"test\", \n        onChange: emptyFunction}\n      );\n    expect(React.render.bind(React, instance, node)).toThrow();\n\n    instance = React.createElement(\"input\", {type: \"text\", valueLink: link, onChange: emptyFunction});\n    expect(React.render.bind(React, instance, node)).toThrow();\n\n  });\n\n  it('should support checkedLink', function() {\n    var container = document.createElement('div');\n    var link = new ReactLink(true, mocks.getMockFunction());\n    var instance = React.createElement(\"input\", {type: \"checkbox\", checkedLink: link});\n\n    instance = React.render(instance, container);\n\n    expect(instance.getDOMNode().checked).toBe(true);\n    expect(link.value).toBe(true);\n    expect(link.requestChange.mock.calls.length).toBe(0);\n\n    instance.getDOMNode().checked = false;\n    ReactTestUtils.Simulate.change(instance.getDOMNode());\n\n    expect(link.requestChange.mock.calls.length).toBe(1);\n    expect(link.requestChange.mock.calls[0][0]).toEqual(false);\n  });\n\n  it('should warn with checked and no onChange handler', function() {\n    var oldWarn = console.warn;\n    try {\n      console.warn = mocks.getMockFunction();\n\n      var node = document.createElement('div');\n      var link = new ReactLink(true, mocks.getMockFunction());\n      React.render(React.createElement(\"input\", {type: \"checkbox\", checkedLink: link}), node);\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(\n        React.createElement(\"input\", {\n          type: \"checkbox\", \n          checked: \"false\", \n          onChange: mocks.getMockFunction()}\n        ),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(\n        React.createElement(\"input\", {type: \"checkbox\", checked: \"false\", readOnly: true}),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"input\", {type: \"checkbox\", checked: \"false\"}), node);\n      expect(console.warn.mock.calls.length).toBe(1);\n\n      React.render(\n        React.createElement(\"input\", {type: \"checkbox\", checked: \"false\", readOnly: false}),\n        node\n      );\n      expect(console.warn.mock.calls.length).toBe(2);\n    } finally {\n      console.warn = oldWarn;\n    }\n  });\n\n  it('should throw if both checked and checkedLink are provided', function() {\n    // Silences console.error messages\n    // ReactErrorUtils.guard is applied to all methods of a React component\n    // and calls console.error in __DEV__ (true for test environment)\n    spyOn(console, 'error');\n\n    var node = document.createElement('div');\n    var link = new ReactLink(true, mocks.getMockFunction());\n    var instance = React.createElement(\"input\", {type: \"checkbox\", checkedLink: link});\n\n    expect(React.render.bind(React, instance, node)).not.toThrow();\n\n    instance =\n      React.createElement(\"input\", {\n        type: \"checkbox\", \n        checkedLink: link, \n        checked: \"false\", \n        onChange: emptyFunction}\n      );\n    expect(React.render.bind(React, instance, node)).toThrow();\n\n    instance =\n      React.createElement(\"input\", {type: \"checkbox\", checkedLink: link, onChange: emptyFunction});\n    expect(React.render.bind(React, instance, node)).toThrow();\n\n  });\n\n  it('should throw if both checkedLink and valueLink are provided', function() {\n    // Silences console.error messages\n    // ReactErrorUtils.guard is applied to all methods of a React component\n    // and calls console.error in __DEV__ (true for test environment)\n    spyOn(console, 'error');\n\n    var node = document.createElement('div');\n    var link = new ReactLink(true, mocks.getMockFunction());\n    var instance = React.createElement(\"input\", {type: \"checkbox\", checkedLink: link});\n\n    expect(React.render.bind(React, instance, node)).not.toThrow();\n\n    instance = React.createElement(\"input\", {type: \"checkbox\", valueLink: link});\n    expect(React.render.bind(React, instance, node)).not.toThrow();\n\n    instance =\n      React.createElement(\"input\", {type: \"checkbox\", checkedLink: link, valueLink: emptyFunction});\n    expect(React.render.bind(React, instance, node)).toThrow();\n  });\n});\n\nrequire(\"../../../../../mock-modules\").register(\"browser/ui/dom/components/__tests__/ReactDOMInput-test\", module);\n",
"browser/ui/dom/components/__tests__/ReactDOMSelect-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\n/*jshint evil:true */\n\nvar mocks = require(\"../../../../../mocks\");\n\ndescribe('ReactDOMSelect', function() {\n  var React;\n  var ReactLink;\n  var ReactTestUtils;\n\n  beforeEach(function() {\n    React = require(\"../../../../../React\");\n    ReactLink = require(\"../../../../../ReactLink\");\n    ReactTestUtils = require(\"../../../../../ReactTestUtils\");\n  });\n\n  it('should allow setting `defaultValue`', function() {\n    var stub =\n      React.createElement(\"select\", {defaultValue: \"giraffe\"}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    // Changing `defaultValue` should do nothing.\n    stub.setProps({defaultValue: 'gorilla'});\n    expect(node.value).toEqual('giraffe');\n  });\n\n  it('should not control when using `defaultValue`', function() {\n    var stub =\n      React.createElement(\"select\", {defaultValue: \"giraffe\"}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    node.value = 'monkey';\n    stub.forceUpdate();\n    // Uncontrolled selects shouldn't change the value after first mounting\n    expect(node.value).toEqual('monkey');\n  });\n\n  it('should allow setting `defaultValue` with multiple', function() {\n    var stub =\n      React.createElement(\"select\", {multiple: true, defaultValue: ['giraffe', 'gorilla']}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(true);  // gorilla\n\n    // Changing `defaultValue` should do nothing.\n    stub.setProps({defaultValue: ['monkey']});\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(true);  // gorilla\n  });\n\n  it('should allow setting `value`', function() {\n    var stub =\n      React.createElement(\"select\", {value: \"giraffe\"}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    // Changing the `value` prop should change the selected option.\n    stub.setProps({value: 'gorilla'});\n    expect(node.value).toEqual('gorilla');\n  });\n\n  it('should allow setting `value` with multiple', function() {\n    var stub =\n      React.createElement(\"select\", {multiple: true, value: ['giraffe', 'gorilla']}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(true);  // gorilla\n\n    // Changing the `value` prop should change the selected options.\n    stub.setProps({value: ['monkey']});\n\n    expect(node.options[0].selected).toBe(true);  // monkey\n    expect(node.options[1].selected).toBe(false);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n  });\n\n  it('should not select other options automatically', function() {\n    var stub =\n      React.createElement(\"select\", {multiple: true, value: ['12']}, \n        React.createElement(\"option\", {value: \"1\"}, \"one\"), \n        React.createElement(\"option\", {value: \"2\"}, \"two\"), \n        React.createElement(\"option\", {value: \"12\"}, \"twelve\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // one\n    expect(node.options[1].selected).toBe(false);  // two\n    expect(node.options[2].selected).toBe(true);  // twelve\n  });\n\n  it('should allow setting `value` with `objectToString`', function() {\n    var objectToString = {\n      animal: \"giraffe\",\n      toString: function() {\n        return this.animal;\n      }\n    };\n\n    var stub =\n      React.createElement(\"select\", {multiple: true, value: [objectToString]}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n\n    // Changing the `value` prop should change the selected options.\n    objectToString.animal = \"monkey\";\n    stub.forceUpdate();\n\n    expect(node.options[0].selected).toBe(true);  // monkey\n    expect(node.options[1].selected).toBe(false);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n  });\n\n  it('should allow switching to multiple', function() {\n    var stub =\n      React.createElement(\"select\", {defaultValue: \"giraffe\"}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n\n    // When making it multiple, giraffe should still be selected\n    stub.setProps({multiple: true, defaultValue: null});\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n  });\n\n  it('should allow switching from multiple', function() {\n    var stub =\n      React.createElement(\"select\", {multiple: true, defaultValue: ['giraffe', 'gorilla']}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(true);  // gorilla\n\n    // When removing multiple, giraffe should still be selected (but gorilla\n    // will no longer be)\n    stub.setProps({multiple: false, defaultValue: null});\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n  });\n\n  it('should support ReactLink', function() {\n    var link = new ReactLink('giraffe', mocks.getMockFunction());\n    var stub =\n      React.createElement(\"select\", {valueLink: link}, \n        React.createElement(\"option\", {value: \"monkey\"}, \"A monkey!\"), \n        React.createElement(\"option\", {value: \"giraffe\"}, \"A giraffe!\"), \n        React.createElement(\"option\", {value: \"gorilla\"}, \"A gorilla!\")\n      );\n    stub = ReactTestUtils.renderIntoDocument(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.options[0].selected).toBe(false);  // monkey\n    expect(node.options[1].selected).toBe(true);  // giraffe\n    expect(node.options[2].selected).toBe(false);  // gorilla\n    expect(link.requestChange.mock.calls.length).toBe(0);\n\n    node.options[1].selected = false;\n    node.options[2].selected = true;\n    ReactTestUtils.Simulate.change(node);\n\n    expect(link.requestChange.mock.calls.length).toBe(1);\n    expect(link.requestChange.mock.calls[0][0]).toEqual('gorilla');\n\n  });\n});\n\nrequire(\"../../../../../mock-modules\").register(\"browser/ui/dom/components/__tests__/ReactDOMSelect-test\", module);\n",
"browser/ui/dom/components/__tests__/ReactDOMTextarea-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"../../../../../emptyFunction\");\nvar mocks = require(\"../../../../../mocks\");\n\ndescribe('ReactDOMTextarea', function() {\n  var React;\n  var ReactLink;\n  var ReactTestUtils;\n\n  var renderTextarea;\n\n  beforeEach(function() {\n    React = require(\"../../../../../React\");\n    ReactLink = require(\"../../../../../ReactLink\");\n    ReactTestUtils = require(\"../../../../../ReactTestUtils\");\n\n    renderTextarea = function(component) {\n      var stub = ReactTestUtils.renderIntoDocument(component);\n      var node = stub.getDOMNode();\n      // Polyfilling the browser's quirky behavior.\n      node.value = node.innerHTML;\n      return stub;\n    };\n  });\n\n  it('should allow setting `defaultValue`', function() {\n    var stub = React.createElement(\"textarea\", {defaultValue: \"giraffe\"});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    // Changing `defaultValue` should do nothing.\n    stub.replaceProps({defaultValue: 'gorilla'});\n    expect(node.value).toEqual('giraffe');\n  });\n\n  it('should display `defaultValue` of number 0', function() {\n    var stub = React.createElement(\"textarea\", {defaultValue: 0});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('0');\n  });\n\n  it('should display \"false\" for `defaultValue` of `false`', function() {\n    var stub = React.createElement(\"textarea\", {type: \"text\", defaultValue: false});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('false');\n  });\n\n  it('should display \"foobar\" for `defaultValue` of `objToString`', function() {\n    var objToString = {\n      toString: function() {\n        return \"foobar\";\n      }\n    };\n\n    var stub = React.createElement(\"textarea\", {type: \"text\", defaultValue: objToString});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('foobar');\n  });\n\n  it('should not render value as an attribute', function() {\n    var stub = React.createElement(\"textarea\", {value: \"giraffe\", onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.getAttribute('value')).toBe(null);\n  });\n\n  it('should display `value` of number 0', function() {\n    var stub = React.createElement(\"textarea\", {value: 0});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('0');\n  });\n\n  it('should allow setting `value` to `giraffe`', function() {\n    var stub = React.createElement(\"textarea\", {value: \"giraffe\", onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    stub.replaceProps({value: 'gorilla', onChange: emptyFunction});\n    expect(node.value).toEqual('gorilla');\n  });\n\n  it('should allow setting `value` to `true`', function() {\n    var stub = React.createElement(\"textarea\", {value: \"giraffe\", onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    stub.replaceProps({value: true, onChange: emptyFunction});\n    expect(node.value).toEqual('true');\n  });\n\n  it('should allow setting `value` to `false`', function() {\n    var stub = React.createElement(\"textarea\", {value: \"giraffe\", onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    stub.replaceProps({value: false});\n    expect(node.value).toEqual('false');\n  });\n\n  it('should allow setting `value` to `objToString`', function() {\n    var stub = React.createElement(\"textarea\", {value: \"giraffe\", onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(node.value).toBe('giraffe');\n\n    var objToString = {\n      toString: function() {\n        return \"foo\";\n      }\n    };\n    stub.replaceProps({value: objToString, onChange: emptyFunction});\n    expect(node.value).toEqual('foo');\n  });\n\n  it('should properly control a value of number `0`', function() {\n    var stub = React.createElement(\"textarea\", {value: 0, onChange: emptyFunction});\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    node.value = 'giraffe';\n    ReactTestUtils.Simulate.change(node);\n    expect(node.value).toBe('0');\n  });\n\n  it('should treat children like `defaultValue`', function() {\n    spyOn(console, 'warn');\n\n    var stub = React.createElement(\"textarea\", null, \"giraffe\");\n    stub = renderTextarea(stub);\n    var node = stub.getDOMNode();\n\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(node.value).toBe('giraffe');\n\n    // Changing children should do nothing, it functions like `defaultValue`.\n    stub.replaceProps({children: 'gorilla'});\n    expect(node.value).toEqual('giraffe');\n  });\n\n  it('should allow numbers as children', function() {\n    spyOn(console, 'warn');\n    var node = renderTextarea(React.createElement(\"textarea\", null, 17)).getDOMNode();\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(node.value).toBe('17');\n  });\n\n  it('should allow booleans as children', function() {\n    spyOn(console, 'warn');\n    var node = renderTextarea(React.createElement(\"textarea\", null, false)).getDOMNode();\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(node.value).toBe('false');\n  });\n\n  it('should allow objects as children', function() {\n    spyOn(console, 'warn');\n    var obj = {\n      toString: function() {\n        return \"sharkswithlasers\";\n      }\n    };\n    var node = renderTextarea(React.createElement(\"textarea\", null, obj)).getDOMNode();\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(node.value).toBe('sharkswithlasers');\n  });\n\n  it('should throw with multiple or invalid children', function() {\n    spyOn(console, 'warn');\n\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(\n        React.createElement(\"textarea\", null, 'hello', 'there')\n      );\n    }).toThrow();\n\n    expect(console.warn.argsForCall.length).toBe(1);\n\n    var node;\n    expect(function() {\n      node = renderTextarea(React.createElement(\"textarea\", null, React.createElement(\"strong\", null))).getDOMNode();\n    }).not.toThrow();\n\n    expect(node.value).toBe('[object Object]');\n\n    expect(console.warn.argsForCall.length).toBe(2);\n  });\n\n  it('should support ReactLink', function() {\n    var container = document.createElement('div');\n    var link = new ReactLink('yolo', mocks.getMockFunction());\n    var instance = React.createElement(\"textarea\", {valueLink: link});\n\n    instance = React.render(instance, container);\n\n    expect(instance.getDOMNode().value).toBe('yolo');\n    expect(link.value).toBe('yolo');\n    expect(link.requestChange.mock.calls.length).toBe(0);\n\n    instance.getDOMNode().value = 'test';\n    ReactTestUtils.Simulate.change(instance.getDOMNode());\n\n    expect(link.requestChange.mock.calls.length).toBe(1);\n    expect(link.requestChange.mock.calls[0][0]).toEqual('test');\n  });\n});\n\nrequire(\"../../../../../mock-modules\").register(\"browser/ui/dom/components/__tests__/ReactDOMTextarea-test\", module);\n",
"core/__tests__/ReactBind-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n/*global global:true*/\n\"use strict\";\n\nvar mocks = require(\"../../mocks\");\nvar React = require(\"../../React\");\nvar ReactDoNotBindDeprecated = require(\"../../ReactDoNotBindDeprecated\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar reactComponentExpect = require(\"../../reactComponentExpect\");\n\n// TODO: Test render and all stock methods.\ndescribe('autobinding', function() {\n\n  it('Holds reference to instance', function() {\n\n    var mouseDidEnter = mocks.getMockFunction();\n    var mouseDidLeave = mocks.getMockFunction();\n    var mouseDidClick = mocks.getMockFunction();\n\n    var TestBindComponent = React.createClass({displayName: \"TestBindComponent\",\n      getInitialState: function() {\n        return {something: 'hi'};\n      },\n      onMouseEnter: ReactDoNotBindDeprecated.doNotBind(mouseDidEnter),\n      onMouseLeave: ReactDoNotBindDeprecated.doNotBind(mouseDidLeave),\n      onClick: mouseDidClick,\n\n      // auto binding only occurs on top level functions in class defs.\n      badIdeas: {\n        badBind: function() {\n          this.state.something;\n        }\n      },\n\n      render: function() {\n        return (\n          React.createElement(\"div\", {\n            onMouseOver: this.onMouseEnter.bind(this), \n            onMouseOut: this.onMouseLeave, \n            onClick: this.onClick}\n          )\n        );\n      }\n    });\n\n    var instance1 = React.createElement(TestBindComponent, null);\n    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);\n    var rendered1 = reactComponentExpect(mountedInstance1)\n      .expectRenderedChild()\n      .instance();\n\n    var instance2 = React.createElement(TestBindComponent, null);\n    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);\n    var rendered2 = reactComponentExpect(mountedInstance2)\n      .expectRenderedChild()\n      .instance();\n\n    expect(function() {\n      var badIdea = instance1.badIdeas.badBind;\n      badIdea();\n    }).toThrow();\n\n    expect(mountedInstance1.onMouseEnter).toBe(mountedInstance2.onMouseEnter);\n    expect(mountedInstance1.onMouseLeave).toBe(mountedInstance2.onMouseLeave);\n    expect(mountedInstance1.onClick).not.toBe(mountedInstance2.onClick);\n\n    ReactTestUtils.Simulate.click(rendered1);\n    expect(mouseDidClick.mock.instances.length).toBe(1);\n    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);\n\n    ReactTestUtils.Simulate.click(rendered2);\n    expect(mouseDidClick.mock.instances.length).toBe(2);\n    expect(mouseDidClick.mock.instances[1]).toBe(mountedInstance2);\n\n    ReactTestUtils.Simulate.mouseOver(rendered1);\n    expect(mouseDidEnter.mock.instances.length).toBe(1);\n    expect(mouseDidEnter.mock.instances[0]).toBe(mountedInstance1);\n\n    ReactTestUtils.Simulate.mouseOver(rendered2);\n    expect(mouseDidEnter.mock.instances.length).toBe(2);\n    expect(mouseDidEnter.mock.instances[1]).toBe(mountedInstance2);\n\n    ReactTestUtils.Simulate.mouseOut(rendered1);\n    expect(mouseDidLeave.mock.instances.length).toBe(1);\n    expect(mouseDidLeave.mock.instances[0]).toBe(global);\n\n    ReactTestUtils.Simulate.mouseOut(rendered2);\n    expect(mouseDidLeave.mock.instances.length).toBe(2);\n    expect(mouseDidLeave.mock.instances[1]).toBe(global);\n  });\n\n  it('works with mixins', function() {\n    var mouseDidClick = mocks.getMockFunction();\n\n    var TestMixin = {\n      onClick: mouseDidClick\n    };\n\n    var TestBindComponent = React.createClass({displayName: \"TestBindComponent\",\n      mixins: [TestMixin],\n\n      render: function() {\n        return React.createElement(\"div\", {onClick: this.onClick});\n      }\n    });\n\n    var instance1 = React.createElement(TestBindComponent, null);\n    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);\n    var rendered1 = reactComponentExpect(mountedInstance1)\n      .expectRenderedChild()\n      .instance();\n\n    ReactTestUtils.Simulate.click(rendered1);\n    expect(mouseDidClick.mock.instances.length).toBe(1);\n    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactBind-test\", module);\n",
"core/__tests__/ReactComponent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTestUtils;\n\nvar reactComponentExpect;\n\ndescribe('ReactComponent', function() {\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n  });\n\n  it('should throw on invalid render targets', function() {\n    var container = document.createElement('div');\n    // jQuery objects are basically arrays; people often pass them in by mistake\n    expect(function() {\n      React.render(React.createElement(\"div\", null), [container]);\n    }).toThrow(\n      'Invariant Violation: _registerComponent(...): Target container ' +\n      'is not a DOM element.'\n    );\n\n    expect(function() {\n      React.render(React.createElement(\"div\", null), null);\n    }).toThrow(\n      'Invariant Violation: _registerComponent(...): Target container ' +\n      'is not a DOM element.'\n    );\n  });\n\n  it('should throw when supplying a ref outside of render method', function() {\n    var instance = React.createElement(\"div\", {ref: \"badDiv\"});\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow();\n  });\n\n  it('should throw when attempting to hijack a ref', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        var child = this.props.child;\n        this.attachRef('test', child);\n        return child;\n      }\n    });\n\n    var childInstance = ReactTestUtils.renderIntoDocument(React.createElement(\"span\", null));\n    var instance = React.createElement(Component, {child: childInstance});\n\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow(\n      'Invariant Violation: attachRef(test, ...): Only a component\\'s owner ' +\n      'can store a ref to it.'\n    );\n  });\n\n  it('should support refs on owned components', function() {\n    var innerObj = {}, outerObj = {};\n\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n\n      getObject: function() {\n        return this.props.object;\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null, this.props.children);\n      }\n\n    });\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        var inner = React.createElement(Wrapper, {object: innerObj, ref: \"inner\"});\n        var outer = React.createElement(Wrapper, {object: outerObj, ref: \"outer\"}, inner);\n        return outer;\n      },\n      componentDidMount: function() {\n        expect(this.refs.inner.getObject()).toEqual(innerObj);\n        expect(this.refs.outer.getObject()).toEqual(outerObj);\n      }\n    });\n\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n  });\n\n  it('should not have refs on unmounted components', function() {\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return React.createElement(Child, null, React.createElement(\"div\", {ref: \"test\"}));\n      },\n      componentDidMount: function() {\n        expect(this.refs && this.refs.test).toEqual(undefined);\n      }\n    });\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.createElement(Parent, {child: React.createElement(\"span\", null)});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n  });\n\n  it('should correctly determine if a component is mounted', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      componentWillMount: function() {\n        expect(this.isMounted()).toBeFalsy();\n      },\n      componentDidMount: function() {\n        expect(this.isMounted()).toBeTruthy();\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var element = React.createElement(Component, null);\n\n    var instance = ReactTestUtils.renderIntoDocument(element);\n    expect(instance.isMounted()).toBeTruthy();\n  });\n\n  it('should know its simple mount depth', function() {\n    var Owner = React.createClass({displayName: \"Owner\",\n      render: function() {\n        return React.createElement(Child, {ref: \"child\"});\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.createElement(Owner, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance._mountDepth).toBe(0);\n    expect(instance.refs.child._mountDepth).toBe(1);\n  });\n\n  it('should know its (complicated) mount depth', function() {\n    var Box = React.createClass({displayName: \"Box\",\n      render: function() {\n        return React.createElement(\"div\", {ref: \"boxDiv\"}, this.props.children);\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return React.createElement(\"span\", {ref: \"span\"}, \"child\");\n      }\n    });\n\n    var Switcher = React.createClass({displayName: \"Switcher\",\n      getInitialState: function() {\n        return {tabKey: 'hello'};\n      },\n\n      render: function() {\n        var child = this.props.children;\n\n        return (\n          React.createElement(Box, {ref: \"box\"}, \n            React.createElement(\"div\", {\n              ref: \"switcherDiv\", \n              style: {\n                display: this.state.tabKey === child.key ? '' : 'none'\n            }}, \n              child\n            )\n          )\n        );\n      }\n    });\n\n    var App = React.createClass({displayName: \"App\",\n      render: function() {\n        return (\n          React.createElement(Switcher, {ref: \"switcher\"}, \n            React.createElement(Child, {key: \"hello\", ref: \"child\"})\n          )\n        );\n      }\n    });\n\n    var root = React.createElement(App, null);\n    root = ReactTestUtils.renderIntoDocument(root);\n\n    expect(root._mountDepth).toBe(0);\n    expect(root.refs.switcher._mountDepth).toBe(1);\n    expect(root.refs.switcher.refs.box._mountDepth).toBe(2);\n    expect(root.refs.switcher.refs.switcherDiv._mountDepth).toBe(4);\n    expect(root.refs.child._mountDepth).toBe(5);\n    expect(root.refs.switcher.refs.box.refs.boxDiv._mountDepth).toBe(3);\n    expect(root.refs.child.refs.span._mountDepth).toBe(6);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactComponent-test\", module);\n",
"core/__tests__/ReactComponentLifeCycle-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTestUtils;\nvar ReactComponent;\nvar ReactCompositeComponent;\nvar ComponentLifeCycle;\nvar CompositeComponentLifeCycle;\n\nvar clone = function(o) {\n  return JSON.parse(JSON.stringify(o));\n};\n\n\nvar GET_INIT_STATE_RETURN_VAL = {\n  hasWillMountCompleted: false,\n  hasRenderCompleted: false,\n  hasDidMountCompleted: false,\n  hasWillUnmountCompleted: false\n};\n\nvar INIT_RENDER_STATE = {\n  hasWillMountCompleted: true,\n  hasRenderCompleted: false,\n  hasDidMountCompleted: false,\n  hasWillUnmountCompleted: false\n};\n\nvar DID_MOUNT_STATE = {\n  hasWillMountCompleted: true,\n  hasRenderCompleted: true,\n  hasDidMountCompleted: false,\n  hasWillUnmountCompleted: false\n};\n\nvar NEXT_RENDER_STATE = {\n  hasWillMountCompleted: true,\n  hasRenderCompleted: true,\n  hasDidMountCompleted: true,\n  hasWillUnmountCompleted: false\n};\n\nvar WILL_UNMOUNT_STATE = {\n  hasWillMountCompleted: true,\n  hasDidMountCompleted: true,\n  hasRenderCompleted: true,\n  hasWillUnmountCompleted: false\n};\n\nvar POST_WILL_UNMOUNT_STATE = {\n  hasWillMountCompleted: true,\n  hasDidMountCompleted: true,\n  hasRenderCompleted: true,\n  hasWillUnmountCompleted: true\n};\n\n/**\n * TODO: We should make any setState calls fail in\n * `getInitialState` and `componentWillMount`. They will usually fail\n * anyways because `this._renderedComponent` is empty, however, if a component\n * is *reused*, then that won't be the case and things will appear to work in\n * some cases. Better to just block all updates in initialization.\n */\ndescribe('ReactComponentLifeCycle', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    ReactComponent = require(\"../../ReactComponent\");\n    ReactCompositeComponent = require(\"../../ReactCompositeComponent\");\n    ComponentLifeCycle = ReactComponent.LifeCycle;\n    CompositeComponentLifeCycle = ReactCompositeComponent.LifeCycle;\n  });\n\n  it('should not reuse an instance when it has been unmounted', function() {\n    var container = document.createElement('div');\n    var StatefulComponent = React.createClass({displayName: \"StatefulComponent\",\n      getInitialState: function() {\n        return { };\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", null)\n        );\n      }\n    });\n    var element = React.createElement(StatefulComponent, null);\n    var firstInstance = React.render(element, container);\n    React.unmountComponentAtNode(container);\n    var secondInstance = React.render(element, container);\n    expect(firstInstance).not.toBe(secondInstance);\n  });\n\n  /**\n   * If a state update triggers rerendering that in turn fires an onDOMReady,\n   * that second onDOMReady should not fail.\n   */\n  it('it should fire onDOMReady when already in onDOMReady', function() {\n\n    var _testJournal = [];\n\n    var Child = React.createClass({displayName: \"Child\",\n      componentDidMount: function() {\n        _testJournal.push('Child:onDOMReady');\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var SwitcherParent = React.createClass({displayName: \"SwitcherParent\",\n      getInitialState: function() {\n        _testJournal.push('SwitcherParent:getInitialState');\n        return {showHasOnDOMReadyComponent: false};\n      },\n      componentDidMount: function() {\n        _testJournal.push('SwitcherParent:onDOMReady');\n        this.switchIt();\n      },\n      switchIt: function() {\n        this.setState({showHasOnDOMReadyComponent: true});\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            this.state.showHasOnDOMReadyComponent ?\n            React.createElement(Child, null) :\n            React.createElement(\"div\", null, \" \")\n          )\n        );\n      }\n    });\n\n    var instance = React.createElement(SwitcherParent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(_testJournal).toEqual([\n      'SwitcherParent:getInitialState',\n      'SwitcherParent:onDOMReady',\n      'Child:onDOMReady'\n    ]);\n  });\n\n  // You could assign state here, but not access members of it, unless you\n  // had provided a getInitialState method.\n  it('throws when accessing state in componentWillMount', function() {\n    var StatefulComponent = React.createClass({displayName: \"StatefulComponent\",\n      componentWillMount: function() {\n        this.state.yada;\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", null)\n        );\n      }\n    });\n    var instance = React.createElement(StatefulComponent, null);\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow();\n  });\n\n  it('should allow update state inside of componentWillMount', function() {\n    var StatefulComponent = React.createClass({displayName: \"StatefulComponent\",\n      componentWillMount: function() {\n        this.setState({stateField: 'something'});\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", null)\n        );\n      }\n    });\n    var instance = React.createElement(StatefulComponent, null);\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).not.toThrow();\n  });\n\n  it('should allow update state inside of getInitialState', function() {\n    var StatefulComponent = React.createClass({displayName: \"StatefulComponent\",\n      getInitialState: function() {\n        this.setState({stateField: 'something'});\n\n        return {stateField: 'somethingelse'};\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", null)\n        );\n      }\n    });\n    var instance = React.createElement(StatefulComponent, null);\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).not.toThrow();\n\n    // The return value of getInitialState overrides anything from setState\n    expect(instance.state.stateField).toEqual('somethingelse');\n  });\n\n\n  it('should carry through each of the phases of setup', function() {\n    var LifeCycleComponent = React.createClass({displayName: \"LifeCycleComponent\",\n      getInitialState: function() {\n        this._testJournal = {};\n        var initState = {\n          hasWillMountCompleted: false,\n          hasDidMountCompleted: false,\n          hasRenderCompleted: false,\n          hasWillUnmountCompleted: false\n        };\n        this._testJournal.returnedFromGetInitialState = clone(initState);\n        this._testJournal.lifeCycleAtStartOfGetInitialState =\n          this._lifeCycleState;\n        this._testJournal.compositeLifeCycleAtStartOfGetInitialState =\n          this._compositeLifeCycleState;\n        return initState;\n      },\n\n      componentWillMount: function() {\n        this._testJournal.stateAtStartOfWillMount = clone(this.state);\n        this._testJournal.lifeCycleAtStartOfWillMount =\n          this._lifeCycleState;\n        this._testJournal.compositeLifeCycleAtStartOfWillMount =\n          this._compositeLifeCycleState;\n        this.state.hasWillMountCompleted = true;\n      },\n\n      componentDidMount: function() {\n        this._testJournal.stateAtStartOfDidMount = clone(this.state);\n        this._testJournal.lifeCycleAtStartOfDidMount =\n          this._lifeCycleState;\n        this.setState({hasDidMountCompleted: true});\n      },\n\n      render: function() {\n        var isInitialRender = !this.state.hasRenderCompleted;\n        if (isInitialRender) {\n          this._testJournal.stateInInitialRender = clone(this.state);\n          this._testJournal.lifeCycleInInitialRender = this._lifeCycleState;\n          this._testJournal.compositeLifeCycleInInitialRender =\n            this._compositeLifeCycleState;\n        } else {\n          this._testJournal.stateInLaterRender = clone(this.state);\n          this._testJournal.lifeCycleInLaterRender = this._lifeCycleState;\n        }\n        // you would *NEVER* do anything like this in real code!\n        this.state.hasRenderCompleted = true;\n        return (\n          React.createElement(\"div\", {ref: \"theDiv\"}, \n            \"I am the inner DIV\"\n          )\n        );\n      },\n\n      componentWillUnmount: function() {\n        this._testJournal.stateAtStartOfWillUnmount = clone(this.state);\n        this._testJournal.lifeCycleAtStartOfWillUnmount =\n          this._lifeCycleState;\n        this.state.hasWillUnmountCompleted = true;\n      }\n    });\n\n    // A component that is merely \"constructed\" (as in \"constructor\") but not\n    // yet initialized, or rendered.\n    //\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(LifeCycleComponent, null));\n\n    // getInitialState\n    expect(instance._testJournal.returnedFromGetInitialState).toEqual(\n      GET_INIT_STATE_RETURN_VAL\n    );\n    expect(instance._testJournal.lifeCycleAtStartOfGetInitialState)\n      .toBe(ComponentLifeCycle.MOUNTED);\n    expect(instance._testJournal.compositeLifeCycleAtStartOfGetInitialState)\n      .toBe(CompositeComponentLifeCycle.MOUNTING);\n\n    // componentWillMount\n    expect(instance._testJournal.stateAtStartOfWillMount).toEqual(\n      instance._testJournal.returnedFromGetInitialState\n    );\n    expect(instance._testJournal.lifeCycleAtStartOfWillMount)\n      .toBe(ComponentLifeCycle.MOUNTED);\n    expect(instance._testJournal.compositeLifeCycleAtStartOfWillMount)\n      .toBe(CompositeComponentLifeCycle.MOUNTING);\n\n    // componentDidMount\n    expect(instance._testJournal.stateAtStartOfDidMount)\n      .toEqual(DID_MOUNT_STATE);\n    expect(instance._testJournal.lifeCycleAtStartOfDidMount).toBe(\n      ComponentLifeCycle.MOUNTED\n    );\n\n    // render\n    expect(instance._testJournal.stateInInitialRender)\n      .toEqual(INIT_RENDER_STATE);\n    expect(instance._testJournal.lifeCycleInInitialRender).toBe(\n      ComponentLifeCycle.MOUNTED\n    );\n    expect(instance._testJournal.compositeLifeCycleInInitialRender).toBe(\n      CompositeComponentLifeCycle.MOUNTING\n    );\n\n    expect(instance._lifeCycleState).toBe(ComponentLifeCycle.MOUNTED);\n\n    // Now *update the component*\n    instance.forceUpdate();\n\n    // render 2nd time\n    expect(instance._testJournal.stateInLaterRender)\n      .toEqual(NEXT_RENDER_STATE);\n    expect(instance._testJournal.lifeCycleInLaterRender).toBe(\n      ComponentLifeCycle.MOUNTED\n    );\n\n    expect(instance._lifeCycleState).toBe(ComponentLifeCycle.MOUNTED);\n\n    // Now *unmountComponent*\n    instance.unmountComponent();\n\n    expect(instance._testJournal.stateAtStartOfWillUnmount)\n      .toEqual(WILL_UNMOUNT_STATE);\n    // componentWillUnmount called right before unmount.\n    expect(instance._testJournal.lifeCycleAtStartOfWillUnmount).toBe(\n      ComponentLifeCycle.MOUNTED\n    );\n\n    // But the current lifecycle of the component is unmounted.\n    expect(instance._lifeCycleState).toBe(ComponentLifeCycle.UNMOUNTED);\n    expect(instance.state).toEqual(POST_WILL_UNMOUNT_STATE);\n  });\n\n  it('should throw when calling setProps() on an owned component', function() {\n    /**\n     * calls setProps in an componentDidMount.\n     */\n    var PropsUpdaterInOnDOMReady = React.createClass({displayName: \"PropsUpdaterInOnDOMReady\",\n      componentDidMount: function() {\n        this.refs.theSimpleComponent.setProps({\n          valueToUseInitially: this.props.valueToUseInOnDOMReady\n        });\n      },\n      render: function() {\n        return (\n          React.createElement(\"div\", {\n            className: this.props.valueToUseInitially, \n            ref: \"theSimpleComponent\"}\n          )\n        );\n      }\n    });\n    var instance =\n      React.createElement(PropsUpdaterInOnDOMReady, {\n        valueToUseInitially: \"hello\", \n        valueToUseInOnDOMReady: \"goodbye\"}\n      );\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow(\n      'Invariant Violation: replaceProps(...): You called `setProps` or ' +\n      '`replaceProps` on a component with a parent. This is an anti-pattern ' +\n      'since props will get reactively updated when rendered. Instead, ' +\n      'change the owner\\'s `render` method to pass the correct value as ' +\n      'props to the component where it is created.'\n    );\n  });\n\n  it('should not throw when updating an auxiliary component', function() {\n    var Tooltip = React.createClass({displayName: \"Tooltip\",\n      render: function() {\n        return React.createElement(\"div\", null, this.props.children);\n      },\n      componentDidMount: function() {\n        this.container = document.createElement('div');\n        this.updateTooltip();\n      },\n      componentDidUpdate: function() {\n        this.updateTooltip();\n      },\n      updateTooltip: function() {\n        // Even though this.props.tooltip has an owner, updating it shouldn't\n        // throw here because it's mounted as a root component\n        React.render(this.props.tooltip, this.container);\n      }\n    });\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return (\n          React.createElement(Tooltip, {\n              ref: \"tooltip\", \n              tooltip: React.createElement(\"div\", null, this.props.tooltipText)}, \n            this.props.text\n          )\n        );\n      }\n    });\n\n    var container = document.createElement('div');\n    var instance = React.render(\n      React.createElement(Component, {text: \"uno\", tooltipText: \"one\"}),\n      container\n    );\n\n    // Since `instance` is a root component, we can set its props. This also\n    // makes Tooltip rerender the tooltip component, which shouldn't throw.\n    instance.setProps({text: \"dos\", tooltipText: \"two\"});\n  });\n\n  it('should not allow setProps() called on an unmounted element',\n     function() {\n    var PropsToUpdate = React.createClass({displayName: \"PropsToUpdate\",\n      render: function() {\n        return React.createElement(\"div\", {className: this.props.value, ref: \"theSimpleComponent\"});\n      }\n    });\n    var instance = React.createElement(PropsToUpdate, {value: \"hello\"});\n    expect(instance.setProps).not.toBeDefined();\n  });\n\n  it('should allow state updates in componentDidMount', function() {\n    /**\n     * calls setState in an componentDidMount.\n     */\n    var SetStateInComponentDidMount = React.createClass({displayName: \"SetStateInComponentDidMount\",\n      getInitialState: function() {\n        return {\n          stateField: this.props.valueToUseInitially\n        };\n      },\n      componentDidMount: function() {\n        this.setState({stateField: this.props.valueToUseInOnDOMReady});\n      },\n      render: function() {\n        return (React.createElement(\"div\", null));\n      }\n    });\n    var instance =\n      React.createElement(SetStateInComponentDidMount, {\n        valueToUseInitially: \"hello\", \n        valueToUseInOnDOMReady: \"goodbye\"}\n      );\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state.stateField).toBe('goodbye');\n  });\n\n  it('should call nested lifecycle methods in the right order', function() {\n    var log;\n    var logger = function(msg) {\n      return function() {\n        // return true for shouldComponentUpdate\n        log.push(msg);\n        return true;\n      };\n    };\n    var Outer = React.createClass({displayName: \"Outer\",\n      render: function() {\n        return React.createElement(\"div\", null, React.createElement(Inner, {x: this.props.x}));\n      },\n      componentWillMount: logger('outer componentWillMount'),\n      componentDidMount: logger('outer componentDidMount'),\n      componentWillReceiveProps: logger('outer componentWillReceiveProps'),\n      shouldComponentUpdate: logger('outer shouldComponentUpdate'),\n      componentWillUpdate: logger('outer componentWillUpdate'),\n      componentDidUpdate: logger('outer componentDidUpdate'),\n      componentWillUnmount: logger('outer componentWillUnmount')\n    });\n    var Inner = React.createClass({displayName: \"Inner\",\n      render: function() {\n        return React.createElement(\"span\", null, this.props.x);\n      },\n      componentWillMount: logger('inner componentWillMount'),\n      componentDidMount: logger('inner componentDidMount'),\n      componentWillReceiveProps: logger('inner componentWillReceiveProps'),\n      shouldComponentUpdate: logger('inner shouldComponentUpdate'),\n      componentWillUpdate: logger('inner componentWillUpdate'),\n      componentDidUpdate: logger('inner componentDidUpdate'),\n      componentWillUnmount: logger('inner componentWillUnmount')\n    });\n    var instance;\n\n    log = [];\n    instance = ReactTestUtils.renderIntoDocument(React.createElement(Outer, {x: 17}));\n    expect(log).toEqual([\n      'outer componentWillMount',\n      'inner componentWillMount',\n      'inner componentDidMount',\n      'outer componentDidMount'\n    ]);\n\n    log = [];\n    instance.setProps({x: 42});\n    expect(log).toEqual([\n      'outer componentWillReceiveProps',\n      'outer shouldComponentUpdate',\n      'outer componentWillUpdate',\n      'inner componentWillReceiveProps',\n      'inner shouldComponentUpdate',\n      'inner componentWillUpdate',\n      'inner componentDidUpdate',\n      'outer componentDidUpdate'\n    ]);\n\n    log = [];\n    instance.unmountComponent();\n    expect(log).toEqual([\n      'outer componentWillUnmount',\n      'inner componentWillUnmount'\n    ]);\n  });\n});\n\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactComponentLifeCycle-test\", module);\n",
"core/__tests__/ReactCompositeComponent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar ChildUpdates;\nvar MorphingComponent;\nvar React;\nvar ReactComponent;\nvar ReactCurrentOwner;\nvar ReactDoNotBindDeprecated;\nvar ReactMount;\nvar ReactPropTypes;\nvar ReactServerRendering;\nvar ReactTestUtils;\nvar TogglingComponent;\n\nvar cx;\nvar reactComponentExpect;\nvar mocks;\nvar warn;\n\n\ndescribe('ReactCompositeComponent', function() {\n\n  beforeEach(function() {\n    cx = require(\"../../cx\");\n    mocks = require(\"../../mocks\");\n\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n    React = require(\"../../React\");\n    ReactComponent = require(\"../../ReactComponent\");\n    ReactCurrentOwner = require(\"../../ReactCurrentOwner\");\n    ReactDoNotBindDeprecated = require(\"../../ReactDoNotBindDeprecated\");\n    ReactPropTypes = require(\"../../ReactPropTypes\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    ReactMount = require(\"../../ReactMount\");\n    ReactServerRendering = require(\"../../ReactServerRendering\");\n\n    MorphingComponent = React.createClass({displayName: \"MorphingComponent\",\n      getInitialState: function() {\n        return {activated: false};\n      },\n\n      _toggleActivatedState: function() {\n        this.setState({activated: !this.state.activated});\n      },\n\n      render: function() {\n        var toggleActivatedState = this._toggleActivatedState;\n        return !this.state.activated ?\n          React.createElement(\"a\", {ref: \"x\", onClick: toggleActivatedState}) :\n          React.createElement(\"b\", {ref: \"x\", onClick: toggleActivatedState});\n      }\n    });\n\n    /**\n     * We'll use this to ensure that an old version is not cached when it is\n     * reallocated again.\n     */\n    ChildUpdates = React.createClass({displayName: \"ChildUpdates\",\n      getAnchorID: function() {\n        return this.refs.anch._rootNodeID;\n      },\n      render: function() {\n        var className = cx({'anchorClass': this.props.anchorClassOn});\n        return this.props.renderAnchor ?\n          React.createElement(\"a\", {ref: \"anch\", className: className}) :\n          React.createElement(\"b\", null);\n      }\n    });\n\n    TogglingComponent = React.createClass({displayName: \"TogglingComponent\",\n      getInitialState: function() {\n        return {component: this.props.firstComponent};\n      },\n      componentDidMount: function() {\n        console.log(this.getDOMNode());\n        this.setState({component: this.props.secondComponent});\n      },\n      componentDidUpdate: function() {\n        console.log(this.getDOMNode());\n      },\n      render: function() {\n        var Component = this.state.component;\n        return Component ? React.createElement(Component, null) : null;\n      }\n    });\n\n    warn = console.warn;\n    console.warn = mocks.getMockFunction();\n  });\n\n  afterEach(function() {\n    console.warn = warn;\n  });\n\n  it('should give context for PropType errors in nested components.', function()  {\n    // In this test, we're making sure that if a proptype error is found in a\n    // component, we give a small hint as to which parent instantiated that\n    // component as per warnings about key usage in ReactElementValidator.\n    spyOn(console, 'warn');\n    var MyComp = React.createClass({displayName: \"MyComp\",\n      propTypes: {\n        color: ReactPropTypes.string\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"My color is \", this.color);\n      }\n    });\n    var ParentComp = React.createClass({displayName: \"ParentComp\",\n      render: function() {\n        return React.createElement(MyComp, {color: 123});\n      }\n    });\n    ReactTestUtils.renderIntoDocument(React.createElement(ParentComp, null));\n    expect(console.warn.calls[0].args[0]).toBe(\n      'Warning: Invalid prop `color` of type `number` supplied to `MyComp`, ' +\n      'expected `string`. Check the render method of `ParentComp`.'\n    );\n  }.bind(this));\n\n  it('should support rendering to different child types over time', function() {\n    var instance = React.createElement(MorphingComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('a');\n\n    instance._toggleActivatedState();\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('b');\n\n    instance._toggleActivatedState();\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('a');\n  });\n\n  it('should render null and false as a noscript tag under the hood', function()  {\n    var Component1 = React.createClass({displayName: \"Component1\",\n      render: function() {\n        return null;\n      }\n    });\n    var Component2 = React.createClass({displayName: \"Component2\",\n      render: function() {\n        return false;\n      }\n    });\n\n    var instance1 = ReactTestUtils.renderIntoDocument(React.createElement(Component1, null));\n    var instance2 = ReactTestUtils.renderIntoDocument(React.createElement(Component2, null));\n    reactComponentExpect(instance1)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('noscript');\n    reactComponentExpect(instance2)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('noscript');\n  });\n\n  it('should still throw when rendering to undefined', function()  {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {}\n    });\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    }).toThrow(\n      'Invariant Violation: Component.render(): A valid ReactComponent must ' +\n      'be returned. You may have returned undefined, an array or some other ' +\n      'invalid object.'\n    );\n  });\n\n  it('should be able to switch between rendering null and a normal tag', function()  {\n    spyOn(console, 'log');\n\n    var instance1 =\n      React.createElement(TogglingComponent, {\n        firstComponent: null, \n        secondComponent: 'div'}\n      );\n    var instance2 =\n      React.createElement(TogglingComponent, {\n        firstComponent: 'div', \n        secondComponent: null}\n      );\n\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(instance1);\n      ReactTestUtils.renderIntoDocument(instance2);\n    }).not.toThrow();\n\n    expect(console.log.argsForCall.length).toBe(4);\n    expect(console.log.argsForCall[0][0]).toBe(null);\n    expect(console.log.argsForCall[1][0].tagName).toBe('DIV');\n    expect(console.log.argsForCall[2][0].tagName).toBe('DIV');\n    expect(console.log.argsForCall[3][0]).toBe(null);\n  });\n\n  it('should distinguish between a script placeholder and an actual script tag',\n    function()  {\n      spyOn(console, 'log');\n\n      var instance1 =\n        React.createElement(TogglingComponent, {\n          firstComponent: null, \n          secondComponent: 'script'}\n        );\n      var instance2 =\n        React.createElement(TogglingComponent, {\n          firstComponent: 'script', \n          secondComponent: null}\n        );\n\n      expect(function() {\n        ReactTestUtils.renderIntoDocument(instance1);\n      }).not.toThrow();\n      expect(function() {\n        ReactTestUtils.renderIntoDocument(instance2);\n      }).not.toThrow();\n\n      expect(console.log.argsForCall.length).toBe(4);\n      expect(console.log.argsForCall[0][0]).toBe(null);\n      expect(console.log.argsForCall[1][0].tagName).toBe('SCRIPT');\n      expect(console.log.argsForCall[2][0].tagName).toBe('SCRIPT');\n      expect(console.log.argsForCall[3][0]).toBe(null);\n    }\n  );\n\n  it('should have getDOMNode return null when multiple layers of composite ' +\n    'components render to the same null placeholder', function()  {\n      spyOn(console, 'log');\n\n      var GrandChild = React.createClass({displayName: \"GrandChild\",\n        render: function() {\n          return null;\n        }\n      });\n\n      var Child = React.createClass({displayName: \"Child\",\n        render: function() {\n          return React.createElement(GrandChild, null);\n        }\n      });\n\n      var instance1 =\n        React.createElement(TogglingComponent, {\n          firstComponent: 'div', \n          secondComponent: Child}\n        );\n      var instance2 =\n        React.createElement(TogglingComponent, {\n          firstComponent: Child, \n          secondComponent: 'div'}\n        );\n\n      expect(function() {\n        ReactTestUtils.renderIntoDocument(instance1);\n      }).not.toThrow();\n      expect(function() {\n        ReactTestUtils.renderIntoDocument(instance2);\n      }).not.toThrow();\n\n      expect(console.log.argsForCall.length).toBe(4);\n      expect(console.log.argsForCall[0][0].tagName).toBe('DIV');\n      expect(console.log.argsForCall[1][0]).toBe(null);\n      expect(console.log.argsForCall[2][0]).toBe(null);\n      expect(console.log.argsForCall[3][0].tagName).toBe('DIV');\n    }\n  );\n\n  it('should not thrash a server rendered layout with client side one', function()  {\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return null;\n      }\n    });\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return React.createElement(\"div\", null, React.createElement(Child, null));\n      }\n    });\n\n    var markup = ReactServerRendering.renderToString(React.createElement(Parent, null));\n    var container = document.createElement('div');\n    container.innerHTML = markup;\n\n    spyOn(console, 'warn');\n    React.render(React.createElement(Parent, null), container);\n    expect(console.warn).not.toHaveBeenCalled();\n  });\n\n  it('should react to state changes from callbacks', function() {\n    var instance = React.createElement(MorphingComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    var renderedChild = reactComponentExpect(instance)\n      .expectRenderedChild()\n      .instance();\n\n    ReactTestUtils.Simulate.click(renderedChild);\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n      .toBeDOMComponentWithTag('b');\n  });\n\n  it('should rewire refs when rendering to different child types', function() {\n    var instance = React.createElement(MorphingComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    reactComponentExpect(instance.refs.x).toBeDOMComponentWithTag('a');\n    instance._toggleActivatedState();\n    reactComponentExpect(instance.refs.x).toBeDOMComponentWithTag('b');\n    instance._toggleActivatedState();\n    reactComponentExpect(instance.refs.x).toBeDOMComponentWithTag('a');\n  });\n\n  it('should not cache old DOM nodes when switching constructors', function() {\n    var instance = React.createElement(ChildUpdates, {renderAnchor: true, anchorClassOn: false});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    instance.setProps({anchorClassOn: true});  // Warm any cache\n    instance.setProps({renderAnchor: false});  // Clear out the anchor\n    // rerender\n    instance.setProps({renderAnchor: true, anchorClassOn: false});\n    var anchorID = instance.getAnchorID();\n    var actualDOMAnchorNode = ReactMount.getNode(anchorID);\n    expect(actualDOMAnchorNode.className).toBe('');\n  });\n\n  it('should auto bind methods and values correctly', function() {\n    spyOn(console, 'warn');\n\n    var ComponentClass = React.createClass({displayName: \"ComponentClass\",\n      getInitialState: function() {\n        return {valueToReturn: 'hi'};\n      },\n      methodToBeExplicitlyBound: function() {\n        return this;\n      },\n      methodAutoBound: function() {\n        return this;\n      },\n      methodExplicitlyNotBound: ReactDoNotBindDeprecated.doNotBind(function() {\n        return this;\n      }),\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n    var instance = React.createElement(ComponentClass, null);\n\n    // Next, prove that once mounted, the scope is bound correctly to the actual\n    // component.\n    var mountedInstance = ReactTestUtils.renderIntoDocument(instance);\n\n    expect(function() {\n      mountedInstance.methodToBeExplicitlyBound.bind(instance)();\n    }).not.toThrow();\n    expect(function() {\n      mountedInstance.methodAutoBound();\n    }).not.toThrow();\n    expect(function() {\n      mountedInstance.methodExplicitlyNotBound();\n    }).not.toThrow();\n\n    expect(console.warn.argsForCall.length).toBe(1);\n    var explicitlyBound = mountedInstance.methodToBeExplicitlyBound.bind(\n      mountedInstance\n    );\n    expect(console.warn.argsForCall.length).toBe(2);\n    var autoBound = mountedInstance.methodAutoBound;\n    var explicitlyNotBound = mountedInstance.methodExplicitlyNotBound;\n\n    var context = {};\n    expect(explicitlyBound.call(context)).toBe(mountedInstance);\n    expect(autoBound.call(context)).toBe(mountedInstance);\n    expect(explicitlyNotBound.call(context)).toBe(context);\n\n    expect(explicitlyBound.call(mountedInstance)).toBe(mountedInstance);\n    expect(autoBound.call(mountedInstance)).toBe(mountedInstance);\n    // This one is the weird one\n    expect(explicitlyNotBound.call(mountedInstance)).toBe(mountedInstance);\n\n  });\n\n  it('should not pass this to getDefaultProps', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getDefaultProps: function() {\n        expect(this.render).not.toBeDefined();\n        return {};\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n  });\n\n  it('should use default values for undefined props', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getDefaultProps: function() {\n        return {prop: 'testKey'};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var instance1 = React.createElement(Component, null);\n    instance1 = ReactTestUtils.renderIntoDocument(instance1);\n    reactComponentExpect(instance1).scalarPropsEqual({prop: 'testKey'});\n\n    var instance2 = React.createElement(Component, {prop: undefined});\n    instance2 = ReactTestUtils.renderIntoDocument(instance2);\n    reactComponentExpect(instance2).scalarPropsEqual({prop: 'testKey'});\n\n    var instance3 = React.createElement(Component, {prop: null});\n    instance3 = ReactTestUtils.renderIntoDocument(instance3);\n    reactComponentExpect(instance3).scalarPropsEqual({prop: null});\n  });\n\n  it('should not mutate passed-in props object', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getDefaultProps: function() {\n        return {prop: 'testKey'};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var inputProps = {};\n    var instance1 = React.createElement(Component, React.__spread({},  inputProps));\n    instance1 = ReactTestUtils.renderIntoDocument(instance1);\n    expect(instance1.props.prop).toBe('testKey');\n\n    // We don't mutate the input, just in case the caller wants to do something\n    // with it after using it to instantiate a component\n    expect(inputProps.prop).not.toBeDefined();\n  });\n\n  it('should use default prop value when removing a prop', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getDefaultProps: function() {\n        return {fruit: 'persimmon'};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    var container = document.createElement('div');\n    var instance = React.render(\n      React.createElement(Component, {fruit: \"mango\"}),\n      container\n    );\n    expect(instance.props.fruit).toBe('mango');\n\n    React.render(React.createElement(Component, null), container);\n    expect(instance.props.fruit).toBe('persimmon');\n  });\n\n  it('should normalize props with default values', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      propTypes: {prop: ReactPropTypes.string.isRequired},\n      getDefaultProps: function() {\n        return {prop: 'testKey'};\n      },\n      getInitialState: function() {\n        return {prop: this.props.prop + 'State'};\n      },\n      render: function() {\n        return React.createElement(\"span\", null, this.props.prop);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    reactComponentExpect(instance).scalarPropsEqual({prop: 'testKey'});\n    reactComponentExpect(instance).scalarStateEqual({prop: 'testKeyState'});\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, {prop: null}));\n\n    expect(console.warn.mock.calls.length).toBe(1);\n    expect(console.warn.mock.calls[0][0]).toBe(\n      'Warning: Required prop `prop` was not specified in `Component`.'\n    );\n  });\n\n  it('should check default prop values', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      propTypes: {prop: ReactPropTypes.string.isRequired},\n      getDefaultProps: function() {\n        return {prop: null};\n      },\n      render: function() {\n        return React.createElement(\"span\", null, this.props.prop);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n\n    expect(console.warn.mock.calls.length).toBe(1);\n    expect(console.warn.mock.calls[0][0]).toBe(\n      'Warning: Required prop `prop` was not specified in `Component`.'\n    );\n  });\n\n  it('should check declared prop types', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      propTypes: {\n        prop: ReactPropTypes.string.isRequired\n      },\n      render: function() {\n        return React.createElement(\"span\", null, this.props.prop);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, {prop: 42}));\n\n    expect(console.warn.mock.calls.length).toBe(2);\n    expect(console.warn.mock.calls[0][0]).toBe(\n      'Warning: Required prop `prop` was not specified in `Component`.'\n    );\n\n    expect(console.warn.mock.calls[1][0]).toBe(\n      'Warning: Invalid prop `prop` of type `number` supplied to ' +\n      '`Component`, expected `string`.'\n    );\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, {prop: \"string\"}));\n\n    // Should not error for strings\n    expect(console.warn.mock.calls.length).toBe(2);\n  });\n\n  it('should throw on invalid prop types', function() {\n    expect(function() {\n      React.createClass({\n        displayName: 'Component',\n        propTypes: {\n          prop: null\n        },\n        render: function() {\n          return React.createElement(\"span\", null, this.props.prop);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: Component: prop type `prop` is invalid; ' +\n      'it must be a function, usually from React.PropTypes.'\n    );\n  });\n\n  it('should throw on invalid context types', function() {\n    expect(function() {\n      React.createClass({\n        displayName: 'Component',\n        contextTypes: {\n          prop: null\n        },\n        render: function() {\n          return React.createElement(\"span\", null, this.props.prop);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: Component: context type `prop` is invalid; ' +\n      'it must be a function, usually from React.PropTypes.'\n    );\n  });\n\n  it('should throw on invalid child context types', function() {\n    expect(function() {\n      React.createClass({\n        displayName: 'Component',\n        childContextTypes: {\n          prop: null\n        },\n        render: function() {\n          return React.createElement(\"span\", null, this.props.prop);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: Component: child context type `prop` is invalid; ' +\n      'it must be a function, usually from React.PropTypes.'\n    );\n  });\n\n  it('should not allow `forceUpdate` on unmounted components', function() {\n    var container = document.createElement('div');\n    document.documentElement.appendChild(container);\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.createElement(Component, null);\n    expect(instance.forceUpdate).not.toBeDefined();\n\n    instance = React.render(instance, container);\n    expect(function() {\n      instance.forceUpdate();\n    }).not.toThrow();\n\n    React.unmountComponentAtNode(container);\n    expect(function() {\n      instance.forceUpdate();\n    }).toThrow(\n      'Invariant Violation: forceUpdate(...): Can only force an update on ' +\n      'mounted or mounting components.'\n    );\n  });\n\n  it('should cleanup even if render() fatals', function() {\n    var BadComponent = React.createClass({displayName: \"BadComponent\",\n      render: function() {\n        throw new Error();\n      }\n    });\n    var instance = React.createElement(BadComponent, null);\n\n    expect(ReactCurrentOwner.current).toBe(null);\n\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow();\n\n    expect(ReactCurrentOwner.current).toBe(null);\n  });\n\n  it('should support mixins with getInitialState()', function() {\n    var Mixin = {\n      getInitialState: function() {\n        return {mixin: true};\n      }\n    };\n    var Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin],\n      getInitialState: function() {\n        return {component: true};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state.component).toBe(true);\n    expect(instance.state.mixin).toBe(true);\n  });\n\n  it('should throw with conflicting getInitialState() methods', function() {\n    var Mixin = {\n      getInitialState: function() {\n        return {x: true};\n      }\n    };\n    var Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin],\n      getInitialState: function() {\n        return {x: true};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    expect(function() {\n      instance = ReactTestUtils.renderIntoDocument(instance);\n    }).toThrow(\n      'Invariant Violation: mergeObjectsWithNoDuplicateKeys(): ' +\n      'Tried to merge two objects with the same key: `x`. This conflict ' +\n      'may be due to a mixin; in particular, this may be caused by two ' +\n      'getInitialState() or getDefaultProps() methods returning objects ' +\n      'with clashing keys.'\n    );\n  });\n\n  it('should work with object getInitialState() return values', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {\n          occupation: 'clown'\n        };\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state.occupation).toEqual('clown');\n  });\n\n  it('should throw with non-object getInitialState() return values', function() {\n    [['an array'], 'a string', 1234].forEach(function(state) {\n      var Component = React.createClass({displayName: \"Component\",\n        getInitialState: function() {\n          return state;\n        },\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n      var instance = React.createElement(Component, null);\n      expect(function() {\n        instance = ReactTestUtils.renderIntoDocument(instance);\n      }).toThrow(\n        'Invariant Violation: Component.getInitialState(): ' +\n        'must return an object or null'\n      );\n    });\n  });\n\n  it('should work with a null getInitialState() return value', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return null;\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    expect(\n      function()  {return ReactTestUtils.renderIntoDocument(React.createElement(Component, null));}\n    ).not.toThrow();\n  });\n\n  it('should work with a null getInitialState return value and a mixin', function()  {\n    var Component;\n    var instance;\n\n    var Mixin = {\n      getInitialState: function() {\n        return {foo: 'bar'};\n      }\n    };\n    Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin],\n      getInitialState: function() {\n        return null;\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    expect(\n      function()  {return ReactTestUtils.renderIntoDocument(React.createElement(Component, null));}\n    ).not.toThrow();\n\n    instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'bar'});\n\n    // Also the other way round should work\n    var Mixin2 = {\n      getInitialState: function() {\n        return null;\n      }\n    };\n    Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin2],\n      getInitialState: function() {\n        return {foo: 'bar'};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    expect(\n      function()  {return ReactTestUtils.renderIntoDocument(React.createElement(Component, null));}\n    ).not.toThrow();\n\n    instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'bar'});\n\n    // Multiple mixins should be fine too\n    Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin, Mixin2],\n      getInitialState: function() {\n        return {x: true};\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    expect(\n      function()  {return ReactTestUtils.renderIntoDocument(React.createElement(Component, null));}\n    ).not.toThrow();\n\n    instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'bar', x: true});\n  });\n\n  it('should work with object getInitialState() return values', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {\n          occupation: 'clown'\n        };\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state.occupation).toEqual('clown');\n  });\n\n  it('should throw with non-object getInitialState() return values', function() {\n    [['an array'], 'a string', 1234].forEach(function(state) {\n      var Component = React.createClass({displayName: \"Component\",\n        getInitialState: function() {\n          return state;\n        },\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n      var instance = React.createElement(Component, null);\n      expect(function() {\n        instance = ReactTestUtils.renderIntoDocument(instance);\n      }).toThrow(\n        'Invariant Violation: Component.getInitialState(): ' +\n        'must return an object or null'\n      );\n    });\n  });\n\n  it('should call componentWillUnmount before unmounting', function() {\n    var container = document.createElement('div');\n    var innerUnmounted = false;\n\n    spyOn(ReactMount, 'purgeID').andCallThrough();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null, \n          React.createElement(Inner, null)\n        );\n      }\n    });\n    var Inner = React.createClass({displayName: \"Inner\",\n      componentWillUnmount: function() {\n        // It's important that ReactMount.purgeID be called after any component\n        // lifecycle methods, because a componentWillMount implementation is\n        // likely call this.getDOMNode(), which will repopulate the node cache\n        // after it's been cleared, causing a memory leak.\n        expect(ReactMount.purgeID.callCount).toBe(0);\n        innerUnmounted = true;\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    React.render(React.createElement(Component, null), container);\n    React.unmountComponentAtNode(container);\n    expect(innerUnmounted).toBe(true);\n\n    // <Component />, <Inner />, and both <div /> elements each call\n    // unmountIDFromEnvironment which calls purgeID, for a total of 4.\n    expect(ReactMount.purgeID.callCount).toBe(4);\n  });\n\n  it('should warn but detect valid CompositeComponent classes', function() {\n    var warn = console.warn;\n    console.warn = mocks.getMockFunction();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    expect(React.isValidClass(Component)).toBe(true);\n\n    expect(console.warn.mock.calls.length).toBe(1);\n    expect(console.warn.mock.calls[0][0]).toContain(\n      'isValidClass is deprecated and will be removed in a future release'\n    );\n  });\n\n  it('should warn but detect invalid CompositeComponent classes', function() {\n    var warn = console.warn;\n    console.warn = mocks.getMockFunction();\n\n    var FnComponent = function() {\n      return false;\n    };\n\n    var NullComponent = null;\n\n    var TrickFnComponent = function() {\n      return true;\n    };\n    TrickFnComponent.componentConstructor = true;\n\n    expect(React.isValidClass(FnComponent)).toBe(false);\n    expect(React.isValidClass(NullComponent)).toBe(false);\n    expect(React.isValidClass(TrickFnComponent)).toBe(false);\n\n    expect(console.warn.mock.calls.length).toBe(3);\n    console.warn.mock.calls.forEach(function(call) {\n      expect(call[0]).toContain(\n        'isValidClass is deprecated and will be removed in a future release'\n      );\n    });\n  });\n\n  it('should warn when shouldComponentUpdate() returns undefined', function() {\n    var warn = console.warn;\n    console.warn = mocks.getMockFunction();\n\n    try {\n      var Component = React.createClass({displayName: \"Component\",\n        getInitialState: function () {\n          return {bogus: false};\n        },\n\n        shouldComponentUpdate: function() {\n          return undefined;\n        },\n\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n\n      var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n      instance.setState({bogus: true});\n\n      expect(console.warn.mock.calls.length).toBe(1);\n      expect(console.warn.mock.calls[0][0]).toBe(\n        'Component.shouldComponentUpdate(): Returned undefined instead of a ' +\n        'boolean value. Make sure to return true or false.'\n      );\n    } finally {\n      console.warn = warn;\n    }\n  });\n\n  it('should warn when mispelling shouldComponentUpdate', function() {\n    var warn = console.warn;\n    console.warn = mocks.getMockFunction();\n\n    try {\n      React.createClass({\n        componentShouldUpdate: function() {\n          return false;\n        },\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n      expect(console.warn.mock.calls.length).toBe(1);\n      expect(console.warn.mock.calls[0][0]).toBe(\n        'A component has a method called componentShouldUpdate(). Did you ' +\n        'mean shouldComponentUpdate()? The name is phrased as a question ' +\n        'because the function is expected to return a value.'\n      );\n\n      var NamedComponent = React.createClass({displayName: \"NamedComponent\",\n        componentShouldUpdate: function() {\n          return false;\n        },\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n      expect(console.warn.mock.calls.length).toBe(2);\n      expect(console.warn.mock.calls[1][0]).toBe(\n        'NamedComponent has a method called componentShouldUpdate(). Did you ' +\n        'mean shouldComponentUpdate()? The name is phrased as a question ' +\n        'because the function is expected to return a value.'\n      );\n\n      React.createElement(NamedComponent, null); // Shut up lint\n    } finally {\n      console.warn = warn;\n    }\n  });\n\n  xit('should warn when using deprecated non-static spec keys', function() {\n    var warn = console.warn;\n    console.warn = mocks.getMockFunction();\n    try {\n      React.createClass({\n        mixins: [{}],\n        propTypes: {\n          foo: ReactPropTypes.string\n        },\n        contextTypes: {\n          foo: ReactPropTypes.string\n        },\n        childContextTypes: {\n          foo: ReactPropTypes.string\n        },\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n      expect(console.warn.mock.calls.length).toBe(4);\n      expect(console.warn.mock.calls[0][0]).toBe(\n        'createClass(...): `mixins` is now a static property and should ' +\n        'be defined inside \"statics\".'\n      );\n      expect(console.warn.mock.calls[1][0]).toBe(\n        'createClass(...): `propTypes` is now a static property and should ' +\n        'be defined inside \"statics\".'\n      );\n      expect(console.warn.mock.calls[2][0]).toBe(\n        'createClass(...): `contextTypes` is now a static property and ' +\n        'should be defined inside \"statics\".'\n      );\n      expect(console.warn.mock.calls[3][0]).toBe(\n        'createClass(...): `childContextTypes` is now a static property and ' +\n        'should be defined inside \"statics\".'\n      );\n    } finally {\n      console.warn = warn;\n    }\n  });\n\n  it('should pass context', function() {\n    var childInstance = null;\n    var grandchildInstance = null;\n\n    var Parent = React.createClass({displayName: \"Parent\",\n      childContextTypes: {\n        foo: ReactPropTypes.string,\n        depth: ReactPropTypes.number\n      },\n\n      getChildContext: function() {\n        return {\n          foo: 'bar',\n          depth: 0\n        };\n      },\n\n      render: function() {\n        return React.createElement(Child, null);\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      contextTypes: {\n        foo: ReactPropTypes.string,\n        depth: ReactPropTypes.number\n      },\n\n      childContextTypes: {\n        depth: ReactPropTypes.number\n      },\n\n      getChildContext: function() {\n        return {\n          depth: this.context.depth + 1\n        };\n      },\n\n      render: function() {\n        childInstance = this;\n        return React.createElement(Grandchild, null);\n      }\n    });\n\n    var Grandchild = React.createClass({displayName: \"Grandchild\",\n      contextTypes: {\n        foo: ReactPropTypes.string,\n        depth: ReactPropTypes.number\n      },\n\n      render: function() {\n        grandchildInstance = this;\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Parent, null));\n    reactComponentExpect(childInstance).scalarContextEqual({foo: 'bar', depth: 0});\n    reactComponentExpect(grandchildInstance).scalarContextEqual({foo: 'bar', depth: 1});\n  });\n\n  it('should check context types', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      contextTypes: {\n        foo: ReactPropTypes.string.isRequired\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n\n    expect(console.warn.mock.calls.length).toBe(1);\n    expect(console.warn.mock.calls[0][0]).toBe(\n      'Warning: Required context `foo` was not specified in `Component`.'\n    );\n\n    React.withContext({foo: 'bar'}, function() {\n      ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    });\n\n    // Previous call should not error\n    expect(console.warn.mock.calls.length).toBe(1);\n\n    React.withContext({foo: 123}, function() {\n      ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    });\n\n    expect(console.warn.mock.calls.length).toBe(2);\n    expect(console.warn.mock.calls[1][0]).toBe(\n      'Warning: Invalid context `foo` of type `number` supplied ' +\n      'to `Component`, expected `string`.'\n    );\n  });\n\n  it('should check child context types', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      childContextTypes: {\n        foo: ReactPropTypes.string.isRequired,\n        bar: ReactPropTypes.number\n      },\n\n      getChildContext: function() {\n        return this.props.testContext;\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, {testContext: {bar: 123}}));\n\n    expect(console.warn.mock.calls.length).toBe(1);\n    expect(console.warn.mock.calls[0][0]).toBe(\n      'Warning: Required child context `foo` was not specified in `Component`.'\n    );\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Component, {testContext: {foo: 123}}));\n\n    expect(console.warn.mock.calls.length).toBe(2);\n    expect(console.warn.mock.calls[1][0]).toBe(\n      'Warning: Invalid child context `foo` of type `number` ' +\n      'supplied to `Component`, expected `string`.'\n    );\n\n    ReactTestUtils.renderIntoDocument(\n      React.createElement(Component, {testContext: {foo: 'foo', bar: 123}})\n    );\n\n    ReactTestUtils.renderIntoDocument(\n      React.createElement(Component, {testContext: {foo: 'foo'}})\n    );\n\n    // Previous calls should not log errors\n    expect(console.warn.mock.calls.length).toBe(2);\n  });\n\n  it('should filter out context not in contextTypes', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      contextTypes: {\n        foo: ReactPropTypes.string\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.withContext({foo: 'abc', bar: 123}, function() {\n      return React.createElement(Component, null);\n    });\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    reactComponentExpect(instance).scalarContextEqual({foo: 'abc'});\n  });\n\n  it('should filter context properly in callbacks', function() {\n    var actualComponentWillReceiveProps;\n    var actualShouldComponentUpdate;\n    var actualComponentWillUpdate;\n    var actualComponentDidUpdate;\n\n    var Parent = React.createClass({displayName: \"Parent\",\n      childContextTypes: {\n        foo: ReactPropTypes.string.isRequired,\n        bar: ReactPropTypes.string.isRequired\n      },\n\n      getChildContext: function() {\n        return {\n          foo: this.props.foo,\n          bar: \"bar\"\n        };\n      },\n\n      render: function() {\n        return React.createElement(Component, null);\n      }\n    });\n\n    var Component = React.createClass({displayName: \"Component\",\n      contextTypes: {\n        foo: ReactPropTypes.string\n      },\n\n      componentWillReceiveProps: function(nextProps, nextContext) {\n        actualComponentWillReceiveProps = nextContext;\n        return true;\n      },\n\n      shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n        actualShouldComponentUpdate = nextContext;\n        return true;\n      },\n\n      componentWillUpdate: function(nextProps, nextState, nextContext) {\n        actualComponentWillUpdate = nextContext;\n      },\n\n      componentDidUpdate: function(prevProps, prevState, prevContext) {\n        actualComponentDidUpdate = prevContext;\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.createElement(Parent, {foo: \"abc\"});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    instance.replaceProps({foo: \"def\"});\n    expect(actualComponentWillReceiveProps).toEqual({foo: 'def'});\n    expect(actualShouldComponentUpdate).toEqual({foo: 'def'});\n    expect(actualComponentWillUpdate).toEqual({foo: 'def'});\n    expect(actualComponentDidUpdate).toEqual({foo: 'abc'});\n  });\n\n  it('should support statics', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      statics: {\n        abc: 'def',\n        def: 0,\n        ghi: null,\n        jkl: 'mno',\n        pqr: function() {\n          return this;\n        }\n      },\n\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.constructor.abc).toBe('def');\n    expect(Component.abc).toBe('def');\n    expect(instance.constructor.def).toBe(0);\n    expect(Component.def).toBe(0);\n    expect(instance.constructor.ghi).toBe(null);\n    expect(Component.ghi).toBe(null);\n    expect(instance.constructor.jkl).toBe('mno');\n    expect(Component.jkl).toBe('mno');\n    expect(instance.constructor.pqr()).toBe(Component.type);\n    expect(Component.pqr()).toBe(Component.type);\n  });\n\n  it('should throw if a reserved property is in statics', function() {\n    expect(function() {\n      React.createClass({\n        statics: {\n          getDefaultProps: function() {\n            return {\n              foo: 0\n            };\n          }\n        },\n\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: ReactCompositeComponent: You are attempting to ' +\n      'define a reserved property, `getDefaultProps`, that shouldn\\'t be on ' +\n      'the \"statics\" key. Define it as an instance property instead; it ' +\n      'will still be accessible on the constructor.'\n    );\n  });\n\n  it('should support statics in mixins', function() {\n    var Mixin = {\n      statics: {\n        foo: 'bar'\n      }\n    };\n    var Component = React.createClass({displayName: \"Component\",\n      mixins: [Mixin],\n\n      statics: {\n        abc: 'def'\n      },\n\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.constructor.foo).toBe('bar');\n    expect(Component.foo).toBe('bar');\n    expect(instance.constructor.abc).toBe('def');\n    expect(Component.abc).toBe('def');\n  });\n\n  it(\"should throw if mixins override each others' statics\", function() {\n    expect(function() {\n      var Mixin = {\n        statics: {\n          abc: 'foo'\n        }\n      };\n      React.createClass({\n        mixins: [Mixin],\n\n        statics: {\n          abc: 'bar'\n        },\n\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: ReactCompositeComponent: You are attempting to ' +\n      'define `abc` on your component more than once. This conflict may be ' +\n      'due to a mixin.'\n    );\n  });\n\n  it(\"should throw if mixins override functions in statics\", function() {\n    expect(function() {\n      var Mixin = {\n        statics: {\n          abc: function() { console.log('foo'); }\n        }\n      };\n      React.createClass({\n        mixins: [Mixin],\n\n        statics: {\n          abc: function() { console.log('bar'); }\n        },\n\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: ReactCompositeComponent: You are attempting to ' +\n      'define `abc` on your component more than once. This conflict may be ' +\n      'due to a mixin.'\n    );\n  });\n\n  it(\"should throw if the mixin is a React component\", function() {\n    expect(function() {\n      React.createClass({\n        mixins: [React.createElement(\"div\", null)],\n\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: ReactCompositeComponent: You\\'re attempting to ' +\n      'use a component as a mixin. Instead, just use a regular object.'\n    );\n  });\n\n  it(\"should throw if the mixin is a React component class\", function() {\n    expect(function() {\n      var Component = React.createClass({displayName: \"Component\",\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n\n      React.createClass({\n        mixins: [Component],\n\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n    }).toThrow(\n      'Invariant Violation: ReactCompositeComponent: You\\'re attempting to ' +\n      'use a component class as a mixin. Instead, just use a regular object.'\n    );\n  });\n\n  it('should have bound the mixin methods to the component', function() {\n    var mixin = {\n      mixinFunc: function() {return this;}\n    };\n\n    var Component = React.createClass({displayName: \"Component\",\n      mixins: [mixin],\n      componentDidMount: function() {\n        expect(this.mixinFunc()).toBe(this);\n      },\n      render: function() {\n        return React.createElement(\"span\", null);\n      }\n    });\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n  });\n\n  it('should include the mixin keys in even if their values are falsy',\n    function() {\n      var mixin = {\n        keyWithNullValue: null,\n        randomCounter: 0\n      };\n\n      var Component = React.createClass({displayName: \"Component\",\n        mixins: [mixin],\n        componentDidMount: function() {\n          expect(this.randomCounter).toBe(0);\n          expect(this.keyWithNullValue).toBeNull();\n        },\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n      var instance = React.createElement(Component, null);\n      instance = ReactTestUtils.renderIntoDocument(instance);\n  });\n\n  it('should disallow nested render calls', function() {\n    spyOn(console, 'warn');\n    var Inner = React.createClass({displayName: \"Inner\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n    var Outer = React.createClass({displayName: \"Outer\",\n      render: function() {\n        ReactTestUtils.renderIntoDocument(React.createElement(Inner, null));\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Outer, null));\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toBe(\n      'Warning: _renderNewRootComponent(): Render methods should ' +\n      'be a pure function of props and state; triggering nested component ' +\n      'updates from render is not allowed. If necessary, trigger nested ' +\n      'updates in componentDidUpdate.'\n    );\n  });\n\n  it('gives a helpful error when passing null or undefined', function() {\n    spyOn(console, 'warn');\n    React.createElement(undefined);\n    React.createElement(null);\n    expect(console.warn.calls.length).toBe(2);\n    expect(console.warn.calls[0].args[0]).toBe(\n      'Warning: React.createElement: type should not be null or undefined. ' +\n      'It should be a string (for DOM elements) or a ReactClass (for ' +\n      'composite components).'\n    );\n    expect(console.warn.calls[1].args[0]).toBe(\n      'Warning: React.createElement: type should not be null or undefined. ' +\n      'It should be a string (for DOM elements) or a ReactClass (for ' +\n      'composite components).'\n    );\n    React.createElement('div');\n    expect(console.warn.calls.length).toBe(2);\n\n    expect(function()  {return React.createElement(undefined);}).not.toThrow()\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponent-test\", module);\n",
"core/__tests__/ReactCompositeComponentDOMMinimalism-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\n// Requires\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\n\n// Test components\nvar LowerLevelComposite;\nvar MyCompositeComponent;\n\nvar expectSingleChildlessDiv;\n\n/**\n * Integration test, testing the combination of JSX with our unit of\n * abstraction, `ReactCompositeComponent` does not ever add superfluous DOM\n * nodes.\n */\ndescribe('ReactCompositeComponentDOMMinimalism', function() {\n\n  beforeEach(function() {\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n\n    LowerLevelComposite = React.createClass({displayName: \"LowerLevelComposite\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            this.props.children\n          )\n        );\n      }\n    });\n\n    MyCompositeComponent = React.createClass({displayName: \"MyCompositeComponent\",\n      render: function() {\n        return (\n          React.createElement(LowerLevelComposite, null, \n            this.props.children\n          )\n        );\n      }\n    });\n\n    expectSingleChildlessDiv = function(instance) {\n      reactComponentExpect(instance)\n        .expectRenderedChild()\n        .toBeCompositeComponentWithType(LowerLevelComposite)\n          .expectRenderedChild()\n          .toBeDOMComponentWithTag('div')\n          .toBeDOMComponentWithNoChildren();\n    };\n  });\n\n  it('should not render extra nodes for non-interpolated text', function() {\n    var instance = (\n      React.createElement(MyCompositeComponent, null, \n        \"A string child\"\n      )\n    );\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expectSingleChildlessDiv(instance);\n  });\n\n  it('should not render extra nodes for non-interpolated text', function() {\n    var instance = (\n      React.createElement(MyCompositeComponent, null, \n        'Interpolated String Child'\n      )\n    );\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expectSingleChildlessDiv(instance);\n  });\n\n  it('should not render extra nodes for non-interpolated text', function() {\n    var instance = (\n      React.createElement(MyCompositeComponent, null, \n        React.createElement(\"ul\", null, \n          \"This text causes no children in ul, just innerHTML\"\n        )\n      )\n    );\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n      .toBeCompositeComponentWithType(LowerLevelComposite)\n        .expectRenderedChild()\n        .toBeDOMComponentWithTag('div')\n        .toBeDOMComponentWithChildCount(1)\n        .expectRenderedChildAt(0)\n          .toBeDOMComponentWithTag('ul')\n          .toBeDOMComponentWithNoChildren();\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponentDOMMinimalism-test\", module);\n",
"core/__tests__/ReactCompositeComponentError-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar ReactErrorUtils = require(\"../../ReactErrorUtils\");\n\ndescribe('ReactCompositeComponent-error', function() {\n\n  it('should be passed the component and method name', function() {\n    spyOn(ReactErrorUtils, 'guard').andCallThrough();\n    var Component = React.createClass({displayName: \"Component\",\n      someHandler: function() {},\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = React.createElement(Component, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(ReactErrorUtils.guard.mostRecentCall.args[1])\n      .toEqual('Component.someHandler');\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponentError-test\", module);\n",
"core/__tests__/ReactCompositeComponentMixin-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../mocks\");\n\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\n\nvar TestComponent;\nvar TestComponentWithPropTypes;\nvar TestComponentWithReverseSpec;\nvar mixinPropValidator;\nvar componentPropValidator;\n\ndescribe('ReactCompositeComponent-mixin', function() {\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n    mixinPropValidator = mocks.getMockFunction();\n    componentPropValidator = mocks.getMockFunction();\n\n    var MixinA = {\n      propTypes: {\n        propA: function() {}\n      },\n      componentDidMount: function() {\n        this.props.listener('MixinA didMount');\n      }\n    };\n\n    var MixinB = {\n      mixins: [MixinA],\n      propTypes: {\n        propB: function() {}\n      },\n      componentDidMount: function() {\n        this.props.listener('MixinB didMount');\n      }\n    };\n\n    var MixinBWithReverseSpec = {\n      componentDidMount: function() {\n        this.props.listener('MixinBWithReverseSpec didMount');\n      },\n      mixins: [MixinA]\n    };\n\n    var MixinC = {\n      statics: {\n        staticC: function() {}\n      },\n      componentDidMount: function() {\n        this.props.listener('MixinC didMount');\n      }\n    };\n\n    var MixinD = {\n      propTypes: {\n        value: mixinPropValidator\n      }\n    };\n\n    TestComponent = React.createClass({displayName: \"TestComponent\",\n      mixins: [MixinB, MixinC, MixinD],\n      statics: {\n        staticComponent: function() {}\n      },\n      propTypes: {\n        propComponent: function() {}\n      },\n      componentDidMount: function() {\n        this.props.listener('Component didMount');\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    TestComponentWithReverseSpec = React.createClass({displayName: \"TestComponentWithReverseSpec\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      },\n      componentDidMount: function() {\n        this.props.listener('Component didMount');\n      },\n      mixins: [MixinBWithReverseSpec, MixinC, MixinD]\n    });\n\n    TestComponentWithPropTypes = React.createClass({displayName: \"TestComponentWithPropTypes\",\n      mixins: [MixinD],\n      propTypes: {\n        value: componentPropValidator\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n  });\n\n  it('should support merging propTypes and statics', function() {\n    var listener = mocks.getMockFunction();\n    var instance = React.createElement(TestComponent, {listener: listener});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    var instancePropTypes = instance.constructor.propTypes;\n\n    expect('propA' in instancePropTypes).toBe(true);\n    expect('propB' in instancePropTypes).toBe(true);\n    expect('propComponent' in instancePropTypes).toBe(true);\n\n    expect('staticC' in TestComponent).toBe(true);\n    expect('staticComponent' in TestComponent).toBe(true);\n  });\n\n  it('should support chaining delegate functions', function() {\n    var listener = mocks.getMockFunction();\n    var instance = React.createElement(TestComponent, {listener: listener});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    expect(listener.mock.calls).toEqual([\n      ['MixinA didMount'],\n      ['MixinB didMount'],\n      ['MixinC didMount'],\n      ['Component didMount']\n    ]);\n  });\n\n  it('should chain functions regardless of spec property order', function() {\n    var listener = mocks.getMockFunction();\n    var instance = React.createElement(TestComponentWithReverseSpec, {listener: listener});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    expect(listener.mock.calls).toEqual([\n      ['MixinA didMount'],\n      ['MixinBWithReverseSpec didMount'],\n      ['MixinC didMount'],\n      ['Component didMount']\n    ]);\n  });\n\n  it('should validate prop types via mixins', function() {\n    expect(TestComponent.type.propTypes).toBeDefined();\n    expect(TestComponent.type.propTypes.value)\n      .toBe(mixinPropValidator);\n  });\n\n  it('should override mixin prop types with class prop types', function() {\n    // Sanity check...\n    expect(componentPropValidator).toNotBe(mixinPropValidator);\n    // Actually check...\n    expect(TestComponentWithPropTypes.type.propTypes)\n      .toBeDefined();\n    expect(TestComponentWithPropTypes.type.propTypes.value)\n      .toNotBe(mixinPropValidator);\n    expect(TestComponentWithPropTypes.type.propTypes.value)\n      .toBe(componentPropValidator);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponentMixin-test\", module);\n",
"core/__tests__/ReactCompositeComponentSpec-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../mocks\");\n\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\n\ndescribe('ReactCompositeComponent-spec', function() {\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n  });\n\n  it('should throw when `render` is not specified', function() {\n    expect(function() {\n      React.createClass({});\n    }).toThrow(\n      'Invariant Violation: createClass(...): Class specification must ' +\n      'implement a `render` method.'\n    );\n  });\n\n  it('should copy `displayName` onto the Constructor', function() {\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    expect(TestComponent.type.displayName)\n      .toBe('TestComponent');\n  });\n\n  it('should copy prop types onto the Constructor', function() {\n    var propValidator = mocks.getMockFunction();\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      propTypes: {\n        value: propValidator\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    expect(TestComponent.type.propTypes).toBeDefined();\n    expect(TestComponent.type.propTypes.value)\n      .toBe(propValidator);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponentSpec-test\", module);\n",
"core/__tests__/ReactCompositeComponentState-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../mocks\");\n\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\n\nvar TestComponent;\n\ndescribe('ReactCompositeComponent-state', function() {\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n\n    TestComponent = React.createClass({displayName: \"TestComponent\",\n      peekAtState: function(from, state) {\n        if (state) {\n          this.props.stateListener(from, state && state.color);\n        } else {\n          this.props.stateListener(\n            from,\n            this.state && this.state.color,\n            this._pendingState && this._pendingState.color\n          );\n        }\n      },\n\n      setFavoriteColor: function(nextColor) {\n        this.setState({color: nextColor});\n      },\n\n      getInitialState: function() {\n        this.peekAtState('getInitialState');\n        return {color: 'red'};\n      },\n\n      render: function() {\n        this.peekAtState('render');\n        return React.createElement(\"div\", null, this.state.color);\n      },\n\n      componentWillMount: function() {\n        this.peekAtState('componentWillMount-start');\n        this.setState({color: 'sunrise'});\n        this.peekAtState('componentWillMount-after-sunrise');\n        this.setState({color: 'orange'});\n        this.peekAtState('componentWillMount-end');\n      },\n\n      componentDidMount: function() {\n        this.peekAtState('componentDidMount-start');\n        this.setState({color: 'yellow'});\n        this.peekAtState('componentDidMount-end');\n      },\n\n      componentWillReceiveProps: function(newProps) {\n        this.peekAtState('componentWillReceiveProps-start');\n        if (newProps.nextColor) {\n          this.setState({color: newProps.nextColor});\n        }\n        this.peekAtState('componentWillReceiveProps-end');\n      },\n\n      shouldComponentUpdate: function(nextProps, nextState) {\n        this.peekAtState('shouldComponentUpdate-currentState');\n        this.peekAtState('shouldComponentUpdate-nextState', nextState);\n        return true;\n      },\n\n      componentWillUpdate: function(nextProps, nextState) {\n        this.peekAtState('componentWillUpdate-currentState');\n        this.peekAtState('componentWillUpdate-nextState', nextState);\n      },\n\n      componentDidUpdate: function(prevProps, prevState) {\n        this.peekAtState('componentDidUpdate-currentState');\n        this.peekAtState('componentDidUpdate-prevState', prevState);\n      },\n\n      componentWillUnmount: function() {\n        this.peekAtState('componentWillUnmount');\n      }\n    });\n\n  });\n\n  it('should support setting state', function() {\n    var stateListener = mocks.getMockFunction();\n    var instance = React.createElement(TestComponent, {stateListener: stateListener});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    instance.setProps({nextColor: 'green'});\n    instance.setFavoriteColor('blue');\n    instance.forceUpdate();\n    instance.unmountComponent();\n\n    expect(stateListener.mock.calls).toEqual([\n      // there is no state when getInitialState() is called\n      [ 'getInitialState', null, null ],\n      [ 'componentWillMount-start', 'red', null ],\n      // setState() only enqueues a pending state.\n      [ 'componentWillMount-after-sunrise', 'red', 'sunrise' ],\n      [ 'componentWillMount-end', 'red', 'orange' ],\n      // pending state has been applied\n      [ 'render', 'orange', null ],\n      [ 'componentDidMount-start', 'orange', null ],\n      // componentDidMount() called setState({color:'yellow'}), currently this\n      // occurs inline.\n      // In a future where setState() is async, this test result will change.\n      [ 'shouldComponentUpdate-currentState', 'orange', null ],\n      [ 'shouldComponentUpdate-nextState', 'yellow' ],\n      [ 'componentWillUpdate-currentState', 'orange', null ],\n      [ 'componentWillUpdate-nextState', 'yellow' ],\n      [ 'render', 'yellow', null ],\n      [ 'componentDidUpdate-currentState', 'yellow', null ],\n      [ 'componentDidUpdate-prevState', 'orange' ],\n      // componentDidMount() finally closes.\n      [ 'componentDidMount-end', 'yellow', null ],\n      [ 'componentWillReceiveProps-start', 'yellow', null ],\n      // setState({color:'green'}) only enqueues a pending state.\n      [ 'componentWillReceiveProps-end', 'yellow', 'green' ],\n      [ 'shouldComponentUpdate-currentState', 'yellow', null ],\n      [ 'shouldComponentUpdate-nextState', 'green' ],\n      [ 'componentWillUpdate-currentState', 'yellow', null ],\n      [ 'componentWillUpdate-nextState', 'green' ],\n      [ 'render', 'green', null ],\n      [ 'componentDidUpdate-currentState', 'green', null ],\n      [ 'componentDidUpdate-prevState', 'yellow' ],\n      // setFavoriteColor('blue')\n      [ 'shouldComponentUpdate-currentState', 'green', null ],\n      [ 'shouldComponentUpdate-nextState', 'blue' ],\n      [ 'componentWillUpdate-currentState', 'green', null ],\n      [ 'componentWillUpdate-nextState', 'blue' ],\n      [ 'render', 'blue', null ],\n      [ 'componentDidUpdate-currentState', 'blue', null ],\n      [ 'componentDidUpdate-prevState', 'green' ],\n      // forceUpdate()\n      [ 'componentWillUpdate-currentState', 'blue', null ],\n      [ 'componentWillUpdate-nextState', 'blue' ],\n      [ 'render', 'blue', null ],\n      [ 'componentDidUpdate-currentState', 'blue', null ],\n      [ 'componentDidUpdate-prevState', 'blue' ],\n      // unmountComponent()\n      // state is available within `componentWillUnmount()`\n      [ 'componentWillUnmount', 'blue', null ]\n    ]);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactCompositeComponentState-test\", module);\n",
"core/__tests__/ReactElement-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactElement;\nvar ReactTestUtils;\n\ndescribe('ReactElement', function() {\n  var ComponentFactory;\n  var ComponentClass;\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactElement = require(\"../../ReactElement\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    ComponentFactory = React.createClass({displayName: \"ComponentFactory\",\n      render: function() { return React.createElement(\"div\", null); }\n    });\n    ComponentClass = ComponentFactory.type;\n  });\n\n  it('returns a complete element according to spec', function() {\n    var element = React.createFactory(ComponentFactory)();\n    expect(element.type).toBe(ComponentClass);\n    expect(element.key).toBe(null);\n    expect(element.ref).toBe(null);\n    expect(element.props).toEqual({});\n  });\n\n  it('allows a string to be passed as the type', function() {\n    var element = React.createFactory('div')();\n    expect(element.type).toBe('div');\n    expect(element.key).toBe(null);\n    expect(element.ref).toBe(null);\n    expect(element.props).toEqual({});\n  });\n\n  it('returns an immutable element', function() {\n    var element = React.createFactory(ComponentFactory)();\n    expect(function()  {return element.type = 'div';}).toThrow();\n  });\n\n  it('does not reuse the original config object', function() {\n    var config = { foo: 1 };\n    var element = React.createFactory(ComponentFactory)(config);\n    expect(element.props.foo).toBe(1);\n    config.foo = 2;\n    expect(element.props.foo).toBe(1);\n  });\n\n  it('extracts key and ref from the config', function() {\n    var element = React.createFactory(ComponentFactory)({\n      key: '12',\n      ref: '34',\n      foo: '56'\n    });\n    expect(element.type).toBe(ComponentClass);\n    expect(element.key).toBe('12');\n    expect(element.ref).toBe('34');\n    expect(element.props).toEqual({foo:'56'});\n  });\n\n  it('coerces the key to a string', function() {\n    var element = React.createFactory(ComponentFactory)({\n      key: 12,\n      foo: '56'\n    });\n    expect(element.type).toBe(ComponentClass);\n    expect(element.key).toBe('12');\n    expect(element.ref).toBe(null);\n    expect(element.props).toEqual({foo:'56'});\n  });\n\n  it('treats a null key as omitted but warns', function() {\n    spyOn(console, 'warn');\n    var element = React.createFactory(ComponentFactory)({\n      key: null,\n      foo: '56'\n    });\n    expect(element.type).toBe(ComponentClass);\n    expect(element.key).toBe(null);  // as opposed to string 'null'\n    expect(element.ref).toBe(null);\n    expect(element.props).toEqual({foo:'56'});\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'will be treated as equivalent to the string \\'null\\''\n    );\n  });\n\n  it('preserves the context on the element', function() {\n    var Component = React.createFactory(ComponentFactory);\n    var element;\n\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n      childContextTypes: {\n        foo: React.PropTypes.string\n      },\n      getChildContext: function() {\n        return { foo: 'bar' };\n      },\n      render: function() {\n        element = Component();\n        return element;\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, null));\n\n    expect(element._context).toEqual({ foo: 'bar' });\n  });\n\n  it('preserves the owner on the element', function() {\n    var Component = React.createFactory(ComponentFactory);\n    var element;\n\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n      childContextTypes: {\n        foo: React.PropTypes.string\n      },\n      getChildContext: function() {\n        return { foo: 'bar' };\n      },\n      render: function() {\n        element = Component();\n        return element;\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, null));\n\n    expect(element._owner).toBe(instance);\n  });\n\n  it('merges an additional argument onto the children prop', function() {\n    spyOn(console, 'warn');\n    var a = 1;\n    var element = React.createFactory(ComponentFactory)({\n      children: 'text'\n    }, a);\n    expect(element.props.children).toBe(a);\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('does not override children if no rest args are provided', function() {\n    spyOn(console, 'warn');\n    var element = React.createFactory(ComponentFactory)({\n      children: 'text'\n    });\n    expect(element.props.children).toBe('text');\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('overrides children if null is provided as an argument', function() {\n    spyOn(console, 'warn');\n    var element = React.createFactory(ComponentFactory)({\n      children: 'text'\n    }, null);\n    expect(element.props.children).toBe(null);\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('merges rest arguments onto the children prop in an array', function() {\n    spyOn(console, 'warn');\n    var a = 1, b = 2, c = 3;\n    var element = React.createFactory(ComponentFactory)(null, a, b, c);\n    expect(element.props.children).toEqual([1, 2, 3]);\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('warns for keys for arrays of elements in rest args', function() {\n    spyOn(console, 'warn');\n    var Component = React.createFactory(ComponentFactory);\n\n    Component(null, [ Component(), Component() ]);\n\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'Each child in an array should have a unique \"key\" prop'\n    );\n  });\n\n  it('does not warn when the element is directly in rest args', function() {\n    spyOn(console, 'warn');\n    var Component = React.createFactory(ComponentFactory);\n\n    Component(null, Component(), Component());\n\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('does not warn when the array contains a non-element', function() {\n    spyOn(console, 'warn');\n    var Component = React.createFactory(ComponentFactory);\n\n    Component(null, [ {}, {} ]);\n\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('allows static methods to be called using the type property', function() {\n    spyOn(console, 'warn');\n\n    var ComponentClass = React.createClass({displayName: \"ComponentClass\",\n      statics: {\n        someStaticMethod: function() {\n          return 'someReturnValue';\n        }\n      },\n      getInitialState: function() {\n        return {valueToReturn: 'hi'};\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var element = React.createElement(ComponentClass, null);\n    expect(element.type.someStaticMethod()).toBe('someReturnValue');\n    expect(console.warn.argsForCall.length).toBe(0);\n  });\n\n  it('identifies valid elements', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    expect(ReactElement.isValidElement(React.createElement(\"div\", null))).toEqual(true);\n    expect(ReactElement.isValidElement(React.createElement(Component, null))).toEqual(true);\n\n    expect(ReactElement.isValidElement(null)).toEqual(false);\n    expect(ReactElement.isValidElement(true)).toEqual(false);\n    expect(ReactElement.isValidElement({})).toEqual(false);\n    expect(ReactElement.isValidElement(\"string\")).toEqual(false);\n    expect(ReactElement.isValidElement(React.DOM.div)).toEqual(false);\n    expect(ReactElement.isValidElement(Component)).toEqual(false);\n  });\n\n  it('warns but allow a plain function in a factory to be invoked', function() {\n    spyOn(console, 'warn');\n    // This is a temporary helper to allow JSX with plain functions.\n    // This allow you to track down these callers and replace them with regular\n    // function calls.\n    var factory = React.createFactory(function (x) {\n      return 21 + x;\n    });\n    expect(factory(21)).toBe(42);\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'This JSX uses a plain function.'\n    );\n  });\n\n  it('warns but allow a plain function to be immediately invoked', function() {\n    spyOn(console, 'warn');\n    var result = React.createElement(function (x, y) {\n      return 21 + x + y;\n    }, 11, 10);\n    expect(result).toBe(42);\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'This JSX uses a plain function.'\n    );\n  });\n\n  it('warns but does not fail on undefined results', function() {\n    spyOn(console, 'warn');\n    var fn = function () { };\n    var result = React.createElement(fn, 1, 2, null);\n    expect(result).toBe(undefined);\n    expect(console.warn.argsForCall.length).toBe(1);\n    expect(console.warn.argsForCall[0][0]).toContain(\n      'This JSX uses a plain function.'\n    );\n  });\n\n\n  it('should expose the underlying class from a legacy factory', function() {\n    var Legacy = React.createClass({displayName: \"Legacy\", render: function() { } });\n    var factory = React.createFactory(Legacy);\n    expect(factory.type).toBe(Legacy.type);\n    expect(factory().type).toBe(Legacy.type);\n  });\n\n  it('allows the use of PropTypes validators in statics', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function()  {return null;},\n      statics: {\n        specialType: React.PropTypes.shape({monkey: React.PropTypes.any})\n      }\n    });\n\n    expect(typeof Component.specialType).toBe(\"function\");\n    expect(typeof Component.specialType.isRequired).toBe(\"function\");\n  });\n\n  it('allows a DOM element to be used with a string', function() {\n    var element = React.createElement('div', { className: 'foo' });\n    var instance = ReactTestUtils.renderIntoDocument(element);\n    expect(instance.getDOMNode().tagName).toBe('DIV');\n  });\n\n  it('is indistinguishable from a plain object', function() {\n    var element = React.createElement('div', { className: 'foo' });\n    var object = {};\n    expect(element.constructor).toBe(object.constructor);\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactElement-test\", module);\n",
"core/__tests__/ReactIdentity-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\nvar ReactMount;\n\ndescribe('ReactIdentity', function() {\n\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n    ReactMount = require(\"../../ReactMount\");\n  });\n\n  var idExp = /^\\.[^.]+(.*)$/;\n  function checkId(child, expectedId) {\n    var actual = idExp.exec(ReactMount.getID(child));\n    var expected = idExp.exec(expectedId);\n    expect(actual).toBeTruthy();\n    expect(expected).toBeTruthy();\n    expect(actual[1]).toEqual(expected[1]);\n  }\n\n  it('should allow keyed objects to express identity', function() {\n    var instance =\n      React.createElement(\"div\", null, \n        {\n          first: React.createElement(\"div\", null),\n          second: React.createElement(\"div\", null)\n        }\n      );\n\n    instance = React.render(instance, document.createElement('div'));\n    var node = instance.getDOMNode();\n    reactComponentExpect(instance).toBeDOMComponentWithChildCount(2);\n    checkId(node.childNodes[0], '.0.$first:0');\n    checkId(node.childNodes[1], '.0.$second:0');\n  });\n\n  it('should allow key property to express identity', function() {\n    var instance =\n      React.createElement(\"div\", null, \n        React.createElement(\"div\", {key: \"apple\"}), \n        React.createElement(\"div\", {key: \"banana\"}), \n        React.createElement(\"div\", {key: 0}), \n        React.createElement(\"div\", {key: 123})\n      );\n\n    instance = React.render(instance, document.createElement('div'));\n    var node = instance.getDOMNode();\n    reactComponentExpect(instance).toBeDOMComponentWithChildCount(4);\n    checkId(node.childNodes[0], '.0.$apple');\n    checkId(node.childNodes[1], '.0.$banana');\n    checkId(node.childNodes[2], '.0.$0');\n    checkId(node.childNodes[3], '.0.$123');\n  });\n\n  it('should use instance identity', function() {\n\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n      render: function() {\n        return React.createElement(\"a\", {key: \"i_get_overwritten\"}, this.props.children);\n      }\n    });\n\n    var instance =\n      React.createElement(\"div\", null, \n        React.createElement(Wrapper, {key: \"wrap1\"}, React.createElement(\"span\", {key: \"squirrel\"})), \n        React.createElement(Wrapper, {key: \"wrap2\"}, React.createElement(\"span\", {key: \"bunny\"})), \n        React.createElement(Wrapper, null, React.createElement(\"span\", {key: \"chipmunk\"}))\n      );\n\n    instance = React.render(instance, document.createElement('div'));\n    var node = instance.getDOMNode();\n    reactComponentExpect(instance).toBeDOMComponentWithChildCount(3);\n\n    checkId(node.childNodes[0], '.0.$wrap1');\n    checkId(node.childNodes[0].firstChild, '.0.$wrap1.$squirrel');\n    checkId(node.childNodes[1], '.0.$wrap2');\n    checkId(node.childNodes[1].firstChild, '.0.$wrap2.$bunny');\n    checkId(node.childNodes[2], '.0.2');\n    checkId(node.childNodes[2].firstChild, '.0.2.$chipmunk');\n  });\n\n  function renderAComponentWithKeyIntoContainer(key, container) {\n\n    var Wrapper = React.createClass({displayName: \"Wrapper\",\n\n      render: function() {\n        var span1 = React.createElement(\"span\", {ref: \"span1\", key: key});\n        var span2 = React.createElement(\"span\", {ref: \"span2\"});\n\n        var map = {};\n        map[key] = span2;\n        return React.createElement(\"div\", null, [span1, map]);\n      }\n\n    });\n\n    var instance = React.render(React.createElement(Wrapper, null), container);\n    var span1 = instance.refs.span1;\n    var span2 = instance.refs.span2;\n\n    expect(span1.getDOMNode()).not.toBe(null);\n    expect(span2.getDOMNode()).not.toBe(null);\n\n    key = key.replace(/=/g, '=0');\n\n    checkId(span1.getDOMNode(), '.0.$' + key);\n    checkId(span2.getDOMNode(), '.0.1:$' + key + ':0');\n  }\n\n  it('should allow any character as a key, in a detached parent', function() {\n    var detachedContainer = document.createElement('div');\n    renderAComponentWithKeyIntoContainer(\"<'WEIRD/&\\\\key'>\", detachedContainer);\n  });\n\n  it('should allow any character as a key, in an attached parent', function() {\n    // This test exists to protect against implementation details that\n    // incorrectly query escaped IDs using DOM tools like getElementById.\n    var attachedContainer = document.createElement('div');\n    document.body.appendChild(attachedContainer);\n\n    renderAComponentWithKeyIntoContainer(\"<'WEIRD/&\\\\key'>\", attachedContainer);\n\n    document.body.removeChild(attachedContainer);\n  });\n\n  it('should not allow scripts in keys to execute', function() {\n    var h4x0rKey =\n      '\"><script>window[\\'YOUVEBEENH4X0RED\\']=true;</script><div id=\"';\n\n    var attachedContainer = document.createElement('div');\n    document.body.appendChild(attachedContainer);\n\n    renderAComponentWithKeyIntoContainer(h4x0rKey, attachedContainer);\n\n    document.body.removeChild(attachedContainer);\n\n    // If we get this far, make sure we haven't executed the code\n    expect(window.YOUVEBEENH4X0RED).toBe(undefined);\n  });\n\n  it('should let restructured components retain their uniqueness', function() {\n    var instance0 = React.createElement(\"span\", null);\n    var instance1 = React.createElement(\"span\", null);\n    var instance2 = React.createElement(\"span\", null);\n\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            instance2, \n            this.props.children[0], \n            this.props.children[1]\n          )\n        );\n      }\n    });\n\n    var TestContainer = React.createClass({displayName: \"TestContainer\",\n\n      render: function() {\n        return React.createElement(TestComponent, null, instance0, instance1);\n      }\n\n    });\n\n    expect(function() {\n\n      React.render(React.createElement(TestContainer, null), document.createElement('div'));\n\n    }).not.toThrow();\n  });\n\n  it('should let nested restructures retain their uniqueness', function() {\n    var instance0 = React.createElement(\"span\", null);\n    var instance1 = React.createElement(\"span\", null);\n    var instance2 = React.createElement(\"span\", null);\n\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            instance2, \n            this.props.children[0], \n            this.props.children[1]\n          )\n        );\n      }\n    });\n\n    var TestContainer = React.createClass({displayName: \"TestContainer\",\n\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            React.createElement(TestComponent, null, instance0, instance1)\n          )\n        );\n      }\n\n    });\n\n    expect(function() {\n\n      React.render(React.createElement(TestContainer, null), document.createElement('div'));\n\n    }).not.toThrow();\n  });\n\n  it('should let text nodes retain their uniqueness', function() {\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        return React.createElement(\"div\", null, this.props.children, React.createElement(\"span\", null));\n      }\n    });\n\n    var TestContainer = React.createClass({displayName: \"TestContainer\",\n\n      render: function() {\n        return (\n          React.createElement(TestComponent, null, \n            React.createElement(\"div\", null), \n            'second'\n          )\n        );\n      }\n\n    });\n\n    expect(function() {\n\n      React.render(React.createElement(TestContainer, null), document.createElement('div'));\n\n    }).not.toThrow();\n  });\n\n  it('should retain key during updates in composite components', function() {\n\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        return React.createElement(\"div\", null, this.props.children);\n      }\n    });\n\n    var TestContainer = React.createClass({displayName: \"TestContainer\",\n\n      getInitialState: function() {\n        return { swapped: false };\n      },\n\n      swap: function() {\n        this.setState({ swapped: true });\n      },\n\n      render: function() {\n        return (\n          React.createElement(TestComponent, null, \n            this.state.swapped ? this.props.second : this.props.first, \n            this.state.swapped ? this.props.first : this.props.second\n          )\n        );\n      }\n\n    });\n\n    var instance0 = React.createElement(\"span\", {key: \"A\"});\n    var instance1 = React.createElement(\"span\", {key: \"B\"});\n\n    var wrapped = React.createElement(TestContainer, {first: instance0, second: instance1});\n\n    wrapped = React.render(wrapped, document.createElement('div'));\n\n    var beforeID = ReactMount.getID(wrapped.getDOMNode().firstChild);\n\n    wrapped.swap();\n\n    var afterID = ReactMount.getID(wrapped.getDOMNode().firstChild);\n\n    expect(beforeID).not.toEqual(afterID);\n\n  });\n\n  it('should not allow implicit and explicit keys to collide', function() {\n    var component =\n      React.createElement(\"div\", null, \n        React.createElement(\"span\", null), \n        React.createElement(\"span\", {key: \"0\"})\n      );\n\n    expect(function() {\n      React.render(component, document.createElement('div'));\n    }).not.toThrow();\n  });\n\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactIdentity-test\", module);\n",
"core/__tests__/ReactInstanceHandles-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar ReactMount = require(\"../../ReactMount\");\n\n/**\n * Ensure that all callbacks are invoked, passing this unique argument.\n */\nvar ARG = {arg: true};\nvar ARG2 = {arg2: true};\n\nvar ChildComponent = React.createClass({displayName: \"ChildComponent\",\n  render: function() {\n    return (\n      React.createElement(\"div\", {ref: \"DIV\"}, \n        React.createElement(\"div\", {ref: \"DIV_1\"}), \n        React.createElement(\"div\", {ref: \"DIV_2\"})\n      )\n    );\n  }\n});\n\nvar ParentComponent = React.createClass({displayName: \"ParentComponent\",\n  render: function() {\n    return (\n      React.createElement(\"div\", {ref: \"P\"}, \n        React.createElement(\"div\", {ref: \"P_P1\"}, \n          React.createElement(ChildComponent, {ref: \"P_P1_C1\"}), \n          React.createElement(ChildComponent, {ref: \"P_P1_C2\"})\n        ), \n        React.createElement(\"div\", {ref: \"P_OneOff\"})\n      )\n    );\n  }\n});\n\nfunction renderParentIntoDocument() {\n  return ReactTestUtils.renderIntoDocument(React.createElement(ParentComponent, null));\n}\n\ndescribe('ReactInstanceHandles', function() {\n  var ReactInstanceHandles;\n\n  var aggregatedArgs;\n  function argAggregator(id, isUp, arg) {\n    aggregatedArgs.push({\n      id: id,\n      isUp: isUp,\n      arg: arg\n    });\n  }\n\n  beforeEach(function() {\n    ReactInstanceHandles = require(\"../../ReactInstanceHandles\");\n    aggregatedArgs = [];\n  });\n\n  describe('isRenderedByReact', function() {\n    it('should not crash on text nodes', function() {\n      expect(function() {\n        ReactMount.isRenderedByReact(document.createTextNode('yolo'));\n      }).not.toThrow();\n    });\n  });\n\n  describe('findComponentRoot', function() {\n    it('should find the correct node with prefix sibling IDs', function() {\n      var parentNode = document.createElement('div');\n      var childNodeA = document.createElement('div');\n      var childNodeB = document.createElement('div');\n      parentNode.appendChild(childNodeA);\n      parentNode.appendChild(childNodeB);\n\n      ReactMount.setID(parentNode, '.0');\n      ReactMount.setID(childNodeA, '.0.0');\n      ReactMount.setID(childNodeB, '.0.0:1');\n\n      expect(\n        ReactMount.findComponentRoot(\n          parentNode,\n          ReactMount.getID(childNodeB)\n        )\n      ).toBe(childNodeB);\n    });\n\n    it('should work around unidentified nodes', function() {\n      var parentNode = document.createElement('div');\n      var childNodeA = document.createElement('div');\n      var childNodeB = document.createElement('div');\n      parentNode.appendChild(childNodeA);\n      parentNode.appendChild(childNodeB);\n\n      ReactMount.setID(parentNode, '.0');\n      // No ID on `childNodeA`.\n      ReactMount.setID(childNodeB, '.0.0:1');\n\n      expect(\n        ReactMount.findComponentRoot(\n          parentNode,\n          ReactMount.getID(childNodeB)\n        )\n      ).toBe(childNodeB);\n    });\n\n    it('should throw if a rendered element cannot be found', function() {\n      var parentNode = document.createElement('table');\n      var childNodeA = document.createElement('tbody');\n      var childNodeB = document.createElement('tr');\n      parentNode.appendChild(childNodeA);\n      childNodeA.appendChild(childNodeB);\n\n      ReactMount.setID(parentNode, '.0');\n      // No ID on `childNodeA`, it was \"rendered by the browser\".\n      ReactMount.setID(childNodeB, '.0.1:0');\n\n      expect(ReactMount.findComponentRoot(\n        parentNode,\n        ReactMount.getID(childNodeB)\n      )).toBe(childNodeB);\n\n      expect(function() {\n        ReactMount.findComponentRoot(\n          parentNode,\n          ReactMount.getID(childNodeB) + \":junk\"\n        );\n      }).toThrow(\n        'Invariant Violation: findComponentRoot(..., .0.1:0:junk): ' +\n        'Unable to find element. This probably means the DOM was ' +\n        'unexpectedly mutated (e.g., by the browser), usually due to ' +\n        'forgetting a <tbody> when using tables, nesting tags ' +\n        'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +\n        'parent. ' +\n        'Try inspecting the child nodes of the element with React ID `.0`.'\n      );\n    });\n  });\n\n  describe('getReactRootIDFromNodeID', function() {\n    it('should support strings', function() {\n      var test = '.s_0_1.0..1';\n      var expected = '.s_0_1';\n      var actual = ReactInstanceHandles.getReactRootIDFromNodeID(test);\n      expect(actual).toEqual(expected);\n    });\n  });\n\n  describe('getReactRootIDFromNodeID', function() {\n    it('should return null for invalid IDs', function() {\n      var getReactRootIDFromNodeID = (\n        ReactInstanceHandles.getReactRootIDFromNodeID\n      );\n\n      expect(getReactRootIDFromNodeID(null)).toEqual(null);\n      expect(getReactRootIDFromNodeID('.')).toEqual(null);\n      expect(getReactRootIDFromNodeID('#')).toEqual(null);\n    });\n  });\n\n  describe('traverseTwoPhase', function() {\n    it(\"should not traverse when traversing outside DOM\", function() {\n      var targetID = '';\n      var expectedAggregation = [];\n      ReactInstanceHandles.traverseTwoPhase(targetID, argAggregator, ARG);\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should traverse two phase across component boundary\", function() {\n      var parent = renderParentIntoDocument();\n      var targetID = parent.refs.P_P1_C1.refs.DIV_1._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P._rootNodeID, isUp: false, arg: ARG},\n        {id: parent.refs.P_P1._rootNodeID, isUp: false, arg: ARG},\n        {id: parent.refs.P_P1_C1.refs.DIV._rootNodeID, isUp: false, arg: ARG},\n        {id: parent.refs.P_P1_C1.refs.DIV_1._rootNodeID, isUp: false, arg: ARG},\n\n        {id: parent.refs.P_P1_C1.refs.DIV_1._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P_P1_C1.refs.DIV._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P_P1._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P._rootNodeID, isUp: true, arg: ARG}\n      ];\n      ReactInstanceHandles.traverseTwoPhase(targetID, argAggregator, ARG);\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should traverse two phase at shallowest node\", function() {\n      var parent = renderParentIntoDocument();\n      var targetID = parent.refs.P._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P._rootNodeID, isUp: false, arg: ARG},\n        {id: parent.refs.P._rootNodeID, isUp: true, arg: ARG}\n      ];\n      ReactInstanceHandles.traverseTwoPhase(targetID, argAggregator, ARG);\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n  });\n\n  describe('traverseEnterLeave', function() {\n    it(\"should not traverse when enter/leaving outside DOM\", function() {\n      var targetID = '';\n      var expectedAggregation = [];\n      ReactInstanceHandles.traverseEnterLeave(\n        targetID, targetID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should not traverse if enter/leave the same node\", function() {\n      var parent = renderParentIntoDocument();\n      var leaveID = parent.refs.P_P1_C1.refs.DIV_1._rootNodeID;\n      var enterID = parent.refs.P_P1_C1.refs.DIV_1._rootNodeID;\n      var expectedAggregation = [];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should traverse enter/leave to sibling - avoids parent\", function() {\n      var parent = renderParentIntoDocument();\n      var leaveID = parent.refs.P_P1_C1.refs.DIV_1._rootNodeID;\n      var enterID = parent.refs.P_P1_C1.refs.DIV_2._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P_P1_C1.refs.DIV_1._rootNodeID, isUp: true, arg: ARG},\n        // enter/leave shouldn't fire antyhing on the parent\n        {id: parent.refs.P_P1_C1.refs.DIV_2._rootNodeID, isUp: false, arg: ARG2}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should traverse enter/leave to parent - avoids parent\", function() {\n      var parent = renderParentIntoDocument();\n      var leaveID = parent.refs.P_P1_C1.refs.DIV_1._rootNodeID;\n      var enterID = parent.refs.P_P1_C1.refs.DIV._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P_P1_C1.refs.DIV_1._rootNodeID, isUp: true, arg: ARG}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should enter from the window\", function() {\n      var parent = renderParentIntoDocument();\n      var leaveID = ''; // From the window or outside of the React sandbox.\n      var enterID = parent.refs.P_P1_C1.refs.DIV._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P._rootNodeID, isUp: false, arg: ARG2},\n        {id: parent.refs.P_P1._rootNodeID, isUp: false, arg: ARG2},\n        {id: parent.refs.P_P1_C1.refs.DIV._rootNodeID, isUp: false, arg: ARG2}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should enter from the window to the shallowest\", function() {\n      var parent = renderParentIntoDocument();\n      var leaveID = ''; // From the window or outside of the React sandbox.\n      var enterID = parent.refs.P._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P._rootNodeID, isUp: false, arg: ARG2}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should leave to the window\", function() {\n      var parent = renderParentIntoDocument();\n      var enterID = ''; // From the window or outside of the React sandbox.\n      var leaveID = parent.refs.P_P1_C1.refs.DIV._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P_P1_C1.refs.DIV._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P_P1._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P._rootNodeID, isUp: true, arg: ARG}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n\n    it(\"should leave to the window from the shallowest\", function() {\n      var parent = renderParentIntoDocument();\n      var enterID = ''; // From the window or outside of the React sandbox.\n      var leaveID = parent.refs.P_P1_C1.refs.DIV._rootNodeID;\n      var expectedAggregation = [\n        {id: parent.refs.P_P1_C1.refs.DIV._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P_P1._rootNodeID, isUp: true, arg: ARG},\n        {id: parent.refs.P._rootNodeID, isUp: true, arg: ARG}\n      ];\n      ReactInstanceHandles.traverseEnterLeave(\n        leaveID, enterID, argAggregator, ARG, ARG2\n      );\n      expect(aggregatedArgs).toEqual(expectedAggregation);\n    });\n  });\n\n  describe('getNextDescendantID', function() {\n    it(\"should return next descendent from window\", function() {\n      var parent = renderParentIntoDocument();\n      expect(\n        ReactInstanceHandles._getNextDescendantID(\n          '',\n          parent.refs.P_P1._rootNodeID\n        )\n      ).toBe(parent.refs.P._rootNodeID);\n    });\n\n    it(\"should return window for next descendent towards window\", function() {\n      expect(ReactInstanceHandles._getNextDescendantID('', '')).toBe('');\n    });\n\n    it(\"should return self for next descendent towards self\", function() {\n      var parent = renderParentIntoDocument();\n      expect(\n        ReactInstanceHandles._getNextDescendantID(\n          parent.refs.P_P1._rootNodeID,\n          parent.refs.P_P1._rootNodeID\n        )\n      ).toBe(parent.refs.P_P1._rootNodeID);\n    });\n  });\n\n  describe('getFirstCommonAncestorID', function() {\n    it(\"should determine the first common ancestor correctly\", function() {\n      var parent = renderParentIntoDocument();\n      var ancestors = [\n        // Common ancestor from window to deep element is ''.\n        { one: {_rootNodeID: ''},\n          two: parent.refs.P_P1_C1.refs.DIV_1,\n          com: {_rootNodeID: ''}\n        },\n        // Same as previous - reversed direction.\n        { one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: {_rootNodeID: ''},\n          com: {_rootNodeID: ''}\n        },\n        // Common ancestor from window to shallow id is ''.\n        { one: parent.refs.P,\n          two: {_rootNodeID: ''},\n          com: {_rootNodeID: ''}\n        },\n        // Common ancestor with self is self.\n        { one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_P1_C1.refs.DIV_1,\n          com: parent.refs.P_P1_C1.refs.DIV_1\n        },\n        // Common ancestor with self is self - even if topmost DOM.\n        { one: parent.refs.P, two: parent.refs.P, com: parent.refs.P },\n        // Siblings\n        {\n          one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_P1_C1.refs.DIV_2,\n          com: parent.refs.P_P1_C1.refs.DIV\n        },\n        // Common ancestor with parent is the parent.\n        {\n          one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_P1_C1.refs.DIV,\n          com: parent.refs.P_P1_C1.refs.DIV\n        },\n        // Common ancestor with grandparent is the grandparent.\n        {\n          one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_P1_C1,\n          com: parent.refs.P_P1_C1\n        },\n        // Grantparent across subcomponent boundaries.\n        {\n          one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_P1_C2.refs.DIV_1,\n          com: parent.refs.P_P1\n        },\n        // Something deep with something one-off.\n        {\n          one: parent.refs.P_P1_C1.refs.DIV_1,\n          two: parent.refs.P_OneOff,\n          com: parent.refs.P\n        }\n      ];\n      var i;\n      for (i = 0; i < ancestors.length; i++) {\n        var plan = ancestors[i];\n        var firstCommon = ReactInstanceHandles._getFirstCommonAncestorID(\n          plan.one._rootNodeID,\n          plan.two._rootNodeID\n        );\n        expect(firstCommon).toBe(plan.com._rootNodeID);\n      }\n    });\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactInstanceHandles-test\", module);\n",
"core/__tests__/ReactMultiChild-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar mocks = require(\"../../mocks\");\n\ndescribe('ReactMultiChild', function() {\n  var React;\n\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    React = require(\"../../React\");\n  });\n\n  describe('reconciliation', function() {\n    it('should update children when possible', function() {\n      var container = document.createElement('div');\n\n      var mockMount = mocks.getMockFunction();\n      var mockUpdate = mocks.getMockFunction();\n      var mockUnmount = mocks.getMockFunction();\n\n      var MockComponent = React.createClass({displayName: \"MockComponent\",\n        componentDidMount: mockMount,\n        componentDidUpdate: mockUpdate,\n        componentWillUnmount: mockUnmount,\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n\n      expect(mockMount.mock.calls.length).toBe(0);\n      expect(mockUpdate.mock.calls.length).toBe(0);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(MockComponent, null)), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUpdate.mock.calls.length).toBe(0);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(MockComponent, null)), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUpdate.mock.calls.length).toBe(1);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n    });\n\n    it('should replace children with different constructors', function() {\n      var container = document.createElement('div');\n\n      var mockMount = mocks.getMockFunction();\n      var mockUnmount = mocks.getMockFunction();\n\n      var MockComponent = React.createClass({displayName: \"MockComponent\",\n        componentDidMount: mockMount,\n        componentWillUnmount: mockUnmount,\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n\n      expect(mockMount.mock.calls.length).toBe(0);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(MockComponent, null)), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(\"span\", null)), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUnmount.mock.calls.length).toBe(1);\n    });\n\n    it('should replace children with different owners', function() {\n      var container = document.createElement('div');\n\n      var mockMount = mocks.getMockFunction();\n      var mockUnmount = mocks.getMockFunction();\n\n      var MockComponent = React.createClass({displayName: \"MockComponent\",\n        componentDidMount: mockMount,\n        componentWillUnmount: mockUnmount,\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n\n      var WrapperComponent = React.createClass({displayName: \"WrapperComponent\",\n        render: function() {\n          return this.props.children || React.createElement(MockComponent, null);\n        }\n      });\n\n      expect(mockMount.mock.calls.length).toBe(0);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(WrapperComponent, null), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(\n        React.createElement(WrapperComponent, null, React.createElement(MockComponent, null)),\n        container\n      );\n\n      expect(mockMount.mock.calls.length).toBe(2);\n      expect(mockUnmount.mock.calls.length).toBe(1);\n    });\n\n    it('should replace children with different keys', function() {\n      var container = document.createElement('div');\n\n      var mockMount = mocks.getMockFunction();\n      var mockUnmount = mocks.getMockFunction();\n\n      var MockComponent = React.createClass({displayName: \"MockComponent\",\n        componentDidMount: mockMount,\n        componentWillUnmount: mockUnmount,\n        render: function() {\n          return React.createElement(\"span\", null);\n        }\n      });\n\n      expect(mockMount.mock.calls.length).toBe(0);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(MockComponent, {key: \"A\"})), container);\n\n      expect(mockMount.mock.calls.length).toBe(1);\n      expect(mockUnmount.mock.calls.length).toBe(0);\n\n      React.render(React.createElement(\"div\", null, React.createElement(MockComponent, {key: \"B\"})), container);\n\n      expect(mockMount.mock.calls.length).toBe(2);\n      expect(mockUnmount.mock.calls.length).toBe(1);\n    });\n  });\n\n  describe('innerHTML', function() {\n    var setInnerHTML;\n\n    // Only run this suite if `Element.prototype.innerHTML` can be spied on.\n    var innerHTMLDescriptor = Object.getOwnPropertyDescriptor(\n      Element.prototype,\n      'innerHTML'\n    );\n    if (!innerHTMLDescriptor) {\n      return;\n    }\n\n    beforeEach(function() {\n      Object.defineProperty(Element.prototype, 'innerHTML', {\n        set: setInnerHTML = jasmine.createSpy().andCallFake(\n          innerHTMLDescriptor.set\n        )\n      });\n    });\n\n    it('should only set `innerHTML` once on update', function() {\n      var container = document.createElement('div');\n\n      React.render(\n        React.createElement(\"div\", null, \n          React.createElement(\"p\", null, React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null))\n        ),\n        container\n      );\n      // Warm the cache used by `getMarkupWrap`.\n      React.render(\n        React.createElement(\"div\", null, \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null))\n        ),\n        container\n      );\n      expect(setInnerHTML).toHaveBeenCalled();\n      var callCountOnMount = setInnerHTML.callCount;\n\n      React.render(\n        React.createElement(\"div\", null, \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null), React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null), React.createElement(\"span\", null)), \n          React.createElement(\"p\", null, React.createElement(\"span\", null), React.createElement(\"span\", null), React.createElement(\"span\", null))\n        ),\n        container\n      );\n      expect(setInnerHTML.callCount).toBe(callCountOnMount + 1);\n    });\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactMultiChild-test\", module);\n",
"core/__tests__/ReactMultiChildReconcile-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\");\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar ReactMount = require(\"../../ReactMount\");\n\nvar mapObject = require(\"../../mapObject\");\n\nvar stripEmptyValues = function(obj) {\n  var ret = {};\n  var name;\n  for (name in obj) {\n    if (!obj.hasOwnProperty(name)) {\n      continue;\n    }\n    if (obj[name] !== null && obj[name] !== undefined) {\n      ret[name] = obj[name];\n    }\n  }\n  return ret;\n};\n\n/**\n * Child key names are wrapped like '.$key:0'. We strip the extra chars out\n * here. This relies on an implementation detail of the rendering system.\n */\nvar getOriginalKey = function(childName) {\n  var match = childName.match(/^\\.\\$([^.]+)\\:0$/);\n  expect(match).not.toBeNull();\n  return match[1];\n};\n\n/**\n * Contains internal static internal state in order to test that updates to\n * existing children won't reinitialize components, when moving children -\n * reusing existing DOM/memory resources.\n */\nvar StatusDisplay = React.createClass({displayName: \"StatusDisplay\",\n  getInitialState: function() {\n    return { internalState: Math.random() };\n  },\n\n  getStatus: function() {\n    return this.props.status;\n  },\n\n  getInternalState: function() {\n    return this.state.internalState;\n  },\n\n  render: function() {\n    return (\n      React.createElement(\"div\", null, \n        this.state.internalState\n      )\n    );\n  }\n});\n\n/**\n * Displays friends statuses.\n */\nvar FriendsStatusDisplay = React.createClass({displayName: \"FriendsStatusDisplay\",\n  /**\n   * Retrieves the rendered children in a nice format for comparing to the input\n   * `this.props.usernameToStatus`. Gets the order directly from each rendered\n   * child's `index` field. Refs are not maintained in the rendered order, and\n   * neither is `this._renderedChildren` (surprisingly).\n   */\n  getStatusDisplays: function() {\n    var name;\n    var orderOfUsernames = [];\n    var statusDisplays = this._renderedComponent._renderedChildren;\n    for (name in statusDisplays) {\n      var child = statusDisplays[name];\n      var isPresent = !!child;\n      if (isPresent) {\n        orderOfUsernames[child._mountIndex] = getOriginalKey(name);\n      }\n    }\n    var res = {};\n    var i;\n    for (i = 0; i < orderOfUsernames.length; i++) {\n      var key = orderOfUsernames[i];\n      res[key] = this.refs[key];\n    }\n    return res;\n  },\n  render: function() {\n    var children = null;\n    var key;\n    for (key in this.props.usernameToStatus) {\n      var status = this.props.usernameToStatus[key];\n      children = children || {};\n      children[key] = !status ? null :\n          React.createElement(StatusDisplay, {ref: key, status: status});\n    }\n    return (\n      React.createElement(\"div\", null, \n        children\n      )\n    );\n  }\n});\n\n\nfunction getInteralStateByUserName(statusDisplays) {\n  return mapObject(statusDisplays, function(statusDisplay, key) {\n    return statusDisplay.getInternalState();\n  });\n}\n\n/**\n * Verifies that the rendered `StatusDisplay` instances match the `props` that\n * were responsible for allocating them. Checks the content of the user's status\n * message as well as the order of them.\n */\nfunction verifyStatuses(statusDisplays, props) {\n  var nonEmptyStatusDisplays = stripEmptyValues(statusDisplays);\n  var nonEmptyStatusProps = stripEmptyValues(props.usernameToStatus);\n  var username;\n  expect(Object.keys(nonEmptyStatusDisplays).length)\n    .toEqual(Object.keys(nonEmptyStatusProps).length);\n  for (username in nonEmptyStatusDisplays) {\n    if (!nonEmptyStatusDisplays.hasOwnProperty(username)) {\n      continue;\n    }\n    expect(nonEmptyStatusDisplays[username].getStatus())\n      .toEqual(nonEmptyStatusProps[username]);\n  }\n\n  // now go the other way to make sure we got them all.\n  for (username in nonEmptyStatusProps) {\n    if (!nonEmptyStatusProps.hasOwnProperty(username)) {\n      continue;\n    }\n    expect(nonEmptyStatusDisplays[username].getStatus())\n      .toEqual(nonEmptyStatusProps[username]);\n  }\n\n  expect(Object.keys(nonEmptyStatusDisplays))\n      .toEqual(Object.keys(nonEmptyStatusProps));\n}\n\n/**\n * For all statusDisplays that existed in the previous iteration of the\n * sequence, verify that the state has been preserved. `StatusDisplay` contains\n * a unique number that allows us to track internal state across ordering\n * movements.\n */\nfunction verifyStatesPreserved(lastInternalStates, statusDisplays) {\n  var key;\n  for (key in statusDisplays) {\n    if (!statusDisplays.hasOwnProperty(key)) {\n      continue;\n    }\n    if (lastInternalStates[key]) {\n      expect(lastInternalStates[key])\n        .toEqual(statusDisplays[key].getInternalState());\n    }\n  }\n}\n\n\n/**\n * Verifies that the internal representation of a set of `renderedChildren`\n * accurately reflects what is in the DOM.\n */\nfunction verifyDomOrderingAccurate(parentInstance, statusDisplays) {\n  var containerNode = parentInstance.getDOMNode();\n  var statusDisplayNodes = containerNode.childNodes;\n  var i;\n  var orderedDomIds = [];\n  for (i=0; i < statusDisplayNodes.length; i++) {\n    orderedDomIds.push(ReactMount.getID(statusDisplayNodes[i]));\n  }\n\n  var orderedLogicalIds = [];\n  var username;\n  for (username in statusDisplays) {\n    if (!statusDisplays.hasOwnProperty(username)) {\n      continue;\n    }\n    var statusDisplay = statusDisplays[username];\n    orderedLogicalIds.push(statusDisplay._rootNodeID);\n  }\n  expect(orderedDomIds).toEqual(orderedLogicalIds);\n}\n\n/**\n * Todo: Check that internal state is preserved across transitions\n */\nfunction testPropsSequence(sequence) {\n  var i;\n  var parentInstance = ReactTestUtils.renderIntoDocument(\n    React.createElement(FriendsStatusDisplay, React.__spread({},  sequence[0]))\n  );\n  var statusDisplays = parentInstance.getStatusDisplays();\n  var lastInternalStates = getInteralStateByUserName(statusDisplays);\n  verifyStatuses(statusDisplays, sequence[0]);\n\n  for (i = 1; i < sequence.length; i++) {\n    parentInstance.replaceProps(sequence[i]);\n    statusDisplays = parentInstance.getStatusDisplays();\n    verifyStatuses(statusDisplays, sequence[i]);\n    verifyStatesPreserved(lastInternalStates, statusDisplays);\n    verifyDomOrderingAccurate(parentInstance, statusDisplays);\n\n    lastInternalStates = getInteralStateByUserName(statusDisplays);\n  }\n}\n\ndescribe('ReactMultiChildReconcile', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n  });\n\n  it('should reset internal state if removed then readded', function() {\n    // Test basics.\n    var props = {\n      usernameToStatus: {\n        jcw: 'jcwStatus'\n      }\n    };\n\n    var parentInstance = ReactTestUtils.renderIntoDocument(\n      React.createElement(FriendsStatusDisplay, React.__spread({},  props))\n    );\n    var statusDisplays = parentInstance.getStatusDisplays();\n    var startingInternalState = statusDisplays.jcw.getInternalState();\n\n    // Now remove the child.\n    parentInstance.replaceProps({ usernameToStatus: {} });\n    statusDisplays = parentInstance.getStatusDisplays();\n    expect(statusDisplays.jcw).toBeFalsy();\n\n    // Now reset the props that cause there to be a child\n    parentInstance.replaceProps(props);\n    statusDisplays = parentInstance.getStatusDisplays();\n    expect(statusDisplays.jcw).toBeTruthy();\n    expect(statusDisplays.jcw.getInternalState())\n        .toNotBe(startingInternalState);\n  });\n\n  it('should create unique identity', function() {\n    // Test basics.\n    var usernameToStatus = {\n      jcw: 'jcwStatus',\n      awalke: 'awalkeStatus',\n      bob: 'bobStatus'\n    };\n\n    testPropsSequence([ { usernameToStatus: usernameToStatus } ]);\n  });\n\n  it('should preserve order if children order has not changed', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should transition from zero to one children correctly', function() {\n    var PROPS_SEQUENCE = [\n      { usernameToStatus: {} },\n      {\n        usernameToStatus: {\n          first: 'firstStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should transition from one to zero children correctly', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          first: 'firstStatus'\n        }\n      },\n      { usernameToStatus: {} }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should transition from one child to null children', function() {\n    testPropsSequence([\n      {\n        usernameToStatus: {\n          first: 'firstStatus'\n        }\n      },\n      { }\n    ]);\n  });\n\n  it('should transition from null children to one child', function() {\n    testPropsSequence([\n      { },\n      {\n        usernameToStatus: {\n          first: 'firstStatus'\n        }\n      }\n    ]);\n  });\n\n  it('should transition from zero children to null children', function() {\n    testPropsSequence([\n      {\n        usernameToStatus: { }\n      },\n      { }\n    ]);\n  });\n\n  it('should transition from null children to zero children', function() {\n    testPropsSequence([\n      { },\n      {\n        usernameToStatus: { }\n      }\n    ]);\n  });\n\n\n\n  /**\n   * `FriendsStatusDisplay` renders nulls as empty children (it's a convention\n   * of `FriendsStatusDisplay`, nothing related to React or these test cases.\n   */\n  it('should remove nulled out children at the beginning', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: null,\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should remove nulled out children at the end', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          jordanjcw: null\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should reverse the order of two children', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userTwo: 'userTwoStatus',\n          userOne: 'userOneStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should reverse the order of more than two children', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userThree: 'userThreeStatus',\n          userTwo: 'userTwoStatus',\n          userOne: 'userOneStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should cycle order correctly', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus'\n        }\n      },\n      {\n        usernameToStatus: {               // Full circle!\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should cycle order correctly in the other direction', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus',\n          userOne: 'userOneStatus'\n        }\n      },\n      {\n        usernameToStatus: {               // Full circle!\n          userOne: 'userOneStatus',\n          userTwo: 'userTwoStatus',\n          userThree: 'userThreeStatus',\n          userFour: 'userFourStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n\n  it('should remove nulled out children and ignore ' +\n     'new null children', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jordanjcw: 'jordanjcwstatus2',\n          jcw: null,\n          another: null\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should remove nulled out children and reorder remaining', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus',\n          john: 'johnStatus',  // john will go away\n          joe: 'joeStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jordanjcw: 'jordanjcwStatus',\n          joe: 'joeStatus',\n          jcw: 'jcwStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should append children to the end', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus',\n          jordanjcwnew: 'jordanjcwnewStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should append multiple children to the end', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus',\n          jordanjcwnew: 'jordanjcwnewStatus',\n          jordanjcwnew2: 'jordanjcwnewStatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should prepend children to the beginning', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          newUsername: 'newUsernameStatus',\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should prepend multiple children to the beginning', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          newNewUsername: 'newNewUsernameStatus',\n          newUsername: 'newUsernameStatus',\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should not prepend an empty child to the beginning', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          emptyUsername: null,\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should not append an empty child to the end', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus',\n          emptyUsername: null\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should not insert empty children in the middle', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          skipOverMe: null,\n          skipOverMeToo: null,\n          definitelySkipOverMe: null,\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should insert one new child in the middle', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          insertThis: 'insertThisStatus',\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should insert multiple new truthy children in the middle', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          insertThis: 'insertThisStatus',\n          insertThisToo: 'insertThisTooStatus',\n          definitelyInsertThisToo: 'definitelyInsertThisTooStatus',\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n\n  it('should insert non-empty children in middle where nulls were', function() {\n    var PROPS_SEQUENCE = [\n      {\n        usernameToStatus: {\n          jcw: 'jcwStatus',\n          insertThis: null,\n          insertThisToo: null,\n          definitelyInsertThisToo: null,\n          jordanjcw: 'jordanjcwStatus'\n        }\n      },\n      {\n        usernameToStatus: {\n          jcw: 'jcwstatus2',\n          insertThis: 'insertThisStatus',\n          insertThisToo: 'insertThisTooStatus',\n          definitelyInsertThisToo: 'definitelyInsertThisTooStatus',\n          jordanjcw: 'jordanjcwstatus2'\n        }\n      }\n    ];\n    testPropsSequence(PROPS_SEQUENCE);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactMultiChildReconcile-test\", module);\n",
"core/__tests__/ReactMultiChildText-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\");\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\n\nvar reactComponentExpect = require(\"../../reactComponentExpect\");\n\n// Helpers\nvar testAllPermutations = function(testCases) {\n  for (var i = 0; i < testCases.length; i += 2) {\n    var renderWithChildren = testCases[i];\n    var expectedResultAfterRender = testCases[i + 1];\n\n    for (var j = 0; j < testCases.length; j += 2) {\n      var updateWithChildren = testCases[j];\n      var expectedResultAfterUpdate = testCases[j + 1];\n\n      var d = renderChildren(renderWithChildren);\n      expectChildren(d, expectedResultAfterRender);\n\n      updateChildren(d, updateWithChildren);\n      expectChildren(d, expectedResultAfterUpdate);\n    }\n  }\n};\n\nvar renderChildren = function(children) {\n  return ReactTestUtils.renderIntoDocument(\n    React.createElement(\"div\", null, children)\n  );\n};\n\nvar updateChildren = function(d, children) {\n  d.replaceProps({children: children});\n};\n\nvar expectChildren = function(d, children) {\n  var textNode;\n  if (typeof children === 'string') {\n    textNode = d.getDOMNode().firstChild;\n\n    if (children === '') {\n      expect(textNode != null).toBe(false);\n    } else {\n      expect(textNode != null).toBe(true);\n      expect(textNode.nodeType).toBe(3);\n      expect(textNode.data).toBe('' + children);\n    }\n  } else {\n    expect(d.getDOMNode().childNodes.length).toBe(children.length);\n\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n\n      if (typeof child === 'string') {\n        reactComponentExpect(d)\n          .expectRenderedChildAt(i)\n          .toBeTextComponent()\n          .instance();\n\n        textNode = d.getDOMNode().childNodes[i].firstChild;\n\n        if (child === '') {\n          expect(textNode != null).toBe(false);\n        } else {\n          expect(textNode != null).toBe(true);\n          expect(textNode.nodeType).toBe(3);\n          expect(textNode.data).toBe('' + child);\n        }\n      } else {\n        var elementDOMNode =\n          reactComponentExpect(d)\n            .expectRenderedChildAt(i)\n            .toBeComponentOfType('div')\n            .instance()\n            .getDOMNode();\n\n        expect(elementDOMNode.tagName).toBe('DIV');\n      }\n    }\n  }\n};\n\n\n/**\n * ReactMultiChild DOM integration test. In ReactDOM components, we make sure\n * that single children that are strings are treated as \"content\" which is much\n * faster to render and update.\n */\ndescribe('ReactMultiChildText', function() {\n  it('should correctly handle all possible children for render and update', function() {\n    testAllPermutations([\n      // basic values\n      undefined, [],\n      null, [],\n      false, [],\n      true, [],\n      0, '0',\n      1.2, '1.2',\n      '', '',\n      'foo', 'foo',\n\n      [], [],\n      [undefined], [],\n      [null], [],\n      [false], [],\n      [true], [],\n      [0], ['0'],\n      [1.2], ['1.2'],\n      [''], [''],\n      ['foo'], ['foo'],\n      [React.createElement(\"div\", null)], [React.createElement(\"div\", null)],\n\n      // two adjacent values\n      [true, 0], ['0'],\n      [0, 0], ['0', '0'],\n      [1.2, 0], ['1.2', '0'],\n      [0, ''], ['0', ''],\n      ['foo', 0], ['foo', '0'],\n      [0, React.createElement(\"div\", null)], ['0', React.createElement(\"div\", null)],\n\n      [true, 1.2], ['1.2'],\n      [1.2, 0], ['1.2', '0'],\n      [1.2, 1.2], ['1.2', '1.2'],\n      [1.2, ''], ['1.2', ''],\n      ['foo', 1.2], ['foo', '1.2'],\n      [1.2, React.createElement(\"div\", null)], ['1.2', React.createElement(\"div\", null)],\n\n      [true, ''], [''],\n      ['', 0], ['', '0'],\n      [1.2, ''], ['1.2', ''],\n      ['', ''], ['', ''],\n      ['foo', ''], ['foo', ''],\n      ['', React.createElement(\"div\", null)], ['', React.createElement(\"div\", null)],\n\n      [true, 'foo'], ['foo'],\n      ['foo', 0], ['foo', '0'],\n      [1.2, 'foo'], ['1.2', 'foo'],\n      ['foo', ''], ['foo', ''],\n      ['foo', 'foo'], ['foo', 'foo'],\n      ['foo', React.createElement(\"div\", null)], ['foo', React.createElement(\"div\", null)],\n\n      // values separated by an element\n      [true, React.createElement(\"div\", null), true], [React.createElement(\"div\", null)],\n      [1.2, React.createElement(\"div\", null), 1.2], ['1.2', React.createElement(\"div\", null), '1.2'],\n      ['', React.createElement(\"div\", null), ''], ['', React.createElement(\"div\", null), ''],\n      ['foo', React.createElement(\"div\", null), 'foo'], ['foo', React.createElement(\"div\", null), 'foo'],\n\n      [true, 1.2, React.createElement(\"div\", null), '', 'foo'], ['1.2', React.createElement(\"div\", null), '', 'foo'],\n      [1.2, '', React.createElement(\"div\", null), 'foo', true], ['1.2', '', React.createElement(\"div\", null), 'foo'],\n      ['', 'foo', React.createElement(\"div\", null), true, 1.2], ['', 'foo', React.createElement(\"div\", null), '1.2'],\n\n      [true, 1.2, '', React.createElement(\"div\", null), 'foo', true, 1.2], ['1.2', '', React.createElement(\"div\", null), 'foo', '1.2'],\n      ['', 'foo', true, React.createElement(\"div\", null), 1.2, '', 'foo'], ['', 'foo', React.createElement(\"div\", null), '1.2', '', 'foo'],\n\n      // values inside arrays\n      [[true], [true]], [],\n      [[1.2], [1.2]], ['1.2', '1.2'],\n      [[''], ['']], ['', ''],\n      [['foo'], ['foo']], ['foo', 'foo'],\n      [[React.createElement(\"div\", null)], [React.createElement(\"div\", null)]], [React.createElement(\"div\", null), React.createElement(\"div\", null)],\n\n      [[true, 1.2, React.createElement(\"div\", null)], '', 'foo'], ['1.2', React.createElement(\"div\", null), '', 'foo'],\n      [1.2, '', [React.createElement(\"div\", null), 'foo', true]], ['1.2', '', React.createElement(\"div\", null), 'foo'],\n      ['', ['foo', React.createElement(\"div\", null), true], 1.2], ['', 'foo', React.createElement(\"div\", null), '1.2'],\n\n      [true, [1.2, '', React.createElement(\"div\", null), 'foo'], true, 1.2], ['1.2', '', React.createElement(\"div\", null), 'foo', '1.2'],\n      ['', 'foo', [true, React.createElement(\"div\", null), 1.2, ''], 'foo'], ['', 'foo', React.createElement(\"div\", null), '1.2', '', 'foo'],\n\n      // values inside objects\n      [{a: true}, {a: true}], [],\n      [{a: 1.2}, {a: 1.2}], ['1.2', '1.2'],\n      [{a: ''}, {a: ''}], ['', ''],\n      [{a: 'foo'}, {a: 'foo'}], ['foo', 'foo'],\n      [{a: React.createElement(\"div\", null)}, {a: React.createElement(\"div\", null)}], [React.createElement(\"div\", null), React.createElement(\"div\", null)],\n\n      [{a: true, b: 1.2, c: React.createElement(\"div\", null)}, '', 'foo'], ['1.2', React.createElement(\"div\", null), '', 'foo'],\n      [1.2, '', {a: React.createElement(\"div\", null), b: 'foo', c: true}], ['1.2', '', React.createElement(\"div\", null), 'foo'],\n      ['', {a: 'foo', b: React.createElement(\"div\", null), c: true}, 1.2], ['', 'foo', React.createElement(\"div\", null), '1.2'],\n\n      [true, {a: 1.2, b: '', c: React.createElement(\"div\", null), d: 'foo'}, true, 1.2], ['1.2', '', React.createElement(\"div\", null), 'foo', '1.2'],\n      ['', 'foo', {a: true, b: React.createElement(\"div\", null), c: 1.2, d: ''}, 'foo'], ['', 'foo', React.createElement(\"div\", null), '1.2', '', 'foo'],\n\n      // values inside elements\n      [React.createElement(\"div\", null, true, 1.2, React.createElement(\"div\", null)), '', 'foo'], [React.createElement(\"div\", null), '', 'foo'],\n      [1.2, '', React.createElement(\"div\", null, React.createElement(\"div\", null), 'foo', true)], ['1.2', '', React.createElement(\"div\", null)],\n      ['', React.createElement(\"div\", null, 'foo', React.createElement(\"div\", null), true), 1.2], ['', React.createElement(\"div\", null), '1.2'],\n\n      [true, React.createElement(\"div\", null, 1.2, '', React.createElement(\"div\", null), 'foo'), true, 1.2], [React.createElement(\"div\", null), '1.2'],\n      ['', 'foo', React.createElement(\"div\", null, true, React.createElement(\"div\", null), 1.2, ''), 'foo'], ['', 'foo', React.createElement(\"div\", null), 'foo']\n    ]);\n  });\n\n  it('should throw if rendering both HTML and children', function() {\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(\n        React.createElement(\"div\", {dangerouslySetInnerHTML: {_html: 'abcdef'}}, \"ghjkl\")\n      );\n    }).toThrow();\n  });\n\n  it('should render between nested components and inline children', function() {\n    var container = document.createElement('div');\n    React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, React.createElement(\"span\", null), React.createElement(\"span\", null))), container);\n\n    expect(function() {\n      React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, \"A\")), container);\n    }).not.toThrow();\n\n    React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, React.createElement(\"span\", null), React.createElement(\"span\", null))), container);\n\n    expect(function() {\n      React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, ['A'])), container);\n    }).not.toThrow();\n\n    React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, React.createElement(\"span\", null), React.createElement(\"span\", null))), container);\n\n    expect(function() {\n      React.render(React.createElement(\"div\", null, React.createElement(\"h1\", null, ['A', 'B'])), container);\n    }).not.toThrow();\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactMultiChildText-test\", module);\n",
"core/__tests__/ReactPropTransferer-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTestUtils;\nvar reactComponentExpect;\n\nvar TestComponent;\n\ndescribe('ReactPropTransferer', function() {\n\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n\n    // We expect to get a warning from transferPropsTo since it's deprecated\n    spyOn(console, 'warn');\n\n    TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        var result = this.transferPropsTo(\n          React.createElement(\"input\", {\n            className: \"textinput\", \n            style: {display: 'block', color: 'green'}, \n            type: \"text\", \n            value: \"\"}\n          )\n        );\n        expect(console.warn).toHaveBeenCalled();\n        return result;\n      }\n    });\n  });\n\n  it('should leave explicitly specified properties intact', function() {\n    var instance = React.createElement(TestComponent, {type: \"radio\"});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n        .toBeComponentOfType('input')\n        .scalarPropsEqual({\n          className: 'textinput',\n          style: {display: 'block', color: 'green'},\n          type: 'text',\n          value: ''\n        });\n  });\n\n  it('should transfer unspecified properties', function() {\n    var instance = React.createElement(TestComponent, {placeholder: \"Type here...\"});\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n        .toBeComponentOfType('input')\n        .scalarPropsEqual({placeholder: 'Type here...'});\n  });\n\n  it('should transfer using merge strategies', function() {\n    var instance =\n      React.createElement(TestComponent, {\n        className: \"hidden_elem\", \n        style: {width: '100%', display: 'none'}}\n      );\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n        .toBeComponentOfType('input')\n        .scalarPropsEqual({\n          className: 'textinput hidden_elem',\n          style: {\n            color: 'green',\n            display: 'block',\n            width: '100%'\n          }\n        });\n  });\n\n  it('should not transfer children', function() {\n    var ChildrenTestComponent = React.createClass({displayName: \"ChildrenTestComponent\",\n      render: function() {\n        return this.transferPropsTo(React.createElement(\"div\", null));\n      }\n    });\n\n    var instance =\n      React.createElement(ChildrenTestComponent, null, \n        React.createElement(\"span\", null, \"Hello!\")\n      );\n\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    reactComponentExpect(instance)\n      .expectRenderedChild()\n        .toBeDOMComponentWithTag('div')\n        .toBeDOMComponentWithNoChildren();\n  });\n\n  it('should not transfer ref or key', function() {\n    var TestComponent = React.createClass({displayName: \"TestComponent\",\n      render: function() {\n        expect(this.props.ref).toBeUndefined();\n        expect(this.props.key).toBeUndefined();\n        return React.createElement(\"div\", null);\n      }\n    });\n    var OuterTestComponent = React.createClass({displayName: \"OuterTestComponent\",\n      render: function() {\n        return this.transferPropsTo(React.createElement(TestComponent, null));\n      }\n    });\n    var OuterOuterTestComponent = React.createClass({displayName: \"OuterOuterTestComponent\",\n      render: function() {\n        return React.createElement(OuterTestComponent, {ref: \"testref\", key: \"testkey\"});\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(OuterOuterTestComponent, null));\n  });\n\n  it('should not transferPropsTo() a component you don\\'t own', function() {\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return React.createElement(Child, null, React.createElement(\"span\", null));\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return this.transferPropsTo(this.props.children);\n      }\n    });\n\n    expect(function() {\n      ReactTestUtils.renderIntoDocument(React.createElement(Parent, null));\n    }).toThrow(\n      'Invariant Violation: ' +\n      'Child: You can\\'t call transferPropsTo() on a component that you ' +\n      'don\\'t own, span. ' +\n      'This usually means you are calling transferPropsTo() on a component ' +\n      'passed in as props or children.'\n    );\n  });\n\n  it('uses the default instead of the transferred prop (regress)', function() {\n\n    var Child = React.createClass({displayName: \"Child\",\n\n      getDefaultProps: function() {\n        return {\n          x: 2\n        };\n      },\n\n      render: function() {\n        expect(this.props.x).toBe(2);\n        return React.createElement(\"div\", null);\n      }\n\n    });\n\n    var Parent = React.createClass({displayName: \"Parent\",\n\n      render: function() {\n        return this.transferPropsTo(React.createElement(Child, null));\n      }\n\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Parent, {x: 5}));\n\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactPropTransferer-test\", module);\n",
"core/__tests__/ReactPropTypes-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar PropTypes;\nvar React;\nvar ReactPropTypeLocations;\nvar ReactTestUtils;\n\nvar Component;\nvar MyComponent;\nvar requiredMessage =\n  'Required prop `testProp` was not specified in `testComponent`.';\n\nfunction typeCheckFail(declaration, value, message) {\n  var props = {testProp: value};\n  var error = declaration(\n    props,\n    'testProp',\n    'testComponent',\n    ReactPropTypeLocations.prop\n  );\n  expect(error instanceof Error).toBe(true);\n  expect(error.message).toBe(message);\n}\n\nfunction typeCheckPass(declaration, value) {\n  var props = {testProp: value};\n  var error = declaration(\n    props,\n    'testProp',\n    'testComponent',\n    ReactPropTypeLocations.prop\n  );\n  expect(error).toBe(undefined);\n}\n\ndescribe('ReactPropTypes', function() {\n  beforeEach(function() {\n    PropTypes = require(\"../../ReactPropTypes\");\n    React = require(\"../../React\");\n    ReactPropTypeLocations = require(\"../../ReactPropTypeLocations\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n  });\n\n  describe('Primitive Types', function() {\n    it(\"should warn for invalid strings\", function() {\n      typeCheckFail(\n        PropTypes.string,\n        [],\n        'Invalid prop `testProp` of type `array` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n      typeCheckFail(\n        PropTypes.string,\n        false,\n        'Invalid prop `testProp` of type `boolean` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n      typeCheckFail(\n        PropTypes.string,\n        0,\n        'Invalid prop `testProp` of type `number` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n      typeCheckFail(\n        PropTypes.string,\n        {},\n        'Invalid prop `testProp` of type `object` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n    });\n\n    it('should fail date and regexp correctly', function() {\n      typeCheckFail(\n        PropTypes.string,\n        new Date(),\n        'Invalid prop `testProp` of type `date` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n      typeCheckFail(\n        PropTypes.string,\n        /please/,\n        'Invalid prop `testProp` of type `regexp` supplied to ' +\n        '`testComponent`, expected `string`.'\n      );\n    });\n\n    it(\"should not warn for valid values\", function() {\n      typeCheckPass(PropTypes.array, []);\n      typeCheckPass(PropTypes.bool, false);\n      typeCheckPass(PropTypes.func, function() {});\n      typeCheckPass(PropTypes.number, 0);\n      typeCheckPass(PropTypes.string, '');\n      typeCheckPass(PropTypes.object, {});\n      typeCheckPass(PropTypes.object, new Date());\n      typeCheckPass(PropTypes.object, /please/);\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.string, null);\n      typeCheckPass(PropTypes.string, undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(PropTypes.string.isRequired, null, requiredMessage);\n      typeCheckFail(PropTypes.string.isRequired, undefined, requiredMessage);\n    });\n  });\n\n  describe('Any type', function() {\n    it('should should accept any value', function() {\n      typeCheckPass(PropTypes.any, 0);\n      typeCheckPass(PropTypes.any, 'str');\n      typeCheckPass(PropTypes.any, []);\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.any, null);\n      typeCheckPass(PropTypes.any, undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(PropTypes.any.isRequired, null, requiredMessage);\n      typeCheckFail(PropTypes.any.isRequired, undefined, requiredMessage);\n    });\n  });\n\n  describe('ArrayOf Type', function() {\n    it('should support the arrayOf propTypes', function() {\n      typeCheckPass(PropTypes.arrayOf(PropTypes.number), [1, 2, 3]);\n      typeCheckPass(PropTypes.arrayOf(PropTypes.string), ['a', 'b', 'c']);\n      typeCheckPass(PropTypes.arrayOf(PropTypes.oneOf(['a', 'b'])), ['a', 'b']);\n    });\n\n    it('should support arrayOf with complex types', function() {\n      typeCheckPass(\n        PropTypes.arrayOf(PropTypes.shape({a: PropTypes.number.isRequired})),\n        [{a: 1}, {a: 2}]\n      );\n\n      function Thing() {}\n      typeCheckPass(\n        PropTypes.arrayOf(PropTypes.instanceOf(Thing)),\n        [new Thing(), new Thing()]\n      );\n    });\n\n    it('should warn with invalid items in the array', function() {\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number),\n        [1, 2, 'b'],\n        'Invalid prop `2` of type `string` supplied to `testComponent`, ' +\n        'expected `number`.'\n      );\n    });\n\n    it('should warn with invalid complex types', function() {\n      function Thing() {}\n      var name = Thing.name || '<<anonymous>>';\n\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.instanceOf(Thing)),\n        [new Thing(), 'xyz'],\n        'Invalid prop `1` supplied to `testComponent`, expected instance of `' +\n        name + '`.'\n      );\n    });\n\n    it('should warn when passed something other than an array', function() {\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number),\n        {'0': 'maybe-array', length: 1},\n        'Invalid prop `testProp` of type `object` supplied to ' +\n        '`testComponent`, expected an array.'\n      );\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number),\n        123,\n        'Invalid prop `testProp` of type `number` supplied to ' +\n        '`testComponent`, expected an array.'\n      );\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number),\n        'string',\n        'Invalid prop `testProp` of type `string` supplied to ' +\n        '`testComponent`, expected an array.'\n      );\n    });\n\n    it('should not warn when passing an empty array', function() {\n      typeCheckPass(PropTypes.arrayOf(PropTypes.number), []);\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.arrayOf(PropTypes.number), null);\n      typeCheckPass(PropTypes.arrayOf(PropTypes.number), undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number).isRequired,\n        null,\n        requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.arrayOf(PropTypes.number).isRequired,\n        undefined,\n        requiredMessage\n      );\n    });\n  });\n\n  describe('Component Type', function() {\n    beforeEach(function() {\n      Component = React.createClass({displayName: \"Component\",\n        propTypes: {\n          label: PropTypes.element.isRequired\n        },\n\n        render: function() {\n          return React.createElement(\"div\", null, this.props.label);\n        }\n      });\n      spyOn(console, 'warn');\n    });\n\n    it('should support components', function()  {\n      typeCheckPass(PropTypes.element, React.createElement(\"div\", null));\n    });\n\n    it('should not support multiple components or scalar values', function()  {\n      var message = 'Invalid prop `testProp` supplied to `testComponent`, ' +\n        'expected a ReactElement.';\n      typeCheckFail(PropTypes.element, [React.createElement(\"div\", null), React.createElement(\"div\", null)], message);\n      typeCheckFail(PropTypes.element, 123, message);\n      typeCheckFail(PropTypes.element, 'foo', message);\n      typeCheckFail(PropTypes.element, false, message);\n    });\n\n    it('should be able to define a single child as label', function()  {\n      var instance = React.createElement(Component, {label: React.createElement(\"div\", null)});\n      instance = ReactTestUtils.renderIntoDocument(instance);\n\n      expect(console.warn.argsForCall.length).toBe(0);\n    });\n\n    it('should warn when passing no label and isRequired is set', function()  {\n      var instance = React.createElement(Component, null);\n      instance = ReactTestUtils.renderIntoDocument(instance);\n\n      expect(console.warn.argsForCall.length).toBe(1);\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.element, null);\n      typeCheckPass(PropTypes.element, undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(PropTypes.element.isRequired, null, requiredMessage);\n      typeCheckFail(PropTypes.element.isRequired, undefined, requiredMessage);\n    });\n  });\n\n  describe('Instance Types', function() {\n    it(\"should warn for invalid instances\", function() {\n      function Person() {}\n      var personName = Person.name || '<<anonymous>>';\n      var dateName = Date.name || '<<anonymous>>';\n      var regExpName = RegExp.name || '<<anonymous>>';\n\n      typeCheckFail(\n        PropTypes.instanceOf(Person),\n        false,\n        'Invalid prop `testProp` supplied to `testComponent`, expected ' +\n        'instance of `' + personName + '`.'\n      );\n      typeCheckFail(\n        PropTypes.instanceOf(Person),\n        {},\n        'Invalid prop `testProp` supplied to `testComponent`, expected ' +\n        'instance of `' + personName + '`.'\n      );\n      typeCheckFail(\n        PropTypes.instanceOf(Person),\n        '',\n        'Invalid prop `testProp` supplied to `testComponent`, expected ' +\n        'instance of `' + personName + '`.'\n      );\n      typeCheckFail(\n        PropTypes.instanceOf(Date),\n        {},\n        'Invalid prop `testProp` supplied to `testComponent`, expected ' +\n        'instance of `' + dateName + '`.'\n      );\n      typeCheckFail(\n        PropTypes.instanceOf(RegExp),\n        {},\n        'Invalid prop `testProp` supplied to `testComponent`, expected ' +\n        'instance of `' + regExpName + '`.'\n      );\n    });\n\n    it(\"should not warn for valid values\", function() {\n      function Person() {}\n      function Engineer() {}\n      Engineer.prototype = new Person();\n\n      typeCheckPass(PropTypes.instanceOf(Person), new Person());\n      typeCheckPass(PropTypes.instanceOf(Person), new Engineer());\n\n      typeCheckPass(PropTypes.instanceOf(Date), new Date());\n      typeCheckPass(PropTypes.instanceOf(RegExp), /please/);\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.instanceOf(String), null);\n      typeCheckPass(PropTypes.instanceOf(String), undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.instanceOf(String).isRequired, null, requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.instanceOf(String).isRequired, undefined, requiredMessage\n      );\n    });\n  });\n\n  describe('React Component Types', function() {\n    beforeEach(function() {\n      MyComponent = React.createClass({displayName: \"MyComponent\",\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n    });\n\n    it('should warn for invalid values', function() {\n      var failMessage = 'Invalid prop `testProp` supplied to ' +\n        '`testComponent`, expected a ReactNode.';\n      typeCheckFail(PropTypes.node, true, failMessage);\n      typeCheckFail(PropTypes.node, function() {}, failMessage);\n      typeCheckFail(PropTypes.node, {key: function() {}}, failMessage);\n    });\n\n    it('should not warn for valid values', function() {\n      typeCheckPass(PropTypes.node, React.createElement(\"div\", null));\n      typeCheckPass(PropTypes.node, false);\n      typeCheckPass(PropTypes.node, React.createElement(MyComponent, null));\n      typeCheckPass(PropTypes.node, 'Some string');\n      typeCheckPass(PropTypes.node, []);\n      typeCheckPass(PropTypes.node, {});\n\n      typeCheckPass(PropTypes.node, [\n        123,\n        'Some string',\n        React.createElement(\"div\", null),\n        ['Another string', [456], React.createElement(\"span\", null), React.createElement(MyComponent, null)],\n        React.createElement(MyComponent, null)\n      ]);\n\n      // Object of rendereable things\n      typeCheckPass(PropTypes.node, {\n        k0: 123,\n        k1: 'Some string',\n        k2: React.createElement(\"div\", null),\n        k3: {\n          k30: React.createElement(MyComponent, null),\n          k31: {k310: React.createElement(\"a\", null)},\n          k32: 'Another string'\n        }\n      });\n    });\n\n    it('should not warn for null/undefined if not required', function() {\n      typeCheckPass(PropTypes.node, null);\n      typeCheckPass(PropTypes.node, undefined);\n    });\n\n    it('should warn for missing required values', function() {\n      typeCheckFail(\n        PropTypes.node.isRequired,\n        null,\n        'Required prop `testProp` was not specified in `testComponent`.'\n      );\n      typeCheckFail(\n        PropTypes.node.isRequired,\n        undefined,\n        'Required prop `testProp` was not specified in `testComponent`.'\n      );\n    });\n\n    it('should accept empty array for required props', function() {\n      typeCheckPass(PropTypes.node.isRequired, []);\n    });\n\n    it('should still work for deprecated typechecks', function() {\n      typeCheckPass(PropTypes.renderable, []);\n      typeCheckPass(PropTypes.renderable.isRequired, []);\n    });\n  });\n\n  describe('ObjectOf Type', function() {\n    it('should support the objectOf propTypes', function() {\n      typeCheckPass(PropTypes.objectOf(PropTypes.number), {a: 1, b: 2, c: 3});\n      typeCheckPass(\n        PropTypes.objectOf(PropTypes.string),\n        {a: 'a', b: 'b', c: 'c'}\n      );\n      typeCheckPass(\n        PropTypes.objectOf(PropTypes.oneOf(['a', 'b'])),\n        {a: 'a', b: 'b'}\n      );\n    });\n\n    it('should support objectOf with complex types', function() {\n      typeCheckPass(\n        PropTypes.objectOf(PropTypes.shape({a: PropTypes.number.isRequired})),\n        {a: {a: 1}, b: {a: 2}}\n      );\n\n      function Thing() {}\n      typeCheckPass(\n        PropTypes.objectOf(PropTypes.instanceOf(Thing)),\n        {a: new Thing(), b: new Thing()}\n      );\n    });\n\n    it('should warn with invalid items in the object', function() {\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number),\n        {a: 1, b: 2, c: 'b'},\n        'Invalid prop `c` of type `string` supplied to `testComponent`, ' +\n        'expected `number`.'\n      );\n    });\n\n    it('should warn with invalid complex types', function() {\n      function Thing() {}\n      var name = Thing.name || '<<anonymous>>';\n\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.instanceOf(Thing)),\n        {a: new Thing(), b: 'xyz'},\n        'Invalid prop `b` supplied to `testComponent`, expected instance of `' +\n        name + '`.'\n      );\n    });\n\n    it('should warn when passed something other than an object', function() {\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number),\n        [1, 2],\n        'Invalid prop `testProp` of type `array` supplied to ' +\n        '`testComponent`, expected an object.'\n      );\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number),\n        123,\n        'Invalid prop `testProp` of type `number` supplied to ' +\n        '`testComponent`, expected an object.'\n      );\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number),\n        'string',\n        'Invalid prop `testProp` of type `string` supplied to ' +\n        '`testComponent`, expected an object.'\n      );\n    });\n\n    it('should not warn when passing an empty object', function() {\n      typeCheckPass(PropTypes.objectOf(PropTypes.number), {});\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.objectOf(PropTypes.number), null);\n      typeCheckPass(PropTypes.objectOf(PropTypes.number), undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number).isRequired,\n        null,\n        requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.objectOf(PropTypes.number).isRequired,\n        undefined,\n        requiredMessage\n      );\n    });\n  });\n\n  describe('OneOf Types', function() {\n    it(\"should warn for invalid strings\", function() {\n      typeCheckFail(\n        PropTypes.oneOf(['red', 'blue']),\n        true,\n        'Invalid prop `testProp` of value `true` supplied to ' +\n        '`testComponent`, expected one of [\"red\",\"blue\"].'\n      );\n      typeCheckFail(\n        PropTypes.oneOf(['red', 'blue']),\n        [],\n        'Invalid prop `testProp` of value `` supplied to `testComponent`, ' +\n        'expected one of [\"red\",\"blue\"].'\n      );\n      typeCheckFail(\n        PropTypes.oneOf(['red', 'blue']),\n        '',\n        'Invalid prop `testProp` of value `` supplied to `testComponent`, ' +\n        'expected one of [\"red\",\"blue\"].'\n      );\n      typeCheckFail(\n        PropTypes.oneOf([0, 'false']),\n        false,\n        'Invalid prop `testProp` of value `false` supplied to ' +\n        '`testComponent`, expected one of [0,\"false\"].'\n      );\n    });\n\n    it(\"should not warn for valid values\", function() {\n      typeCheckPass(PropTypes.oneOf(['red', 'blue']), 'red');\n      typeCheckPass(PropTypes.oneOf(['red', 'blue']), 'blue');\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(PropTypes.oneOf(['red', 'blue']), null);\n      typeCheckPass(PropTypes.oneOf(['red', 'blue']), undefined);\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.oneOf(['red', 'blue']).isRequired,\n        null,\n        requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.oneOf(['red', 'blue']).isRequired,\n        undefined,\n        requiredMessage\n      );\n    });\n  });\n\n  describe('Union Types', function() {\n    it('should warn if none of the types are valid', function() {\n      typeCheckFail(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        [],\n        'Invalid prop `testProp` supplied to `testComponent`.'\n      );\n\n      var checker = PropTypes.oneOfType([\n        PropTypes.shape({a: PropTypes.number.isRequired}),\n        PropTypes.shape({b: PropTypes.number.isRequired})\n      ]);\n      typeCheckFail(\n        checker,\n        {c: 1},\n        'Invalid prop `testProp` supplied to `testComponent`.'\n      );\n    });\n\n    it('should not warn if one of the types are valid', function() {\n      var checker = PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n      ]);\n      typeCheckPass(checker, null);\n      typeCheckPass(checker, 'foo');\n      typeCheckPass(checker, 123);\n\n      checker = PropTypes.oneOfType([\n        PropTypes.shape({a: PropTypes.number.isRequired}),\n        PropTypes.shape({b: PropTypes.number.isRequired})\n      ]);\n      typeCheckPass(checker, {a: 1});\n      typeCheckPass(checker, {b: 1});\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.number]), null\n      );\n      typeCheckPass(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.number]), undefined\n      );\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        null,\n        requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        undefined,\n        requiredMessage\n      );\n    });\n  });\n\n  describe('Shape Types', function() {\n    it(\"should warn for non objects\", function() {\n      typeCheckFail(\n        PropTypes.shape({}),\n        'some string',\n        'Invalid prop `testProp` of type `string` supplied to ' +\n        '`testComponent`, expected `object`.'\n      );\n      typeCheckFail(\n        PropTypes.shape({}),\n        ['array'],\n        'Invalid prop `testProp` of type `array` supplied to ' +\n        '`testComponent`, expected `object`.'\n      );\n    });\n\n    it(\"should not warn for empty values\", function() {\n      typeCheckPass(PropTypes.shape({}), undefined);\n      typeCheckPass(PropTypes.shape({}), null);\n      typeCheckPass(PropTypes.shape({}), {});\n    });\n\n    it(\"should not warn for an empty object\", function() {\n      typeCheckPass(PropTypes.shape({}).isRequired, {});\n    });\n\n    it(\"should not warn for non specified types\", function() {\n      typeCheckPass(PropTypes.shape({}), {key: 1});\n    });\n\n    it(\"should not warn for valid types\", function() {\n      typeCheckPass(PropTypes.shape({key: PropTypes.number}), {key: 1});\n    });\n\n    it(\"should warn for required valid types\", function() {\n      typeCheckFail(\n        PropTypes.shape({key: PropTypes.number.isRequired}),\n        {},\n        'Required prop `key` was not specified in `testComponent`.'\n      );\n    });\n\n    it(\"should warn for the first required type\", function() {\n      typeCheckFail(\n        PropTypes.shape({\n          key: PropTypes.number.isRequired,\n          secondKey: PropTypes.number.isRequired\n        }),\n        {},\n        'Required prop `key` was not specified in `testComponent`.'\n      );\n    });\n\n    it(\"should warn for invalid key types\", function() {\n      typeCheckFail(PropTypes.shape({key: PropTypes.number}),\n        {key: 'abc'},\n        'Invalid prop `key` of type `string` supplied to `testComponent`, ' +\n        'expected `number`.'\n      );\n    });\n\n    it(\"should be implicitly optional and not warn without values\", function() {\n      typeCheckPass(\n        PropTypes.shape(PropTypes.shape({key: PropTypes.number})), null\n      );\n      typeCheckPass(\n        PropTypes.shape(PropTypes.shape({key: PropTypes.number})), undefined\n      );\n    });\n\n    it(\"should warn for missing required values\", function() {\n      typeCheckFail(\n        PropTypes.shape({key: PropTypes.number}).isRequired,\n        null,\n        requiredMessage\n      );\n      typeCheckFail(\n        PropTypes.shape({key: PropTypes.number}).isRequired,\n        undefined,\n        requiredMessage\n      );\n    });\n  });\n\n  describe('Custom validator', function() {\n    beforeEach(function() {\n      require(\"../../mock-modules\").dumpCache();\n      spyOn(console, 'warn');\n    });\n\n    it('should have been called with the right params', function() {\n      var spy = jasmine.createSpy();\n      var Component = React.createClass({displayName: \"Component\",\n        propTypes: {num: spy},\n\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n\n      var instance = React.createElement(Component, {num: 5});\n      instance = ReactTestUtils.renderIntoDocument(instance);\n\n      expect(spy.argsForCall.length).toBe(2); // temp double validation\n      expect(spy.argsForCall[0][1]).toBe('num');\n      expect(spy.argsForCall[0][2]).toBe('Component');\n    });\n\n    it('should have been called even if the prop is not present', function() {\n      var spy = jasmine.createSpy();\n      var Component = React.createClass({displayName: \"Component\",\n        propTypes: {num: spy},\n\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n\n      var instance = React.createElement(Component, {bla: 5});\n      instance = ReactTestUtils.renderIntoDocument(instance);\n\n      expect(spy.argsForCall.length).toBe(2); // temp double validation\n    });\n\n    it('should have received the validator\\'s return value', function() {\n      var spy = jasmine.createSpy().andCallFake(\n        function(props, propName, componentName) {\n          if (props[propName] !== 5) {\n            return new Error('num must be 5!');\n          }\n        }\n      );\n      var Component = React.createClass({displayName: \"Component\",\n        propTypes: {num: spy},\n\n        render: function() {\n          return React.createElement(\"div\", null);\n        }\n      });\n\n      var instance = React.createElement(Component, {num: 6});\n      instance = ReactTestUtils.renderIntoDocument(instance);\n      expect(console.warn.argsForCall.length).toBe(1);\n      expect(console.warn.argsForCall[0][0]).toBe('Warning: num must be 5!');\n    });\n\n    it('should not warn if the validator returned anything else than an error',\n      function() {\n        var spy = jasmine.createSpy().andCallFake(\n          function(props, propName, componentName) {\n            return 'This message will never reach anyone';\n          }\n        );\n        var Component = React.createClass({displayName: \"Component\",\n          propTypes: {num: spy},\n\n          render: function() {\n            return React.createElement(\"div\", null);\n          }\n        });\n\n        var instance = React.createElement(Component, {num: 5});\n        instance = ReactTestUtils.renderIntoDocument(instance);\n        expect(console.warn.argsForCall.length).toBe(0);\n      }\n    );\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactPropTypes-test\", module);\n",
"core/__tests__/ReactStateSetters-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactStateSetters = require(\"../../ReactStateSetters\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\n\nvar TestComponent;\nvar TestComponentWithMixin;\n\ndescribe('ReactStateSetters', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n\n    TestComponent = React.createClass({displayName: \"TestComponent\",\n      getInitialState: function() {\n        return {foo: 'foo'};\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    TestComponentWithMixin = React.createClass({displayName: \"TestComponentWithMixin\",\n      mixins: [ReactStateSetters.Mixin],\n\n      getInitialState: function() {\n        return {foo: 'foo'};\n      },\n\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n  });\n\n  it('createStateSetter should update state', function() {\n    var instance = React.createElement(TestComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var setter = ReactStateSetters.createStateSetter(\n      instance,\n      function(a, b, c) {\n        return {\n          foo: a + b + c,\n          bar: a * b * c\n        };\n      }\n    );\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    setter(1, 2, 3);\n    expect(instance.state).toEqual({foo: 6, bar: 6});\n\n    setter(10, 11, 12);\n    expect(instance.state).toEqual({foo: 33, bar: 1320});\n  });\n\n  it('createStateKeySetter should update state', function() {\n    var instance = React.createElement(TestComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var setter = ReactStateSetters.createStateKeySetter(instance, 'foo');\n\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    setter('bar');\n    expect(instance.state).toEqual({foo: 'bar'});\n\n    setter('baz');\n    expect(instance.state).toEqual({foo: 'baz'});\n  });\n\n  it('createStateKeySetter is memoized', function() {\n    var instance = React.createElement(TestComponent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var foo1 = ReactStateSetters.createStateKeySetter(instance, 'foo');\n    var bar1 = ReactStateSetters.createStateKeySetter(instance, 'bar');\n\n    var foo2 = ReactStateSetters.createStateKeySetter(instance, 'foo');\n    var bar2 = ReactStateSetters.createStateKeySetter(instance, 'bar');\n\n    expect(foo2).toBe(foo1);\n    expect(bar2).toBe(bar1);\n  });\n\n  it('createStateSetter should update state from mixin', function() {\n    var instance = React.createElement(TestComponentWithMixin, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var setter = instance.createStateSetter(\n      function(a, b, c) {\n        return {\n          foo: a + b + c,\n          bar: a * b * c\n        };\n      }\n    );\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    setter(1, 2, 3);\n    expect(instance.state).toEqual({foo: 6, bar: 6});\n\n    setter(10, 11, 12);\n    expect(instance.state).toEqual({foo: 33, bar: 1320});\n  });\n\n  it('createStateKeySetter should update state with mixin', function() {\n    var instance = React.createElement(TestComponentWithMixin, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var setter = instance.createStateKeySetter('foo');\n\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    setter('bar');\n    expect(instance.state).toEqual({foo: 'bar'});\n\n    setter('baz');\n    expect(instance.state).toEqual({foo: 'baz'});\n  });\n\n  it('createStateKeySetter is memoized with mixin', function() {\n    var instance = React.createElement(TestComponentWithMixin, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    expect(instance.state).toEqual({foo: 'foo'});\n\n    var foo1 = instance.createStateKeySetter('foo');\n    var bar1 = instance.createStateKeySetter('bar');\n\n    var foo2 = instance.createStateKeySetter('foo');\n    var bar2 = instance.createStateKeySetter('bar');\n\n    expect(foo2).toBe(foo1);\n    expect(bar2).toBe(bar1);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactStateSetters-test\", module);\n",
"core/__tests__/ReactTextComponent-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\n\ndescribe('ReactTextComponent', function() {\n  beforeEach(function() {\n    React = require(\"../../React\");\n  });\n\n  it('should escape the rootID', function(){\n    var ThisThingShouldBeEscaped = '\">>> LULZ <<<\"';\n    var ThisThingWasBeEscaped = '&quot;&gt;&gt;&gt; LULZ &lt;&lt;&lt;&quot;';\n    var thing = React.createElement(\"div\", null, React.createElement(\"span\", {key: ThisThingShouldBeEscaped}, \"LULZ\"));\n    var html = React.renderToString(thing);\n    expect(html).not.toContain(ThisThingShouldBeEscaped);\n    expect(html).toContain(ThisThingWasBeEscaped);\n  })\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactTextComponent-test\", module);\n",
"core/__tests__/ReactUpdates-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React;\nvar ReactTestUtils;\nvar ReactUpdates;\n\ndescribe('ReactUpdates', function() {\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    ReactUpdates = require(\"../../ReactUpdates\");\n  });\n\n  it('should batch state when updating state twice', function() {\n    var updateCount = 0;\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentDidUpdate: function() {\n        updateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.state.x);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    expect(instance.state.x).toBe(0);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1});\n      instance.setState({x: 2});\n      expect(instance.state.x).toBe(0);\n      expect(updateCount).toBe(0);\n    });\n\n    expect(instance.state.x).toBe(2);\n    expect(updateCount).toBe(1);\n  });\n\n  it('should batch state when updating two different state keys', function() {\n    var updateCount = 0;\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {x: 0, y: 0};\n      },\n      componentDidUpdate: function() {\n        updateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"(\", this.state.x, \", \", this.state.y, \")\");\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    expect(instance.state.x).toBe(0);\n    expect(instance.state.y).toBe(0);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1});\n      instance.setState({y: 2});\n      expect(instance.state.x).toBe(0);\n      expect(instance.state.y).toBe(0);\n      expect(updateCount).toBe(0);\n    });\n\n    expect(instance.state.x).toBe(1);\n    expect(instance.state.y).toBe(2);\n    expect(updateCount).toBe(1);\n  });\n\n  it('should batch state and props together', function() {\n    var updateCount = 0;\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {y: 0};\n      },\n      componentDidUpdate: function() {\n        updateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"(\", this.props.x, \", \", this.state.y, \")\");\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, {x: 0}));\n    expect(instance.props.x).toBe(0);\n    expect(instance.state.y).toBe(0);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.setProps({x: 1});\n      instance.setState({y: 2});\n      expect(instance.props.x).toBe(0);\n      expect(instance.state.y).toBe(0);\n      expect(updateCount).toBe(0);\n    });\n\n    expect(instance.props.x).toBe(1);\n    expect(instance.state.y).toBe(2);\n    expect(updateCount).toBe(1);\n  });\n\n  it('should batch parent/child state updates together', function() {\n    var parentUpdateCount = 0;\n    var Parent = React.createClass({displayName: \"Parent\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentDidUpdate: function() {\n        parentUpdateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, React.createElement(Child, {ref: \"child\", x: this.state.x}));\n      }\n    });\n    var childUpdateCount = 0;\n    var Child = React.createClass({displayName: \"Child\",\n      getInitialState: function() {\n        return {y: 0};\n      },\n      componentDidUpdate: function() {\n        childUpdateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.props.x + this.state.y);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, null));\n    var child = instance.refs.child;\n    expect(instance.state.x).toBe(0);\n    expect(child.state.y).toBe(0);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1});\n      child.setState({y: 2});\n      expect(instance.state.x).toBe(0);\n      expect(child.state.y).toBe(0);\n      expect(parentUpdateCount).toBe(0);\n      expect(childUpdateCount).toBe(0);\n    });\n\n    expect(instance.state.x).toBe(1);\n    expect(child.state.y).toBe(2);\n    expect(parentUpdateCount).toBe(1);\n    expect(childUpdateCount).toBe(1);\n  });\n\n  it('should batch child/parent state updates together', function() {\n    var parentUpdateCount = 0;\n    var Parent = React.createClass({displayName: \"Parent\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentDidUpdate: function() {\n        parentUpdateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, React.createElement(Child, {ref: \"child\", x: this.state.x}));\n      }\n    });\n    var childUpdateCount = 0;\n    var Child = React.createClass({displayName: \"Child\",\n      getInitialState: function() {\n        return {y: 0};\n      },\n      componentDidUpdate: function() {\n        childUpdateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.props.x + this.state.y);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, null));\n    var child = instance.refs.child;\n    expect(instance.state.x).toBe(0);\n    expect(child.state.y).toBe(0);\n\n    ReactUpdates.batchedUpdates(function() {\n      child.setState({y: 2});\n      instance.setState({x: 1});\n      expect(instance.state.x).toBe(0);\n      expect(child.state.y).toBe(0);\n      expect(parentUpdateCount).toBe(0);\n      expect(childUpdateCount).toBe(0);\n    });\n\n    expect(instance.state.x).toBe(1);\n    expect(child.state.y).toBe(2);\n    expect(parentUpdateCount).toBe(1);\n\n    // Batching reduces the number of updates here to 1.\n    expect(childUpdateCount).toBe(1);\n  });\n\n  it('should support chained state updates', function() {\n    var updateCount = 0;\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentDidUpdate: function() {\n        updateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.state.x);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    expect(instance.state.x).toBe(0);\n\n    var innerCallbackRun = false;\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1}, function() {\n        instance.setState({x: 2}, function() {\n          expect(this).toBe(instance);\n          innerCallbackRun = true;\n          expect(instance.state.x).toBe(2);\n          expect(updateCount).toBe(2);\n        });\n        expect(instance.state.x).toBe(1);\n        expect(updateCount).toBe(1);\n      });\n      expect(instance.state.x).toBe(0);\n      expect(updateCount).toBe(0);\n    });\n\n    expect(innerCallbackRun).toBeTruthy();\n    expect(instance.state.x).toBe(2);\n    expect(updateCount).toBe(2);\n  });\n\n  it('should batch forceUpdate together', function() {\n    var shouldUpdateCount = 0;\n    var updateCount = 0;\n    var Component = React.createClass({displayName: \"Component\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      shouldComponentUpdate: function() {\n        shouldUpdateCount++;\n      },\n      componentDidUpdate: function() {\n        updateCount++;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.state.x);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    expect(instance.state.x).toBe(0);\n\n    var callbacksRun = 0;\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1}, function() {\n        callbacksRun++;\n      });\n      instance.forceUpdate(function() {\n        callbacksRun++;\n      });\n      expect(instance.state.x).toBe(0);\n      expect(updateCount).toBe(0);\n    });\n\n    expect(callbacksRun).toBe(2);\n    // shouldComponentUpdate shouldn't be called since we're forcing\n    expect(shouldUpdateCount).toBe(0);\n    expect(instance.state.x).toBe(1);\n    expect(updateCount).toBe(1);\n  });\n\n  it('should update children even if parent blocks updates', function() {\n    var parentRenderCount = 0;\n    var childRenderCount = 0;\n\n    var Parent = React.createClass({displayName: \"Parent\",\n      shouldComponentUpdate: function() {\n        return false;\n      },\n\n      render: function() {\n        parentRenderCount++;\n        return React.createElement(Child, {ref: \"child\"});\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        childRenderCount++;\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    expect(parentRenderCount).toBe(0);\n    expect(childRenderCount).toBe(0);\n\n    var instance = React.createElement(Parent, null);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n\n    expect(parentRenderCount).toBe(1);\n    expect(childRenderCount).toBe(1);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.setState({x: 1});\n    });\n\n    expect(parentRenderCount).toBe(1);\n    expect(childRenderCount).toBe(1);\n\n    ReactUpdates.batchedUpdates(function() {\n      instance.refs.child.setState({x: 1});\n    });\n\n    expect(parentRenderCount).toBe(1);\n    expect(childRenderCount).toBe(2);\n  });\n\n  it('should not reconcile children passed via props', function() {\n    var numMiddleRenders = 0;\n    var numBottomRenders = 0;\n\n    var Top = React.createClass({displayName: \"Top\",\n      render: function() {\n        return React.createElement(Middle, null, React.createElement(Bottom, null));\n      }\n    });\n\n    var Middle = React.createClass({displayName: \"Middle\",\n      componentDidMount: function() {\n        this.forceUpdate();\n      },\n\n      render: function() {\n        numMiddleRenders++;\n        return React.createElement(\"div\", null, this.props.children);\n      }\n    });\n\n    var Bottom = React.createClass({displayName: \"Bottom\",\n      render: function() {\n        numBottomRenders++;\n        return React.createElement(\"span\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Top, null));\n    expect(numMiddleRenders).toBe(2);\n    expect(numBottomRenders).toBe(1);\n  });\n\n  it('should flow updates correctly', function() {\n    var willUpdates = [];\n    var didUpdates = [];\n\n    var UpdateLoggingMixin = {\n      componentWillUpdate: function() {\n        willUpdates.push(this.constructor.displayName);\n      },\n      componentDidUpdate: function() {\n        didUpdates.push(this.constructor.displayName);\n      }\n    };\n\n    var Box = React.createClass({displayName: \"Box\",\n      mixins: [UpdateLoggingMixin],\n\n      render: function() {\n        return React.createElement(\"div\", {ref: \"boxDiv\"}, this.props.children);\n      }\n    });\n\n    var Child = React.createClass({displayName: \"Child\",\n      mixins: [UpdateLoggingMixin],\n\n      render: function() {\n        return React.createElement(\"span\", {ref: \"span\"}, \"child\");\n      }\n    });\n\n    var Switcher = React.createClass({displayName: \"Switcher\",\n      mixins: [UpdateLoggingMixin],\n\n      getInitialState: function() {\n        return {tabKey: 'hello'};\n      },\n\n      render: function() {\n        var child = this.props.children;\n\n        return (\n          React.createElement(Box, {ref: \"box\"}, \n            React.createElement(\"div\", {\n              ref: \"switcherDiv\", \n              style: {\n                display: this.state.tabKey === child.key ? '' : 'none'\n            }}, \n              child\n            )\n          )\n        );\n      }\n    });\n\n    var App = React.createClass({displayName: \"App\",\n      mixins: [UpdateLoggingMixin],\n\n      render: function() {\n        return (\n          React.createElement(Switcher, {ref: \"switcher\"}, \n            React.createElement(Child, {key: \"hello\", ref: \"child\"})\n          )\n        );\n      }\n    });\n\n    var root = React.createElement(App, null);\n    root = ReactTestUtils.renderIntoDocument(root);\n\n    function expectUpdates(desiredWillUpdates, desiredDidUpdates) {\n      expect(willUpdates).toEqual(desiredWillUpdates);\n      expect(didUpdates).toEqual(desiredDidUpdates);\n      willUpdates.length = 0;\n      didUpdates.length = 0;\n    }\n\n    function triggerUpdate(c) {\n      c.setState({x: 1});\n    }\n\n    function testUpdates(components, desiredWillUpdates, desiredDidUpdates) {\n      var i;\n\n      ReactUpdates.batchedUpdates(function() {\n        for (i = 0; i < components.length; i++) {\n          triggerUpdate(components[i]);\n        }\n      });\n\n      expectUpdates(desiredWillUpdates, desiredDidUpdates);\n\n      // Try them in reverse order\n\n      ReactUpdates.batchedUpdates(function() {\n        for (i = components.length - 1; i >= 0; i--) {\n          triggerUpdate(components[i]);\n        }\n      });\n\n      expectUpdates(desiredWillUpdates, desiredDidUpdates);\n    }\n\n    testUpdates(\n      [root.refs.switcher.refs.box, root.refs.switcher],\n      // Owner-child relationships have inverse will and did\n      ['Switcher', 'Box'],\n      ['Box', 'Switcher']\n    );\n\n    testUpdates(\n      [root.refs.child, root.refs.switcher.refs.box],\n      // Not owner-child so reconcile independently\n      ['Box', 'Child'],\n      ['Box', 'Child']\n    );\n\n    testUpdates(\n      [root.refs.child, root.refs.switcher],\n      // Switcher owns Box and Child, Box does not own Child\n      ['Switcher', 'Box', 'Child'],\n      ['Box', 'Switcher', 'Child']\n    );\n  });\n\n  it('should share reconcile transaction across different roots', function() {\n    var ReconcileTransaction = ReactUpdates.ReactReconcileTransaction;\n    spyOn(ReconcileTransaction, 'getPooled').andCallThrough();\n\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null, this.props.text);\n      }\n    });\n\n    var containerA = document.createElement('div');\n    var containerB = document.createElement('div');\n\n    // Initial renders aren't batched together yet...\n    ReactUpdates.batchedUpdates(function() {\n      React.render(React.createElement(Component, {text: \"A1\"}), containerA);\n      React.render(React.createElement(Component, {text: \"B1\"}), containerB);\n    });\n    expect(ReconcileTransaction.getPooled.calls.length).toBe(2);\n\n    // ...but updates are! Here only one more transaction is used, which means\n    // we only have to initialize and close the wrappers once.\n    ReactUpdates.batchedUpdates(function() {\n      React.render(React.createElement(Component, {text: \"A2\"}), containerA);\n      React.render(React.createElement(Component, {text: \"B2\"}), containerB);\n    });\n    expect(ReconcileTransaction.getPooled.calls.length).toBe(3);\n  });\n\n  it('should queue mount-ready handlers across different roots', function() {\n    // We'll define two components A and B, then update both of them. When A's\n    // componentDidUpdate handlers is called, B's DOM should already have been\n    // updated.\n\n    var a;\n    var b;\n\n    var aUpdated = false;\n\n    var A = React.createClass({displayName: \"A\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentDidUpdate: function() {\n        expect(b.getDOMNode().textContent).toBe(\"B1\");\n        aUpdated = true;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"A\", this.state.x);\n      }\n    });\n\n    var B = React.createClass({displayName: \"B\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"B\", this.state.x);\n      }\n    });\n\n    a = ReactTestUtils.renderIntoDocument(React.createElement(A, null));\n    b = ReactTestUtils.renderIntoDocument(React.createElement(B, null));\n\n    ReactUpdates.batchedUpdates(function() {\n      a.setState({x: 1});\n      b.setState({x: 1});\n    });\n\n    expect(aUpdated).toBe(true);\n  });\n\n  it('should flush updates in the correct order', function() {\n    var updates = [];\n    var Outer = React.createClass({displayName: \"Outer\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      render: function() {\n        updates.push('Outer-render-' + this.state.x);\n        return React.createElement(\"div\", null, React.createElement(Inner, {x: this.state.x, ref: \"inner\"}));\n      },\n      componentDidUpdate: function() {\n        var x = this.state.x;\n        updates.push('Outer-didUpdate-' + x);\n        updates.push('Inner-setState-' + x);\n        this.refs.inner.setState({x: x}, function() {\n          updates.push('Inner-callback-' + x);\n        });\n      }\n    });\n    var Inner = React.createClass({displayName: \"Inner\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      render: function() {\n        updates.push('Inner-render-' + this.props.x + '-' + this.state.x);\n        return React.createElement(\"div\", null);\n      },\n      componentDidUpdate: function() {\n        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Outer, null));\n\n    updates.push('Outer-setState-1');\n    instance.setState({x: 1}, function() {\n      updates.push('Outer-callback-1');\n      updates.push('Outer-setState-2');\n      instance.setState({x: 2}, function() {\n        updates.push('Outer-callback-2');\n      });\n    });\n\n    expect(updates).toEqual([\n      'Outer-render-0',\n        'Inner-render-0-0',\n\n      'Outer-setState-1',\n        'Outer-render-1',\n          'Inner-render-1-0',\n          'Inner-didUpdate-1-0',\n        'Outer-didUpdate-1',\n          'Inner-setState-1',\n            'Inner-render-1-1',\n            'Inner-didUpdate-1-1',\n          'Inner-callback-1',\n      'Outer-callback-1',\n\n      'Outer-setState-2',\n        'Outer-render-2',\n          'Inner-render-2-1',\n          'Inner-didUpdate-2-1',\n        'Outer-didUpdate-2',\n          'Inner-setState-2',\n            'Inner-render-2-2',\n            'Inner-didUpdate-2-2',\n          'Inner-callback-2',\n      'Outer-callback-2'\n    ]);\n  });\n\n  it('should queue nested updates', function() {\n    // See https://github.com/facebook/react/issues/1147\n\n    var X = React.createClass({displayName: \"X\",\n      getInitialState: function() {\n        return {s: 0};\n      },\n      render: function() {\n        if (this.state.s === 0) {\n          return React.createElement(\"div\", null, \n            React.createElement(\"span\", null, \"0\")\n          );\n        } else {\n          return React.createElement(\"div\", null, \"1\");\n        }\n      },\n      go: function() {\n        this.setState({s: 1});\n        this.setState({s: 0});\n        this.setState({s: 1});\n      }\n    });\n\n    var Y = React.createClass({displayName: \"Y\",\n      render: function() {\n        return React.createElement(\"div\", null, \n          React.createElement(Z, null)\n        );\n      }\n    });\n\n    var Z = React.createClass({displayName: \"Z\",\n      render: function() { return React.createElement(\"div\", null); },\n      componentWillUpdate: function() {\n        x.go();\n      }\n    });\n\n    var x;\n    var y;\n\n    x = ReactTestUtils.renderIntoDocument(React.createElement(X, null));\n    y = ReactTestUtils.renderIntoDocument(React.createElement(Y, null));\n    expect(x.getDOMNode().textContent).toBe('0');\n\n    y.forceUpdate();\n    expect(x.getDOMNode().textContent).toBe('1');\n  });\n\n  it('should queue updates from during mount', function() {\n    // See https://github.com/facebook/react/issues/1353\n    var a;\n\n    var A = React.createClass({displayName: \"A\",\n      getInitialState: function() {\n        return {x: 0};\n      },\n      componentWillMount: function() {\n        a = this;\n      },\n      render: function() {\n        return React.createElement(\"div\", null, \"A\", this.state.x);\n      }\n    });\n\n    var B = React.createClass({displayName: \"B\",\n      componentWillMount: function() {\n        a.setState({x: 1});\n      },\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactUpdates.batchedUpdates(function() {\n      ReactTestUtils.renderIntoDocument(\n        React.createElement(\"div\", null, \n          React.createElement(A, null), \n          React.createElement(B, null)\n        )\n      );\n    });\n\n    expect(a.state.x).toBe(1);\n    expect(a.getDOMNode().textContent).toBe('A1');\n  });\n\n  it('calls componentWillReceiveProps setState callback properly', function() {\n    var callbackCount = 0;\n    var A = React.createClass({displayName: \"A\",\n      getInitialState: function() {\n        return {x: this.props.x};\n      },\n      componentWillReceiveProps: function(nextProps) {\n        var newX = nextProps.x;\n        this.setState({x: newX}, function() {\n          // State should have updated by the time this callback gets called\n          expect(this.state.x).toBe(newX);\n          callbackCount++;\n        });\n      },\n      render: function() {\n        return React.createElement(\"div\", null, this.state.x);\n      }\n    });\n\n    var container = document.createElement('div');\n    React.render(React.createElement(A, {x: 1}), container);\n    React.render(React.createElement(A, {x: 2}), container);\n    expect(callbackCount).toBe(1);\n  });\n\n  it('calls asap callbacks properly', function() {\n    var callbackCount = 0;\n    var A = React.createClass({displayName: \"A\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      },\n      componentDidUpdate: function() {\n        var component = this;\n        ReactUpdates.asap(function() {\n          expect(this).toBe(component);\n          callbackCount++;\n          ReactUpdates.asap(function() {\n            callbackCount++;\n          });\n          expect(callbackCount).toBe(1);\n        }, this);\n        expect(callbackCount).toBe(0);\n      }\n    });\n\n    var container = document.createElement('div');\n    var component = React.render(React.createElement(A, null), container);\n    component.forceUpdate();\n    expect(callbackCount).toBe(2);\n  });\n\n  it('calls asap callbacks with queued updates', function() {\n    var log = [];\n    var A = React.createClass({displayName: \"A\",\n      getInitialState: function()  {return {updates: 0};},\n      render: function() {\n        log.push('render-' + this.state.updates);\n        return React.createElement(\"div\", null);\n      },\n      componentDidUpdate: function() {\n        if (this.state.updates === 1) {\n          ReactUpdates.asap(function() {\n            this.setState({updates: 2}, function() {\n              ReactUpdates.asap(function() {\n                log.push('asap-1.2');\n              });\n              log.push('setState-cb');\n            });\n            log.push('asap-1.1');\n          }, this);\n        } else if (this.state.updates === 2) {\n          ReactUpdates.asap(function() {\n            log.push('asap-2');\n          });\n        }\n        log.push('didUpdate-' + this.state.updates);\n      }\n    });\n\n    var container = document.createElement('div');\n    var component = React.render(React.createElement(A, null), container);\n    component.setState({updates: 1});\n    expect(log).toEqual([\n      'render-0',\n      // We do the first update...\n      'render-1',\n      'didUpdate-1',\n      // ...which calls asap and enqueues a second update...\n      'asap-1.1',\n      // ...which runs and enqueues the asap-2 log in its didUpdate...\n      'render-2',\n      'didUpdate-2',\n      // ...and runs the setState callback, which enqueues the log for\n      // asap-1.2.\n      'setState-cb',\n      'asap-2',\n      'asap-1.2'\n    ]);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/ReactUpdates-test\", module);\n",
"core/__tests__/refs-destruction-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\nvar reactComponentExpect= require(\"../../reactComponentExpect\");\n\nvar TestComponent = React.createClass({displayName: \"TestComponent\",\n  render: function() {\n    return (\n      React.createElement(\"div\", null, \n        React.createElement(\"div\", {ref: \"theInnerDiv\"}, \n          \"Lets try to destroy this.\"\n        )\n      )\n    );\n  }\n});\n\ndescribe('refs-destruction', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n  });\n\n  it(\"should remove refs when destroying the parent\", function() {\n    var testInstance = ReactTestUtils.renderIntoDocument(React.createElement(TestComponent, null));\n    reactComponentExpect(testInstance.refs.theInnerDiv)\n        .toBeDOMComponentWithTag('div');\n    expect(Object.keys(testInstance.refs || {}).length).toEqual(1);\n    testInstance.unmountComponent();\n    expect(Object.keys(testInstance.refs || {}).length).toEqual(0);\n  });\n\n  it(\"should remove refs when destroying the child\", function() {\n    var testInstance = ReactTestUtils.renderIntoDocument(React.createElement(TestComponent, null));\n    reactComponentExpect(testInstance.refs.theInnerDiv)\n        .toBeDOMComponentWithTag('div');\n    expect(Object.keys(testInstance.refs || {}).length).toEqual(1);\n    testInstance.refs.theInnerDiv.unmountComponent();\n    expect(Object.keys(testInstance.refs || {}).length).toEqual(0);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/refs-destruction-test\", module);\n",
"core/__tests__/refs-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar React = require(\"../../React\");\nvar ReactTestUtils = require(\"../../ReactTestUtils\");\n\nvar reactComponentExpect= require(\"../../reactComponentExpect\");\n\n\n/**\n * Counts clicks and has a renders an item for each click. Each item rendered\n * has a ref of the form \"clickLogN\".\n */\nvar ClickCounter = React.createClass({displayName: \"ClickCounter\",\n  getInitialState: function() {\n    return {count: this.props.initialCount};\n  },\n  triggerReset: function() {\n    this.setState({count: this.props.initialCount});\n  },\n  handleClick: function() {\n    this.setState({count: this.state.count + 1});\n  },\n  render: function() {\n    var children = [];\n    var i;\n    for (i=0; i < this.state.count; i++) {\n      children.push(\n        React.createElement(\"div\", {\n          className: \"clickLogDiv\", \n          key: \"clickLog\" + i, \n          ref: \"clickLog\" + i}\n        )\n      );\n    }\n    return (\n      React.createElement(\"span\", {className: \"clickIncrementer\", onClick: this.handleClick}, \n        children\n      )\n    );\n  }\n});\n\n/**\n * Only purpose is to test that refs are tracked even when applied to a\n * component that is injected down several layers. Ref systems are difficult to\n * build in such a way that ownership is maintained in an airtight manner.\n */\nvar GeneralContainerComponent = React.createClass({displayName: \"GeneralContainerComponent\",\n  render: function() {\n    return React.createElement(\"div\", null, this.props.children);\n  }\n});\n\n/**\n * Notice how refs ownership is maintained even when injecting a component\n * into a different parent.\n */\nvar TestRefsComponent = React.createClass({displayName: \"TestRefsComponent\",\n  doReset: function() {\n    this.refs.myCounter.triggerReset();\n  },\n  render: function() {\n    return (\n      React.createElement(\"div\", null, \n        React.createElement(\"div\", {ref: \"resetDiv\", onClick: this.doReset}, \n          \"Reset Me By Clicking This.\"\n        ), \n        React.createElement(GeneralContainerComponent, {ref: \"myContainer\"}, \n          React.createElement(ClickCounter, {ref: \"myCounter\", initialCount: 1})\n        )\n      )\n    );\n  }\n});\n\n/**\n * Render a TestRefsComponent and ensure that the main refs are wired up.\n */\nvar renderTestRefsComponent = function() {\n  var testRefsComponent =\n      ReactTestUtils.renderIntoDocument(React.createElement(TestRefsComponent, null));\n\n  reactComponentExpect(testRefsComponent)\n      .toBeCompositeComponentWithType(TestRefsComponent);\n\n  var generalContainer = testRefsComponent.refs.myContainer;\n  var counter = testRefsComponent.refs.myCounter;\n\n  reactComponentExpect(generalContainer)\n      .toBeCompositeComponentWithType(GeneralContainerComponent);\n  reactComponentExpect(counter)\n      .toBeCompositeComponentWithType(ClickCounter);\n\n  return testRefsComponent;\n};\n\n\nvar expectClickLogsLengthToBe = function(instance, length) {\n  var clickLogs =\n    ReactTestUtils.scryRenderedDOMComponentsWithClass(instance, 'clickLogDiv');\n  expect(clickLogs.length).toBe(length);\n  expect(Object.keys(instance.refs.myCounter.refs).length).toBe(length);\n};\n\ndescribe('reactiverefs', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n  });\n\n  /**\n   * Ensure that for every click log there is a corresponding ref (from the\n   * perspective of the injected ClickCounter component.\n   */\n  it(\"Should increase refs with an increase in divs\", function() {\n    var testRefsComponent = renderTestRefsComponent();\n    var clickIncrementer =\n      ReactTestUtils.findRenderedDOMComponentWithClass(\n        testRefsComponent,\n        'clickIncrementer'\n      );\n\n    expectClickLogsLengthToBe(testRefsComponent, 1);\n\n    // After clicking the reset, there should still only be one click log ref.\n    ReactTestUtils.Simulate.click(testRefsComponent.refs.resetDiv);\n    expectClickLogsLengthToBe(testRefsComponent, 1);\n\n    // Begin incrementing clicks (and therefore refs).\n    ReactTestUtils.Simulate.click(clickIncrementer);\n    expectClickLogsLengthToBe(testRefsComponent, 2);\n\n    ReactTestUtils.Simulate.click(clickIncrementer);\n    expectClickLogsLengthToBe(testRefsComponent, 3);\n\n    // Now reset again\n    ReactTestUtils.Simulate.click(testRefsComponent.refs.resetDiv);\n    expectClickLogsLengthToBe(testRefsComponent, 1);\n\n  });\n\n});\n\n\n\n/**\n * Tests that when a ref hops around children, we can track that correctly.\n */\ndescribe('ref swapping', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n  });\n\n  var RefHopsAround = React.createClass({displayName: \"RefHopsAround\",\n    getInitialState: function() {\n      return {count: 0};\n    },\n    moveRef: function() {\n      this.setState({ count: this.state.count + 1 });\n    },\n    render: function() {\n      var count = this.state.count;\n      /**\n       * What we have here, is three divs with refs (div1/2/3), but a single\n       * moving cursor ref `hopRef` that \"hops\" around the three. We'll call the\n       * `moveRef()` function several times and make sure that the hop ref\n       * points to the correct divs.\n       */\n      return (\n        React.createElement(\"div\", null, \n          React.createElement(\"div\", {\n            className: \"first\", \n            ref: count % 3 === 0 ? 'hopRef' : 'divOneRef'}\n          ), \n          React.createElement(\"div\", {\n            className: \"second\", \n            ref: count % 3 === 1 ? 'hopRef' : 'divTwoRef'}\n          ), \n          React.createElement(\"div\", {\n            className: \"third\", \n            ref: count % 3 === 2 ? 'hopRef' : 'divThreeRef'}\n          )\n        )\n      );\n    }\n  });\n\n  it(\"Allow refs to hop around children correctly\", function() {\n    var refHopsAround = ReactTestUtils.renderIntoDocument(React.createElement(RefHopsAround, null));\n\n    var firstDiv =\n      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'first');\n    var secondDiv =\n      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'second');\n    var thirdDiv =\n      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'third');\n\n    expect(refHopsAround.refs.hopRef).toEqual(firstDiv);\n    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);\n    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);\n\n    refHopsAround.moveRef();\n    expect(refHopsAround.refs.divOneRef).toEqual(firstDiv);\n    expect(refHopsAround.refs.hopRef).toEqual(secondDiv);\n    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);\n\n    refHopsAround.moveRef();\n    expect(refHopsAround.refs.divOneRef).toEqual(firstDiv);\n    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);\n    expect(refHopsAround.refs.hopRef).toEqual(thirdDiv);\n\n    /**\n     * Make sure that after the third, we're back to where we started and the\n     * refs are completely restored.\n     */\n    refHopsAround.moveRef();\n    expect(refHopsAround.refs.hopRef).toEqual(firstDiv);\n    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);\n    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);\n  });\n\n\n  it('always has a value for this.refs', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, null));\n    expect(!!instance.refs).toBe(true);\n  });\n});\n\n\nrequire(\"../../mock-modules\").register(\"core/__tests__/refs-test\", module);\n",
"event/__tests__/EventPluginHub-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\")\n  .dontMock('EventPluginHub')\n  .mock('isEventSupported');\n\ndescribe('EventPluginHub', function() {\n  var EventPluginHub;\n  var isEventSupported;\n\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    EventPluginHub = require(\"../../EventPluginHub\");\n    isEventSupported = require(\"../../isEventSupported\");\n    isEventSupported.mockReturnValueOnce(false);\n  });\n\n  it(\"should prevent non-function listeners\", function() {\n    expect(function() {\n      EventPluginHub.putListener(1, 'onClick', 'not a function');\n    }).toThrow(\n      'Invariant Violation: Expected onClick listener to be a function, ' +\n      'instead got type string'\n    );\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"event/__tests__/EventPluginHub-test\", module);\n",
"event/__tests__/EventPluginRegistry-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar assign = require(\"../../Object.assign\");\n\ndescribe('EventPluginRegistry', function() {\n  var EventPluginRegistry;\n  var createPlugin;\n\n  beforeEach(function() {\n    EventPluginRegistry = require(\"../../EventPluginRegistry\");\n    EventPluginRegistry._resetEventPlugins();\n\n    createPlugin = function(properties) {\n      return assign({extractEvents: function() {}}, properties);\n    };\n  });\n\n  it('should be able to inject ordering before plugins', function() {\n    var OnePlugin = createPlugin();\n    var TwoPlugin = createPlugin();\n    var ThreePlugin = createPlugin();\n\n    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);\n    EventPluginRegistry.injectEventPluginsByName({\n      one: OnePlugin,\n      two: TwoPlugin\n    });\n    EventPluginRegistry.injectEventPluginsByName({\n      three: ThreePlugin\n    });\n\n    expect(EventPluginRegistry.plugins.length).toBe(3);\n    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);\n    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);\n    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);\n  });\n\n  it('should be able to inject plugins before and after ordering', function() {\n    var OnePlugin = createPlugin();\n    var TwoPlugin = createPlugin();\n    var ThreePlugin = createPlugin();\n\n    EventPluginRegistry.injectEventPluginsByName({\n      one: OnePlugin,\n      two: TwoPlugin\n    });\n    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);\n    EventPluginRegistry.injectEventPluginsByName({\n      three: ThreePlugin\n    });\n\n    expect(EventPluginRegistry.plugins.length).toBe(3);\n    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);\n    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);\n    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);\n  });\n\n  it('should be able to inject repeated plugins and out-of-order', function() {\n    var OnePlugin = createPlugin();\n    var TwoPlugin = createPlugin();\n    var ThreePlugin = createPlugin();\n\n    EventPluginRegistry.injectEventPluginsByName({\n      one: OnePlugin,\n      three: ThreePlugin\n    });\n    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);\n    EventPluginRegistry.injectEventPluginsByName({\n      two: TwoPlugin,\n      three: ThreePlugin\n    });\n\n    expect(EventPluginRegistry.plugins.length).toBe(3);\n    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);\n    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);\n    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);\n  });\n\n  it('should throw if plugin does not implement `extractEvents`', function() {\n    var BadPlugin = {};\n\n    EventPluginRegistry.injectEventPluginOrder(['bad']);\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginsByName({\n        bad: BadPlugin\n      });\n    }).toThrow(\n      'Invariant Violation: EventPluginRegistry: Event plugins must ' +\n      'implement an `extractEvents` method, but `bad` does not.'\n    );\n  });\n\n  it('should throw if plugin does not exist in ordering', function() {\n    var OnePlugin = createPlugin();\n    var RandomPlugin = createPlugin();\n\n    EventPluginRegistry.injectEventPluginOrder(['one']);\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginsByName({\n        one: OnePlugin,\n        random: RandomPlugin\n      });\n    }).toThrow(\n      'Invariant Violation: EventPluginRegistry: Cannot inject event plugins ' +\n      'that do not exist in the plugin ordering, `random`.'\n    );\n  });\n\n  it('should throw if ordering is injected more than once', function() {\n    var pluginOrdering = [];\n\n    EventPluginRegistry.injectEventPluginOrder(pluginOrdering);\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginOrder(pluginOrdering);\n    }).toThrow(\n      'Invariant Violation: EventPluginRegistry: Cannot inject event plugin ' +\n      'ordering more than once. You are likely trying to load more than one ' +\n      'copy of React.'\n    );\n  });\n\n  it('should throw if different plugins injected using same name', function() {\n    var OnePlugin = createPlugin();\n    var TwoPlugin = createPlugin();\n\n    EventPluginRegistry.injectEventPluginsByName({same: OnePlugin});\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginsByName({same: TwoPlugin});\n    }).toThrow(\n      'Invariant Violation: EventPluginRegistry: Cannot inject two different ' +\n      'event plugins using the same name, `same`.'\n    );\n  });\n\n  it('should publish registration names of injected plugins', function() {\n    var OnePlugin = createPlugin({\n      eventTypes: {\n        click: {registrationName: 'onClick'},\n        focus: {registrationName: 'onFocus'}\n      }\n    });\n    var TwoPlugin = createPlugin({\n      eventTypes: {\n        magic: {\n          phasedRegistrationNames: {\n            bubbled: 'onMagicBubble',\n            captured: 'onMagicCapture'\n          }\n        }\n      }\n    });\n\n    EventPluginRegistry.injectEventPluginsByName({one: OnePlugin});\n    EventPluginRegistry.injectEventPluginOrder(['one', 'two']);\n\n    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(2);\n    expect(EventPluginRegistry.registrationNameModules.onClick).toBe(OnePlugin);\n    expect(EventPluginRegistry.registrationNameModules.onFocus).toBe(OnePlugin);\n\n    EventPluginRegistry.injectEventPluginsByName({two: TwoPlugin});\n\n    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(4);\n    expect(EventPluginRegistry.registrationNameModules.onMagicBubble).toBe(TwoPlugin);\n    expect(\n      EventPluginRegistry.registrationNameModules.onMagicCapture\n    ).toBe(TwoPlugin);\n  });\n\n  it('should throw if multiple registration names collide', function() {\n    var OnePlugin = createPlugin({\n      eventTypes: {\n        photoCapture: {registrationName: 'onPhotoCapture'}\n      }\n    });\n    var TwoPlugin = createPlugin({\n      eventTypes: {\n        photo: {\n          phasedRegistrationNames: {\n            bubbled: 'onPhotoBubble',\n            captured: 'onPhotoCapture'\n          }\n        }\n      }\n    });\n\n    EventPluginRegistry.injectEventPluginsByName({\n      one: OnePlugin,\n      two: TwoPlugin\n    });\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginOrder(['one', 'two']);\n    }).toThrow(\n      'Invariant Violation: EventPluginHub: More than one plugin attempted ' +\n      'to publish the same registration name, `onPhotoCapture`.'\n    );\n  });\n\n  it('should throw if an invalid event is published', function() {\n    var OnePlugin = createPlugin({\n      eventTypes: {\n        badEvent: {/* missing configuration */}\n      }\n    });\n\n    EventPluginRegistry.injectEventPluginsByName({one: OnePlugin});\n\n    expect(function() {\n      EventPluginRegistry.injectEventPluginOrder(['one']);\n    }).toThrow(\n      'Invariant Violation: EventPluginRegistry: Failed to publish event ' +\n      '`badEvent` for plugin `one`.'\n    );\n  });\n\n  it('should be able to get the plugin from synthetic events', function() {\n    var clickDispatchConfig = {\n      registrationName: 'onClick'\n    };\n    var magicDispatchConfig = {\n      phasedRegistrationNames: {\n        bubbled: 'onMagicBubble',\n        captured: 'onMagicCapture'\n      }\n    };\n\n    var OnePlugin = createPlugin({\n      eventTypes: {\n        click: clickDispatchConfig,\n        magic: magicDispatchConfig\n      }\n    });\n\n    var clickEvent = {dispatchConfig: clickDispatchConfig};\n    var magicEvent = {dispatchConfig: magicDispatchConfig};\n\n    expect(EventPluginRegistry.getPluginModuleForEvent(clickEvent)).toBe(null);\n    expect(EventPluginRegistry.getPluginModuleForEvent(magicEvent)).toBe(null);\n\n    EventPluginRegistry.injectEventPluginsByName({one: OnePlugin});\n    EventPluginRegistry.injectEventPluginOrder(['one']);\n\n    expect(\n      EventPluginRegistry.getPluginModuleForEvent(clickEvent)\n    ).toBe(OnePlugin);\n    expect(\n      EventPluginRegistry.getPluginModuleForEvent(magicEvent)\n    ).toBe(OnePlugin);\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"event/__tests__/EventPluginRegistry-test\", module);\n",
"utils/__tests__/LegacyImmutableObject-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\")\n    .dontMock('LegacyImmutableObject');\n\nvar LegacyImmutableObject;\n\n/**\n * To perform performance testing of using `LegacyImmutableObject` vs. not using\n * `LegacyImmutableObject`, such testing must be done with __DEV__ set to false.\n */\ndescribe('LegacyImmutableObject', function() {\n  var message;\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    LegacyImmutableObject = require(\"../../LegacyImmutableObject\");\n    this.addMatchers({\n      /**\n       * Equivalent with respect to serialization. Must stringify because\n       * constructors are different and other comparison methods will not\n       * consider them structurally equal. Probably not useful for use outside\n       * of this test module.\n       */\n      toBeSeriallyEqualTo: function(expected) {\n        var actual = this.actual;\n        var notText = this.isNot ? \" not\" : \"\";\n        this.message = function() {\n          return \"Expected \" + JSON.stringify(actual) + notText +\n              \" to be serially equal to \" + JSON.stringify(expected);\n        };\n\n        return JSON.stringify(actual) === JSON.stringify(expected);\n      }\n    });\n  });\n\n  /**\n   * We are in __DEV__ by default.\n   */\n  var testDev = function(message, testFunc) {\n    it(message, testFunc);\n  };\n\n  var testProd = function(message, testFunc) {\n    // Temporarily enter production mode\n    window.__DEV__ = false;\n    it(message, testFunc);\n    window.__DEV__ = true;\n  };\n\n  var testDevAndProd = function(message, testFunc) {\n    testDev(message + ':DEV', testFunc);\n    testProd(message + ':PROD', testFunc);\n  };\n\n  testDev('should be running in DEV', function() {\n    expect(window.__DEV__).toBe(true);\n  });\n\n  testDev('should not require initial map to be an object', function() {\n    // These won't throw because they're coerced\n\n    expect(function() {\n      new LegacyImmutableObject([1,2,3]);\n    }).not.toThrow();\n\n    expect(function() {\n      new LegacyImmutableObject('asdf');\n    }).not.toThrow();\n\n    expect(function() {\n      new LegacyImmutableObject({oldField: 'asdf', fieldTwo: null});\n    }).not.toThrow();\n  });\n\n  testDev('should not exceed maximum call stack size with nodes', function() {\n    var node = document.createElement('div');\n    var object = new LegacyImmutableObject({node: node});\n    expect(object.node).toBe(node);\n  });\n\n  testDevAndProd('should not throw when not mutating directly', function() {\n    var io = new LegacyImmutableObject({oldField: 'asdf'});\n    expect(function() {\n      LegacyImmutableObject.set(io, {newField: null}); // not a mutation!\n    }).not.toThrow();\n  });\n\n  testDev('should prevent shallow field addition when strict', function() {\n    expect(function() {\n      var io = new LegacyImmutableObject({oldField: 'asdf'});\n      io.newField = 'this will not work';\n    }).toThrow();\n  });\n\n  testDev('should prevent shallow field mutation when strict', function() {\n    expect(function() {\n      var io = new LegacyImmutableObject({oldField: 'asdf'});\n      io.oldField = 'this will not work!';\n    }).toThrow();\n  });\n\n  testDev('should prevent deep field addition when strict', function() {\n    expect(function() {\n      var io =\n        new LegacyImmutableObject(\n          {shallowField: {deepField: {oldField: null}}}\n        );\n      io.shallowField.deepField.oldField = 'this will not work!';\n    }).toThrow();\n  });\n\n  testDev('should prevent deep field mutation when strict', function() {\n    expect(function() {\n      var io =\n        new LegacyImmutableObject(\n          {shallowField: {deepField: {oldField: null}}}\n        );\n      io.shallowField.deepField.newField = 'this will not work!';\n    }).toThrow();\n  });\n\n  testDevAndProd(\n    'should create object with same structure when set with {}',\n    function() {\n      var beforeIO =\n        new LegacyImmutableObject(\n          {shallowField: {deepField: {oldField: null}}}\n        );\n      var afterIO = LegacyImmutableObject.set(beforeIO, {});\n      expect(afterIO).toBeSeriallyEqualTo(beforeIO);\n      expect(afterIO).not.toBe(beforeIO);\n    }\n  );\n\n  testDevAndProd(\n    'should create distinct object with shallow field insertion',\n    function() {\n      var beforeStructure = {\n        oldShallowField: {\n          deepField: {\n            oldField: null\n          }\n        }\n      };\n\n      var delta = {\n        newShallowField: 'newShallowFieldHere'\n      };\n\n      var expectedAfterStructure = {\n        oldShallowField: {\n          deepField: {\n            oldField: null\n          }\n        },\n        newShallowField: 'newShallowFieldHere'\n      };\n\n      var beforeIO = new LegacyImmutableObject(beforeStructure);\n      var afterIO = LegacyImmutableObject.set(beforeIO, delta);\n      expect(afterIO).toBeSeriallyEqualTo(expectedAfterStructure);\n      expect(afterIO).not.toBe(beforeIO);\n    }\n  );\n\n  testDevAndProd(\n    'should create distinct object with shallow field mutation',\n      function() {\n      var beforeStructure = {\n        oldShallowField: {\n          deepField: {\n            oldField: null\n          }\n        }\n      };\n\n      var delta = {\n        oldShallowField: 'this will clobber the old field'\n      };\n\n      var expectedAfterStructure = {\n        oldShallowField: 'this will clobber the old field'\n      };\n\n      var beforeIO = new LegacyImmutableObject(beforeStructure);\n      var afterIO = LegacyImmutableObject.set(beforeIO, delta);\n      expect(afterIO).toBeSeriallyEqualTo(expectedAfterStructure);\n      expect(afterIO).not.toBe(beforeIO);\n    }\n  );\n\n  message = 'should create distinct object with deep field insertion';\n  testDevAndProd(message, function() {\n    var beforeStructure = {\n      oldShallowField: {\n        deepField: {\n          oldField: null\n        }\n      }\n    };\n\n    var delta = {\n      oldShallowField: {newDeepField: 'hello'}\n    };\n\n    // LegacyImmutableObject does not yet support deep merging with\n    // LegacyImmutableObject.set().\n    var expectedAfterStructure = {\n      oldShallowField: {newDeepField: 'hello'}\n    };\n\n    var beforeIO = new LegacyImmutableObject(beforeStructure);\n    var afterIO = LegacyImmutableObject.set(beforeIO, delta);\n    expect(afterIO).toBeSeriallyEqualTo(expectedAfterStructure);\n    expect(afterIO).not.toBe(beforeIO);\n  });\n\n  message =\n    'should tolerate arrays at deeper levels and prevent mutation on them';\n  testDevAndProd(message, function() {\n    if (window.callPhantom) {\n      // PhantomJS has a bug with Object.freeze and Arrays.\n      // https://github.com/ariya/phantomjs/issues/10817\n      return;\n    }\n    var beforeStructure = {\n      shallowField: [1,'second field',3]\n    };\n    var io = new LegacyImmutableObject(beforeStructure);\n    expect(function() {\n      io.newField = 'nope!';\n    }).toThrow();\n    expect(function() {\n      io.shallowField[0] = 'nope!';\n    }).toThrow();\n    expect(io.shallowField[1]).toEqual('second field');\n  });\n\n  message = 'should provide a setField interface as sugar for set()';\n  testDevAndProd(message, function() {\n    var beforeIO = new LegacyImmutableObject({initialField: null});\n    var afterIO =\n      LegacyImmutableObject.setField(beforeIO, 'anotherField', 'anotherValue');\n    expect(afterIO).toBeSeriallyEqualTo({\n      initialField: null,\n      anotherField: 'anotherValue'\n    });\n    expect(afterIO).not.toBe(beforeIO);\n  });\n\n  message = 'should recursively create distinct objects when deep copying';\n  testDevAndProd(message, function() {\n    var beforeIO = new LegacyImmutableObject({\n      a: {b: 'b', c: {}, d: 'd', e: new LegacyImmutableObject({f: 'f'}) }\n    });\n    var afterIO = LegacyImmutableObject.setDeep(beforeIO, {\n      a: {b: {}, c: 'C', e: {f: 'F', g: 'G'}, h: 'H'}\n    });\n    expect(afterIO).toBeSeriallyEqualTo({\n      a: {b: {}, c: 'C', d: 'd', e: {f: 'F', g: 'G'}, h: 'H'}\n    });\n    expect(afterIO).not.toBe(beforeIO);\n    expect(afterIO.a).not.toBe(beforeIO.a);\n    expect(afterIO.a.e).not.toBe(beforeIO.a.e);\n  });\n\n  testDevAndProd('should deep copy member immutability', function() {\n    var beforeIO = new LegacyImmutableObject({\n      a: {b: new LegacyImmutableObject({c: 'c'}), e: {f: 'f'}}\n    });\n    var afterIO = LegacyImmutableObject.setDeep(beforeIO, {\n      a: {b: {d: 'D'}, e: new LegacyImmutableObject({g: 'G'})}\n    });\n    expect(afterIO).toBeSeriallyEqualTo({\n      a: {b: {c: 'c', d: 'D'}, e: {f: 'f', g: 'G'}}\n    });\n    expect(afterIO instanceof LegacyImmutableObject).toBe(true);\n    expect(afterIO.a.b instanceof LegacyImmutableObject).toBe(true);\n    expect(afterIO.a.e instanceof LegacyImmutableObject).toBe(true);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/LegacyImmutableObject-test\", module);\n",
"utils/__tests__/OrderedMap-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar OrderedMap;\n\n/**\n * Shared, reusable objects.\n */\nvar hasEmptyStringKey = {\n  'thisKeyIsFine': {data: []},\n  '': {thisShouldCauseAFailure: []},\n  'thisKeyIsAlsoFine': {data: []}\n};\n\n/**\n * Used as map/forEach callback.\n */\nvar duplicate = function(itm, key, count) {\n  return {\n    uniqueID: itm.uniqueID,\n    val: itm.val + key + count + this.justToTestScope\n  };\n};\n\n// Should not be allowed - because then null/'null' become impossible to\n// distinguish. Every key MUST be a string period!\nvar hasNullAndUndefStringKey = [\n  {uniqueID: 'undefined', val: 'thisIsUndefined'},\n  {uniqueID: 'null', val: 'thisIsNull'}\n];\nvar hasNullKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: null, data: []}\n];\n\nvar hasObjectKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: {}, data: []}\n];\n\nvar hasArrayKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: [], data: []}\n];\n\n// This should be allowed\nvar hasNullStringKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: 'null', data: []}\n];\n\nvar hasUndefinedKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: undefined, data: []}\n];\n\nvar hasUndefinedStringKey = [\n  {uniqueID: 'thisKeyIsFine', data: []},\n  {uniqueID: 'thisKeyIsAlsoFine', data: []},\n  {uniqueID: 'undefined', data: []}\n];\n\nvar hasPositiveNumericKey = [\n  {uniqueID: 'notANumber', data: []},\n  {uniqueID: '5', data: []},\n  {uniqueID: 'notAnotherNumber',data: []}\n];\n\nvar hasZeroStringKey = [\n  {uniqueID: 'greg', data: 'grego'},\n  {uniqueID: '0', data: '0o'},\n  {uniqueID: 'tom', data: 'tomo'}\n];\n\nvar hasZeroNumberKey = [\n  {uniqueID: 'greg', data: 'grego'},\n  {uniqueID: 0, data: '0o'},\n  {uniqueID: 'tom', data: 'tomo'}\n];\n\nvar hasAllNumericStringKeys = [\n  {uniqueID: '0', name: 'Gregory'},\n  {uniqueID: '2', name: 'James'},\n  {uniqueID: '1', name: 'Tom'}\n];\n\nvar hasAllNumericKeys = [\n  {uniqueID: 0, name: 'Gregory'},\n  {uniqueID: 2, name: 'James'},\n  {uniqueID: 1, name: 'Tom'}\n];\n\nvar hasAllValidKeys = [\n  {uniqueID: 'keyOne', value: 'valueOne'},\n  {uniqueID: 'keyTwo', value: 'valueTwo'}\n];\n\nvar hasDuplicateKeys = [\n  {uniqueID: 'keyOne', value: 'valueOne'},\n  {uniqueID: 'keyTwo', value: 'valueTwo'},\n  {uniqueID: 'keyOne', value: 'valueThree'}\n];\n\nvar idEntities = [\n  {uniqueID: 'greg', name: 'Gregory'},\n  {uniqueID: 'james', name: 'James'},\n  {uniqueID: 'tom', name: 'Tom'}\n];\n\nvar hasEmptyKey = [\n  {uniqueID: 'greg', name: 'Gregory'},\n  {uniqueID: '', name: 'James'},\n  {uniqueID: 'tom', name: 'Tom'}\n];\n\nvar extractUniqueID = function(entity) {\n  return entity.uniqueID;\n};\n\ndescribe('OrderedMap', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    OrderedMap = require(\"../../OrderedMap\");\n  });\n\n  it('should create according to simple object with keys', function() {\n    OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);\n    // Iterate over and ensure key order.\n  });\n\n  it('should create from array when providing an identity CB', function() {\n    expect(function() {\n      OrderedMap.fromArray(idEntities, extractUniqueID);\n    }).not.toThrow();\n  });\n\n  it('should throw if constructing from Array without identity CB', function() {\n    OrderedMap.fromArray(idEntities, extractUniqueID);\n    // Iterate and ensure key order\n  });\n\n  it('should not throw when fromArray extracts a numeric key', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasPositiveNumericKey, extractUniqueID);\n    }).not.toThrow();\n\n  });\n\n  it('should throw when any key is the empty string', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasEmptyKey, extractUniqueID);\n    }).toThrow();\n  });\n\n  it('should not throw when a key is the string \"undefined\" or \"null\"',\n    function() {\n      var om = OrderedMap.fromArray(hasNullAndUndefStringKey, extractUniqueID);\n      expect(om.length).toBe(2);\n      expect(om.indexOfKey('undefined')).toBe(0);\n      expect(om.indexOfKey('null')).toBe(1);\n      expect(om.keyAfter('undefined')).toBe('null');\n      expect(om.keyAfter('null')).toBe(undefined);\n      expect(om.keyBefore('undefined')).toBe(undefined);\n      expect(om.has('undefined')).toBe(true);\n      expect(om.has('null')).toBe(true);\n      expect(om.get('undefined').val).toBe('thisIsUndefined');\n      expect(om.get('null').val).toBe('thisIsNull');\n    });\n\n\n  /**\n   * Numeric keys are cast to strings.\n   */\n  it('should not throw when a key is the number zero', function() {\n    var om = OrderedMap.fromArray(hasZeroNumberKey, extractUniqueID);\n    expect(om.length).toBe(3);\n    expect(om.indexOfKey('0')).toBe(1);\n    expect(om.indexOfKey(0)).toBe(1);\n  });\n\n  it('should throw when any key is falsey', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasEmptyStringKey, extractUniqueID);\n    }).toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasNullKey, extractUniqueID);\n    }).toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasUndefinedKey, extractUniqueID);\n    }).toThrow();\n  });\n\n  it('should not throw on string keys \"undefined/null\"', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasNullStringKey, extractUniqueID);\n    }).not.toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasUndefinedStringKey, extractUniqueID);\n    }).not.toThrow();\n  });\n\n  it('should throw on extracting keys that are not strings/nums', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasObjectKey, extractUniqueID);\n    }).toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasArrayKey, extractUniqueID);\n    }).toThrow();\n  });\n\n  it('should throw if instantiating with duplicate key', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasDuplicateKeys, extractUniqueID);\n    }).toThrow();\n  });\n\n  it('should not throw when a key is the string \"0\"', function() {\n    var verifyOM = function(om) {\n      expect(om.length).toBe(3);\n      expect(om.indexOfKey('greg')).toBe(0);\n      expect(om.indexOfKey('0')).toBe(1);\n      expect(om.indexOfKey(0)).toBe(1); // Casts on writes and reads.\n      expect(om.indexOfKey('tom')).toBe(2);\n      expect(om.keyAfter('greg')).toBe('0');\n      expect(om.keyAfter('0')).toBe('tom');\n      expect(om.keyAfter(0)).toBe('tom');\n      expect(om.keyAfter('tom')).toBe(undefined);\n      expect(om.keyBefore('greg')).toBe(undefined);\n      expect(om.keyBefore(0)).toBe('greg');\n      expect(om.keyBefore('0')).toBe('greg');\n      expect(om.keyBefore('tom')).toBe('0');\n      expect(om.has('undefined')).toBe(false);\n      expect(om.has(0)).toBe(true);\n      expect(om.has('0')).toBe(true);\n    };\n    var om = OrderedMap.fromArray(hasZeroStringKey, extractUniqueID);\n    verifyOM(om);\n    om = OrderedMap.fromArray(hasZeroNumberKey, extractUniqueID);\n    verifyOM(om);\n  });\n\n  it('should throw when getting invalid public key', function() {\n    var om = OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);\n    expect(function() {\n      om.has(undefined);\n    }).toThrow();\n    expect(function() {\n      om.get(undefined);\n    }).toThrow();\n    expect(function() {\n      om.has(null);\n    }).toThrow();\n    expect(function() {\n      om.get(null);\n    }).toThrow();\n    expect(function() {\n      om.has('');\n    }).toThrow();\n    expect(function() {\n      om.get('');\n    }).toThrow();\n  });\n\n  it('should throw when any key is falsey', function() {\n    expect(function() {\n      OrderedMap.fromArray(hasEmptyStringKey, extractUniqueID);\n    }).toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasNullKey, extractUniqueID);\n    }).toThrow();\n\n    expect(function() {\n      OrderedMap.fromArray(hasUndefinedKey, extractUniqueID);\n    }).toThrow();\n  });\n\n\n  it('should throw when fromArray is passed crazy args', function() {\n    // Test passing another OrderedMap (when it expects a plain object.)\n    // This is probably not what you meant to do! We should error.\n    var validOM = OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);\n    expect(function() {\n      OrderedMap.fromArray({uniqueID: 'asdf'}, extractUniqueID);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray(validOM, extractUniqueID);\n    }).toThrow();\n  });\n\n  it('should throw when fromArray is passed crazy things', function() {\n    expect(function() {\n      OrderedMap.fromArray(null, extractUniqueID);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray('stringgg', extractUniqueID);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray(undefined, extractUniqueID);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray(new Date(), extractUniqueID);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray({}, extractUniqueID);\n    }).toThrow();\n\n    // Test failure without extractor\n    expect(function() {\n      OrderedMap.fromArray(idEntities);\n    }).toThrow();\n    expect(function() {\n      OrderedMap.fromArray(idEntities, extractUniqueID);\n    }).not.toThrow();\n  });\n\n  // Testing methods that accept other `OrderedMap`s.\n  it('should throw when from/merge is passed an non-OrderedMap.', function() {\n    // Test passing an array to construction.\n    expect(function() {\n      OrderedMap.from(idEntities, extractUniqueID);\n    }).toThrow();\n\n    // Test passing an array to merge.\n    expect(function() {\n      OrderedMap.fromArray(idEntities, extractUniqueID)\n        .merge(idEntities, extractUniqueID);\n    }).toThrow();\n\n\n    // Test passing a plain object to merge.\n    expect(function() {\n      OrderedMap.fromArray(\n        idEntities,\n        extractUniqueID\n      ).merge({blah: 'willFail'});\n    }).toThrow();\n  });\n\n  it('should throw when accessing key before/after of non-key', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'first'},\n      {uniqueID: 'two'}], extractUniqueID\n    );\n    expect(function() {\n      om.keyBefore('dog');\n    }).toThrow();\n    expect(function() {\n      om.keyAfter('cat');\n    }).toThrow();\n    expect(function() {\n      om.keyAfter(null);\n    }).toThrow();\n    expect(function() {\n      om.keyAfter(undefined);\n    }).toThrow();\n  });\n\n  it('should throw passing invalid/not-present-keys to before/after',\n    function() {\n      var om = OrderedMap.fromArray([\n        {uniqueID: 'one', val: 'first'},\n        {uniqueID: 'two', val: 'second'},\n        {uniqueID: 'three', val: 'third'},\n        {uniqueID: 'four', val: 'fourth'}\n      ], extractUniqueID);\n\n      expect(function() {\n        om.keyBefore('');\n      }).toThrow();\n      expect(function() {\n        om.keyBefore(null);\n      }).toThrow();\n      expect(function() {\n        om.keyBefore(undefined);\n      }).toThrow();\n      expect(function() {\n        om.keyBefore('notInTheOrderedMap!');\n      }).toThrow();\n\n      expect(function() {\n        om.keyAfter('');\n      }).toThrow();\n      expect(function() {\n        om.keyAfter(null);\n      }).toThrow();\n      expect(function() {\n        om.keyAfter(undefined);\n      }).toThrow();\n      expect(function() {\n        om.keyAfter('notInTheOrderedMap!');\n      }).toThrow();\n\n      expect(function() {\n        om.nthKeyAfter('', 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyAfter(null, 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyAfter(undefined, 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyAfter('notInTheOrderedMap!', 1);\n      }).toThrow();\n\n      expect(function() {\n        om.nthKeyBefore('', 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyBefore(null, 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyBefore(undefined, 1);\n      }).toThrow();\n      expect(function() {\n        om.nthKeyBefore('notInTheOrderedMap!', 1);\n      }).toThrow();\n    });\n\n  it('should correctly determine the nth key after before', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'one', val: 'first'},\n      {uniqueID: 'two', val: 'second'},\n      {uniqueID: 'three', val: 'third'},\n      {uniqueID: 'four', val: 'fourth'}\n    ], extractUniqueID);\n    expect(om.keyBefore('one')).toBe(undefined); // first key\n    expect(om.keyBefore('two')).toBe('one');\n    expect(om.keyBefore('three')).toBe('two');\n    expect(om.keyBefore('four')).toBe('three');\n\n    expect(om.keyAfter('one')).toBe('two'); // first key\n    expect(om.keyAfter('two')).toBe('three');\n    expect(om.keyAfter('three')).toBe('four');\n    expect(om.keyAfter('four')).toBe(undefined);\n\n    expect(om.nthKeyBefore('one', 0)).toBe('one'); // first key\n    expect(om.nthKeyBefore('one', 1)).toBe(undefined);\n    expect(om.nthKeyBefore('one', 2)).toBe(undefined);\n    expect(om.nthKeyBefore('two', 0)).toBe('two');\n    expect(om.nthKeyBefore('two', 1)).toBe('one');\n    expect(om.nthKeyBefore('four', 0)).toBe('four');\n    expect(om.nthKeyBefore('four', 1)).toBe('three');\n\n    expect(om.nthKeyAfter('one', 0)).toBe('one');\n    expect(om.nthKeyAfter('one', 1)).toBe('two');\n    expect(om.nthKeyAfter('one', 2)).toBe('three');\n    expect(om.nthKeyAfter('two', 0)).toBe('two');\n    expect(om.nthKeyAfter('two', 1)).toBe('three');\n    expect(om.nthKeyAfter('four', 0)).toBe('four');\n    expect(om.nthKeyAfter('four', 1)).toBe(undefined);\n  });\n\n  it('should compute key indices correctly', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'one', val: 'first'},\n      {uniqueID: 'two', val: 'second'}\n    ], extractUniqueID);\n    expect(om.keyAtIndex(0)).toBe('one');\n    expect(om.keyAtIndex(1)).toBe('two');\n    expect(om.keyAtIndex(2)).toBe(undefined);\n    expect(om.indexOfKey('one')).toBe(0);\n    expect(om.indexOfKey('two')).toBe(1);\n    expect(om.indexOfKey('nope')).toBe(undefined);\n    expect(function() {\n      om.indexOfKey(null);\n    }).toThrow();\n    expect(function() {\n      om.indexOfKey(undefined);\n    }).toThrow();\n    expect(function() {\n      om.indexOfKey(''); // Empty key is not allowed\n    }).toThrow();\n  });\n\n  it('should compute indices on array that extracted numeric ids', function() {\n    var om = OrderedMap.fromArray(hasZeroStringKey, extractUniqueID);\n    expect(om.keyAtIndex(0)).toBe('greg');\n    expect(om.keyAtIndex(1)).toBe('0');\n    expect(om.keyAtIndex(2)).toBe('tom');\n    expect(om.indexOfKey('greg')).toBe(0);\n    expect(om.indexOfKey('0')).toBe(1);\n    expect(om.indexOfKey('tom')).toBe(2);\n\n\n    var verifyNumericKeys = function(om) {\n      expect(om.keyAtIndex(0)).toBe('0');\n      expect(om.keyAtIndex(1)).toBe('2');\n      expect(om.keyAtIndex(2)).toBe('1');\n      expect(om.indexOfKey('0')).toBe(0);\n      expect(om.indexOfKey('2')).toBe(1); // Proove these are not ordered by\n      expect(om.indexOfKey('1')).toBe(2); // their keys\n    };\n    var omStringNumberKeys =\n      OrderedMap.fromArray(hasAllNumericStringKeys, extractUniqueID);\n    verifyNumericKeys(omStringNumberKeys);\n    var omNumericKeys =\n      OrderedMap.fromArray(hasAllNumericKeys, extractUniqueID);\n    verifyNumericKeys(omNumericKeys);\n  });\n\n  it('should compute indices on mutually exclusive merge', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'one', val: 'first'},\n      {uniqueID: 'two', val: 'second'}\n    ], extractUniqueID);\n    var om2 = OrderedMap.fromArray([\n      {uniqueID: 'three', val: 'third'}\n    ], extractUniqueID);\n    var res = om.merge(om2);\n\n    expect(res.length).toBe(3);\n\n    expect(res.keyAtIndex(0)).toBe('one');\n    expect(res.keyAtIndex(1)).toBe('two');\n    expect(res.keyAtIndex(2)).toBe('three');\n    expect(res.keyAtIndex(3)).toBe(undefined);\n\n    expect(res.indexOfKey('one')).toBe(0);\n    expect(res.indexOfKey('two')).toBe(1);\n    expect(res.indexOfKey('three')).toBe(2);\n    expect(res.indexOfKey('dog')).toBe(undefined);\n\n    expect(res.has('one')).toBe(true);\n    expect(res.has('two')).toBe(true);\n    expect(res.has('three')).toBe(true);\n    expect(res.has('dog')).toBe(false);\n\n    expect(res.get('one').val).toBe('first');\n    expect(res.get('two').val).toBe('second');\n    expect(res.get('three').val).toBe('third');\n    expect(res.get('dog')).toBe(undefined);\n  });\n\n  it('should compute indices on intersected merge', function() {\n    var oneTwo = OrderedMap.fromArray([\n      {uniqueID: 'one', val: 'first'},\n      {uniqueID: 'two', val: 'secondOM1'}\n    ], extractUniqueID);\n\n    var testOneTwoMergedWithTwoThree = function(res) {\n      expect(res.length).toBe(3);\n      expect(res.keyAtIndex(0)).toBe('one');\n      expect(res.keyAtIndex(1)).toBe('two');\n      expect(res.keyAtIndex(2)).toBe('three');\n      expect(res.keyAtIndex(3)).toBe(undefined);\n      expect(res.indexOfKey('one')).toBe(0);\n      expect(res.indexOfKey('two')).toBe(1);\n      expect(res.indexOfKey('three')).toBe(2);\n      expect(res.indexOfKey('dog')).toBe(undefined);\n      expect(res.has('one')).toBe(true);\n      expect(res.has('two')).toBe(true);\n      expect(res.has('three')).toBe(true);\n      expect(res.has('dog')).toBe(false);\n      expect(res.get('one').val).toBe('first');\n      expect(res.get('two').val).toBe('secondOM2');\n      expect(res.get('three').val).toBe('third');\n      expect(res.get('dog')).toBe(undefined);\n    };\n\n    var result =\n      oneTwo.merge(OrderedMap.fromArray([\n        {uniqueID: 'two', val: 'secondOM2'},\n        {uniqueID: 'three', val: 'third'}\n      ], extractUniqueID));\n    testOneTwoMergedWithTwoThree(result);\n\n    // Everything should be exactly as before, since the ordering of `two` was\n    // already determined by `om`.\n    result = oneTwo.merge(\n      OrderedMap.fromArray([\n        {uniqueID: 'three', val: 'third'},\n        {uniqueID: 'two', val:'secondOM2'}\n      ], extractUniqueID)\n    );\n    testOneTwoMergedWithTwoThree(result);\n\n\n    var testTwoThreeMergedWithOneTwo = function(res) {\n      expect(res.length).toBe(3);\n      expect(res.keyAtIndex(0)).toBe('two');\n      expect(res.keyAtIndex(1)).toBe('three');\n      expect(res.keyAtIndex(2)).toBe('one');\n      expect(res.keyAtIndex(3)).toBe(undefined);\n      expect(res.indexOfKey('two')).toBe(0);\n      expect(res.indexOfKey('three')).toBe(1);\n      expect(res.indexOfKey('one')).toBe(2);\n      expect(res.indexOfKey('cat')).toBe(undefined);\n      expect(res.has('two')).toBe(true);\n      expect(res.has('three')).toBe(true);\n      expect(res.has('one')).toBe(true);\n      expect(res.has('dog')).toBe(false);\n      expect(res.get('one').val).toBe('first');\n      expect(res.get('two').val).toBe('secondOM1');\n      expect(res.get('three').val).toBe('third');\n      expect(res.get('dog')).toBe(undefined);\n    };\n    result = OrderedMap.fromArray([\n        {uniqueID: 'two', val: 'secondOM2'},\n        {uniqueID: 'three', val: 'third'}\n      ], extractUniqueID).merge(oneTwo);\n    testTwoThreeMergedWithOneTwo(result);\n\n  });\n\n  it('should merge mutually exclusive keys to the end.', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'one', val: 'first'},\n      {uniqueID: 'two', val: 'second'}\n    ], extractUniqueID);\n    var om2 = OrderedMap.fromArray([\n      {uniqueID: 'three', val: 'first'},\n      {uniqueID: 'four', val: 'second'}\n    ], extractUniqueID);\n    var res = om.merge(om2);\n    expect(res.length).toBe(4);\n\n  });\n\n  it('should map correctly', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'x', val: 'xx'},\n      {uniqueID: 'y', val: 'yy'},\n      {uniqueID: 'z', val: 'zz'}\n    ], extractUniqueID);\n    var scope = {justToTestScope: 'justTestingScope'};\n    var verifyResult = function(omResult) {\n      expect(omResult.length).toBe(3);\n      expect(omResult.keyAtIndex(0)).toBe('x');\n      expect(omResult.keyAtIndex(1)).toBe('y');\n      expect(omResult.keyAtIndex(2)).toBe('z');\n      expect(omResult.get('x').val).toBe('xxx0justTestingScope');\n      expect(omResult.get('y').val).toBe('yyy1justTestingScope');\n      expect(omResult.get('z').val).toBe('zzz2justTestingScope');\n    };\n    var resultOM = om.map(function(itm, key, count) {\n      return {\n        uniqueID: itm.uniqueID,\n        val: itm.val + key + count + this.justToTestScope\n      };\n    }, scope);\n    verifyResult(resultOM);\n\n    var resArray = [];\n    om.forEach(function(itm, key, count) {\n      resArray.push({\n        uniqueID: itm.uniqueID,\n        val: itm.val + key + count + this.justToTestScope\n      });\n    }, scope);\n    resultOM = OrderedMap.fromArray(resArray, extractUniqueID);\n    verifyResult(resultOM);\n  });\n\n  it('should filter correctly', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'x', val: 'xx'},\n      {uniqueID: 'y', val: 'yy'},\n      {uniqueID: 'z', val: 'zz'}\n    ], extractUniqueID);\n    var scope = {justToTestScope: 'justTestingScope'};\n\n    var filteringCallback = function(item, key, indexInOriginal) {\n      expect(this).toBe(scope);\n      expect(key === 'x' || key === 'y' || key === 'z').toBe(true);\n      if (key === 'x') {\n        expect(item.val).toBe('xx');\n        expect(indexInOriginal).toBe(0);\n        return false;\n      } else if (key === 'y') {\n        expect(item.val).toBe('yy');\n        expect(indexInOriginal).toBe(1);\n        return true;\n      } else {\n        expect(item.val).toBe('zz');\n        expect(indexInOriginal).toBe(2);\n        return true;\n      }\n    };\n\n    var verifyResult = function(omResult) {\n      expect(omResult.length).toBe(2);\n      expect(omResult.keyAtIndex(0)).toBe('y');\n      expect(omResult.keyAtIndex(1)).toBe('z');\n      expect(omResult.has('x')).toBe(false);\n      expect(omResult.has('z')).toBe(true);\n      expect(omResult.get('z').val).toBe('zz');\n      expect(omResult.has('y')).toBe(true);\n      expect(omResult.get('y').val).toBe('yy');\n    };\n\n    var resultOM = om.filter(filteringCallback, scope);\n    verifyResult(resultOM);\n  });\n\n  it('should throw when providing invalid ranges to ranging', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'x', val: 'xx'},\n      {uniqueID: 'y', val: 'yy'},\n      {uniqueID: 'z', val: 'zz'}\n    ], extractUniqueID);\n    var scope = {justToTestScope: 'justTestingScope'};\n\n    expect(function() {\n      om.mapRange(duplicate, 0, 3, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 0, 3, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 0, 3, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'x' , 3, scope);\n    }).toThrow(\n      'Invariant Violation: mapKeyRange must be given keys ' +\n      'that are present.'\n    );\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'x', 3, scope);\n    }).toThrow(\n      'Invariant Violation: forEachKeyRange must be given keys ' +\n      'that are present.'\n    );\n\n    expect(function() {\n      om.mapRange(duplicate, 0, 4, scope);\n    }).toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 0, 4, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 0, 4, scope);\n    }).toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'x', null, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'x', null, scope);\n    }).toThrow();\n\n    expect(function() {\n      om.mapRange(duplicate, -1, 1, scope);\n    }).toThrow();\n    expect(function() {\n      om.filterRange(duplicate, -1, 1, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, -1, 1, scope);\n    }).toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, null, 'y', scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, null, 'y', scope);\n    }).toThrow();\n\n    expect(function() {\n      om.mapRange(duplicate, 0, 0, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 0, 0, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 0, 0, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'x', 'x', scope);\n    }).not.toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'x', 'x', scope);\n    }).not.toThrow();\n\n    expect(function() {\n      om.mapRange(duplicate, 0, -1, scope);\n    }).toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 0, -1, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 0, -1, scope);\n    }).toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'x', null, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'x', null, scope);\n    }).toThrow();\n\n    expect(function() {\n      om.mapRange(duplicate, 2, 1, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 2, 1, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 2, 1, scope);\n    }).not.toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'z', 'z', scope);\n    }).not.toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'z', 'z', scope);\n    }).not.toThrow();\n\n    expect(function() {\n      om.mapRange(duplicate, 2, 2, scope);\n    }).toThrow();\n    expect(function() {\n      om.filterRange(duplicate, 2, 2, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachRange(duplicate, 2, 2, scope);\n    }).toThrow();\n    expect(function() {\n      om.mapKeyRange(duplicate, 'z', null, scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'z', null, scope);\n    }).toThrow();\n\n    // Provide keys in reverse order - should throw.\n    expect(function() {\n      om.mapKeyRange(duplicate, 'y', 'x', scope);\n    }).toThrow();\n    expect(function() {\n      om.forEachKeyRange(duplicate, 'y', 'x', scope);\n    }).toThrow();\n  });\n\n  // TEST length zero map, or keyrange start===end\n\n  it('should map range correctly', function() {\n    var om = OrderedMap.fromArray([\n      {uniqueID: 'x', val: 'xx'},\n      {uniqueID: 'y', val: 'yy'},\n      {uniqueID: 'z', val: 'zz'}\n    ], extractUniqueID);\n    var scope = {justToTestScope: 'justTestingScope'};\n    var verifyThreeItems = function(omResult) {\n      expect(omResult.length).toBe(3);\n      expect(omResult.keyAtIndex(0)).toBe('x');\n      expect(omResult.keyAtIndex(1)).toBe('y');\n      expect(omResult.keyAtIndex(2)).toBe('z');\n      expect(omResult.get('x').val).toBe('xxx0justTestingScope');\n      expect(omResult.get('y').val).toBe('yyy1justTestingScope');\n      expect(omResult.get('z').val).toBe('zzz2justTestingScope');\n    };\n    var verifyFirstTwoItems = function(omResult) {\n      expect(omResult.length).toBe(2);\n      expect(omResult.keyAtIndex(0)).toBe('x');\n      expect(omResult.keyAtIndex(1)).toBe('y');\n      expect(omResult.get('x').val).toBe('xxx0justTestingScope');\n      expect(omResult.get('y').val).toBe('yyy1justTestingScope');\n    };\n\n    var verifyLastTwoItems = function(omResult) {\n      expect(omResult.length).toBe(2);\n      expect(omResult.keyAtIndex(0)).toBe('y');\n      expect(omResult.keyAtIndex(1)).toBe('z');\n      expect(omResult.get('y').val).toBe('yyy1justTestingScope');\n      expect(omResult.get('z').val).toBe('zzz2justTestingScope');\n    };\n\n    var verifyMiddleItem = function(omResult) {\n      expect(omResult.length).toBe(1);\n      expect(omResult.keyAtIndex(0)).toBe('y');\n      expect(omResult.get('y').val).toBe('yyy1justTestingScope');\n    };\n\n    var verifyEmpty = function(omResult) {\n      expect(omResult.length).toBe(0);\n    };\n\n    var omResultThree = om.mapRange(duplicate, 0, 3, scope);\n    verifyThreeItems(omResultThree);\n    var resArray = [];\n    var pushToResArray = function(itm, key, count) {\n      resArray.push({\n        uniqueID: itm.uniqueID,\n        val: itm.val + key + count + this.justToTestScope\n      });\n    };\n\n    om.forEachRange(pushToResArray, 0, 3, scope);\n    omResultThree = OrderedMap.fromArray(resArray, extractUniqueID);\n    verifyThreeItems(omResultThree);\n\n    var omResultFirstTwo = om.mapRange(duplicate, 0, 2, scope);\n    verifyFirstTwoItems(omResultFirstTwo);\n    resArray = [];\n    om.forEachRange(pushToResArray, 0, 2, scope);\n    omResultFirstTwo = OrderedMap.fromArray(resArray, extractUniqueID);\n    verifyFirstTwoItems(omResultFirstTwo);\n\n    var omResultLastTwo = om.mapRange(duplicate, 1, 2, scope);\n    verifyLastTwoItems(omResultLastTwo);\n    resArray = [];\n    om.forEachRange(pushToResArray, 1, 2, scope);\n    omResultLastTwo = OrderedMap.fromArray(resArray, extractUniqueID);\n    verifyLastTwoItems(omResultLastTwo);\n\n    var omResultMiddle = om.mapRange(duplicate, 1, 1, scope);\n    verifyMiddleItem(omResultMiddle);\n    resArray = [];\n    om.forEachRange(pushToResArray, 1, 1, scope);\n    omResultMiddle = OrderedMap.fromArray(resArray, extractUniqueID);\n    verifyMiddleItem(omResultMiddle);\n\n    var omResultNone = om.mapRange(duplicate, 1, 0, scope);\n    verifyEmpty(omResultNone);\n  });\n\n  it('should extract the original array correctly', function() {\n    var sourceArray = [\n      {uniqueID: 'x', val: 'xx'},\n      {uniqueID: 'y', val: 'yy'},\n      {uniqueID: 'z', val: 'zz'}\n    ];\n    var om = OrderedMap.fromArray(sourceArray, extractUniqueID);\n    expect(om.toArray()).toEqual(sourceArray);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/OrderedMap-test\", module);\n",
"utils/__tests__/PooledClass-test":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar PooledClass;\nvar PoolableClass;\n\ndescribe('Pooled class', function() {\n  beforeEach(function() {\n    PooledClass = require(\"../../PooledClass\");\n    PoolableClass = function() {};\n    PooledClass.addPoolingTo(PoolableClass);\n  });\n\n  it('should initialize a pool correctly', function() {\n    expect(PoolableClass.instancePool).toBeDefined();\n  });\n\n  it('should return a new instance when the pool is empty', function() {\n    var instance = PoolableClass.getPooled();\n    expect(instance instanceof PoolableClass).toBe(true);\n  });\n\n  it('should return the instance back into the pool when it gets released',\n    function() {\n      var instance = PoolableClass.getPooled();\n      PoolableClass.release(instance);\n      expect(PoolableClass.instancePool.length).toBe(1);\n      expect(PoolableClass.instancePool[0]).toBe(instance);\n    }\n  );\n\n  it('should return an old instance if available in the pool', function() {\n    var instance = PoolableClass.getPooled();\n    PoolableClass.release(instance);\n    var instance2 = PoolableClass.getPooled();\n    expect(instance).toBe(instance2);\n  });\n\n  it('should call the destructor when instance gets released', function() {\n    var log = [];\n    var PoolableClassWithDestructor = function() {};\n    PoolableClassWithDestructor.prototype.destructor = function() {\n      log.push('released');\n    };\n    PooledClass.addPoolingTo(PoolableClassWithDestructor);\n    var instance = PoolableClassWithDestructor.getPooled();\n    PoolableClassWithDestructor.release(instance);\n    expect(log).toEqual(['released']);\n  });\n\n  it('should accept poolers with different arguments', function() {\n    var log = [];\n    var PoolableClassWithMultiArguments = function(a, b) {\n      log.push(a, b);\n    };\n    PooledClass.addPoolingTo(\n      PoolableClassWithMultiArguments,\n      PooledClass.twoArgumentPooler\n    );\n    PoolableClassWithMultiArguments.getPooled('a', 'b', 'c');\n    expect(log).toEqual(['a', 'b']);\n  });\n\n  it('should throw when the class releases an instance of a different type',\n    function() {\n      var RandomClass = function() {};\n      PooledClass.addPoolingTo(RandomClass);\n      var randomInstance = RandomClass.getPooled();\n      PoolableClass.getPooled();\n      expect(function() {\n        PoolableClass.release(randomInstance);\n      }).toThrow(\n        'Invariant Violation: Trying to release an instance into a pool ' +\n        'of a different type.'\n      );\n    }\n  );\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/PooledClass-test\", module);\n",
"utils/__tests__/ReactChildren-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('ReactChildren', function() {\n  var ReactChildren;\n  var React;\n\n  beforeEach(function() {\n    ReactChildren = require(\"../../ReactChildren\");\n    React = require(\"../../React\");\n  });\n\n\n  it('should support identity for simple', function() {\n    var callback = jasmine.createSpy().andCallFake(function(kid, index) {\n      return kid;\n    });\n\n    var simpleKid = React.createElement(\"span\", {key: \"simple\"});\n\n    // First pass children into a component to fully simulate what happens when\n    // using structures that arrive from transforms.\n\n    var instance = React.createElement(\"div\", null, simpleKid);\n    ReactChildren.forEach(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    callback.reset();\n    var mappedChildren = ReactChildren.map(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    expect(mappedChildren[Object.keys(mappedChildren)[0]]).toBe(simpleKid);\n  });\n\n  it('should treat single arrayless child as being in array', function() {\n    var callback = jasmine.createSpy().andCallFake(function(kid, index) {\n      return kid;\n    });\n\n    var simpleKid = React.createElement(\"span\", null);\n    var instance = React.createElement(\"div\", null, simpleKid);\n    ReactChildren.forEach(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    callback.reset();\n    var mappedChildren = ReactChildren.map(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    expect(mappedChildren[Object.keys(mappedChildren)[0]]).toBe(simpleKid);\n  });\n\n  it('should treat single child in array as expected', function() {\n    var callback = jasmine.createSpy().andCallFake(function(kid, index) {\n      return kid;\n    });\n\n    var simpleKid = React.createElement(\"span\", null);\n    var instance = React.createElement(\"div\", null, [simpleKid]);\n    ReactChildren.forEach(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    callback.reset();\n    var mappedChildren = ReactChildren.map(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(simpleKid, 0);\n    expect(mappedChildren[Object.keys(mappedChildren)[0]]).toBe(simpleKid);\n  });\n\n  it('should pass key to returned component', function() {\n    var mapFn = function(kid, index) {\n      return React.createElement(\"div\", null, kid);\n    };\n\n    var simpleKid = React.createElement(\"span\", {key: \"simple\"});\n\n    var instance = React.createElement(\"div\", null, simpleKid);\n    var mappedChildren = ReactChildren.map(instance.props.children, mapFn);\n\n    var mappedKeys = Object.keys(mappedChildren);\n    expect(mappedKeys.length).toBe(1);\n    expect(mappedChildren[mappedKeys[0]]).not.toBe(simpleKid);\n    expect(mappedChildren[mappedKeys[0]].props.children).toBe(simpleKid);\n    expect(mappedKeys[0]).toBe('.$simple');\n  });\n\n  it('should invoke callback with the right context', function() {\n    var lastContext;\n    var callback = function(kid, index) {\n      lastContext = this;\n      return this;\n    };\n\n    var scopeTester = {};\n\n    var simpleKid = React.createElement(\"span\", {key: \"simple\"});\n    var instance = React.createElement(\"div\", null, simpleKid);\n    ReactChildren.forEach(instance.props.children, callback, scopeTester);\n    expect(lastContext).toBe(scopeTester);\n\n    var mappedChildren =\n      ReactChildren.map(instance.props.children, callback, scopeTester);\n\n    var mappedKeys = Object.keys(mappedChildren);\n    expect(mappedKeys.length).toBe(1);\n    expect(mappedChildren[mappedKeys[0]]).toBe(scopeTester);\n  });\n\n  it('should be called for each child', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n\n    var zeroMapped = React.createElement(\"div\", {key: \"giraffe\"});  // Key should be joined to obj key\n    var oneMapped = null;  // Key should be added even if we don't supply it!\n    var twoMapped = React.createElement(\"div\", null);  // Key should be added even if not supplied!\n    var threeMapped = React.createElement(\"span\", null); // Map from null to something.\n    var fourMapped = React.createElement(\"div\", {key: \"keyFour\"});\n\n    var callback = jasmine.createSpy().andCallFake(function(kid, index) {\n      return index === 0 ? zeroMapped :\n        index === 1 ? oneMapped :\n        index === 2 ? twoMapped :\n        index === 3 ? threeMapped : fourMapped;\n    });\n\n    var instance = (\n      React.createElement(\"div\", null, \n        zero, \n        one, \n        two, \n        three, \n        four\n      )\n    );\n\n    ReactChildren.forEach(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(zero, 0);\n    expect(callback).toHaveBeenCalledWith(one, 1);\n    expect(callback).toHaveBeenCalledWith(two, 2);\n    expect(callback).toHaveBeenCalledWith(three, 3);\n    expect(callback).toHaveBeenCalledWith(four, 4);\n    callback.reset();\n\n    var mappedChildren =\n      ReactChildren.map(instance.props.children, callback);\n    var mappedKeys = Object.keys(mappedChildren);\n    expect(callback.calls.length).toBe(5);\n    expect(mappedKeys.length).toBe(5);\n    // Keys default to indices.\n    expect(mappedKeys).toEqual(\n      ['.$keyZero', '.1', '.$keyTwo', '.3', '.$keyFour']\n    );\n\n    expect(callback).toHaveBeenCalledWith(zero, 0);\n    expect(mappedChildren[mappedKeys[0]]).toBe(zeroMapped);\n\n    expect(callback).toHaveBeenCalledWith(one, 1);\n    expect(mappedChildren[mappedKeys[1]]).toBe(oneMapped);\n\n    expect(callback).toHaveBeenCalledWith(two, 2);\n    expect(mappedChildren[mappedKeys[2]]).toBe(twoMapped);\n\n    expect(callback).toHaveBeenCalledWith(three, 3);\n    expect(mappedChildren[mappedKeys[3]]).toBe(threeMapped);\n\n    expect(callback).toHaveBeenCalledWith(four, 4);\n    expect(mappedChildren[mappedKeys[4]]).toBe(fourMapped);\n  });\n\n\n  it('should be called for each child in nested structure', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n    var five = React.createElement(\"div\", {key: \"keyFiveInner\"});\n    // five is placed into a JS object with a key that is joined to the\n    // component key attribute.\n    // Precedence is as follows:\n    // 1. If grouped in an Object, the object key combined with `key` prop\n    // 2. If grouped in an Array, the `key` prop, falling back to array index\n\n    var zeroMapped = React.createElement(\"div\", {key: \"giraffe\"});  // Key should be overridden\n    var oneMapped = null;  // Key should be added even if we don't supply it!\n    var twoMapped = React.createElement(\"div\", null);  // Key should be added even if not supplied!\n    var threeMapped = React.createElement(\"span\", null); // Map from null to something.\n    var fourMapped = React.createElement(\"div\", {key: \"keyFour\"});\n    var fiveMapped = React.createElement(\"div\", null);\n\n    var callback = jasmine.createSpy().andCallFake(function(kid, index) {\n      return index === 0 ? zeroMapped :\n        index === 1 ? oneMapped :\n        index === 2 ? twoMapped :\n        index === 3 ? threeMapped :\n        index === 4 ? fourMapped : fiveMapped;\n    });\n\n    var instance = (\n      React.createElement(\"div\", null, \n        [{\n          firstHalfKey: [zero, one, two],\n          secondHalfKey: [three, four],\n          keyFive: five\n        }]\n      )\n    );\n\n    ReactChildren.forEach(instance.props.children, callback);\n    expect(callback).toHaveBeenCalledWith(zero, 0);\n    expect(callback).toHaveBeenCalledWith(one, 1);\n    expect(callback).toHaveBeenCalledWith(two, 2);\n    expect(callback).toHaveBeenCalledWith(three, 3);\n    expect(callback).toHaveBeenCalledWith(four, 4);\n    expect(callback).toHaveBeenCalledWith(five, 5);\n    callback.reset();\n\n    var mappedChildren = ReactChildren.map(instance.props.children, callback);\n    var mappedKeys = Object.keys(mappedChildren);\n    expect(callback.calls.length).toBe(6);\n    expect(mappedKeys.length).toBe(6);\n    // Keys default to indices.\n    expect(mappedKeys).toEqual([\n      '.0:$firstHalfKey:0:$keyZero',\n      '.0:$firstHalfKey:0:1',\n      '.0:$firstHalfKey:0:$keyTwo',\n      '.0:$secondHalfKey:0:0',\n      '.0:$secondHalfKey:0:$keyFour',\n      '.0:$keyFive:$keyFiveInner'\n    ]);\n\n    expect(callback).toHaveBeenCalledWith(zero, 0);\n    expect(mappedChildren[mappedKeys[0]]).toBe(zeroMapped);\n\n    expect(callback).toHaveBeenCalledWith(one, 1);\n    expect(mappedChildren[mappedKeys[1]]).toBe(oneMapped);\n\n    expect(callback).toHaveBeenCalledWith(two, 2);\n    expect(mappedChildren[mappedKeys[2]]).toBe(twoMapped);\n\n    expect(callback).toHaveBeenCalledWith(three, 3);\n    expect(mappedChildren[mappedKeys[3]]).toBe(threeMapped);\n\n    expect(callback).toHaveBeenCalledWith(four, 4);\n    expect(mappedChildren[mappedKeys[4]]).toBe(fourMapped);\n\n    expect(callback).toHaveBeenCalledWith(five, 5);\n    expect(mappedChildren[mappedKeys[5]]).toBe(fiveMapped);\n  });\n\n  it('should retain key across two mappings', function() {\n    var zeroForceKey = React.createElement(\"div\", {key: \"keyZero\"});\n    var oneForceKey = React.createElement(\"div\", {key: \"keyOne\"});\n\n    // Key should be joined to object key\n    var zeroForceKeyMapped = React.createElement(\"div\", {key: \"giraffe\"});\n    // Key should be added even if we don't supply it!\n    var oneForceKeyMapped = React.createElement(\"div\", null);\n\n    var mapFn = function(kid, index) {\n      return index === 0 ? zeroForceKeyMapped : oneForceKeyMapped;\n    };\n\n    var forcedKeys = (\n      React.createElement(\"div\", null, \n        zeroForceKey, \n        oneForceKey\n      )\n    );\n\n    var expectedForcedKeys = ['.$keyZero', '.$keyOne'];\n    var mappedChildrenForcedKeys =\n      ReactChildren.map(forcedKeys.props.children, mapFn);\n    var mappedForcedKeys = Object.keys(mappedChildrenForcedKeys);\n    expect(mappedForcedKeys).toEqual(expectedForcedKeys);\n\n    var expectedRemappedForcedKeys = [\n      '.$=1$keyZero:$giraffe',\n      '.$=1$keyOne:0'\n    ];\n    var remappedChildrenForcedKeys =\n      ReactChildren.map(mappedChildrenForcedKeys, mapFn);\n    expect(\n      Object.keys(remappedChildrenForcedKeys)\n    ).toEqual(expectedRemappedForcedKeys);\n\n  });\n\n  it('should not throw if key provided is a dupe with array key', function() {\n    var zero = React.createElement(\"div\", null);\n    var one = React.createElement(\"div\", {key: \"0\"});\n\n    var mapFn = function() {\n      return null;\n    };\n\n    var instance = (\n      React.createElement(\"div\", null, \n        zero, \n        one\n      )\n    );\n\n    expect(function() {\n      ReactChildren.map(instance.props.children, mapFn);\n    }).not.toThrow();\n  });\n\n  it('should warn if key provided is a dupe with explicit key', function() {\n    var zero = React.createElement(\"div\", {key: \"something\"});\n    var one = React.createElement(\"span\", {key: \"something\"});\n\n    var mapFn = function(component) { return component; };\n    var instance = (\n      React.createElement(\"div\", null, zero, one)\n    );\n\n    spyOn(console, 'warn');\n    var mapped = ReactChildren.map(instance.props.children, mapFn);\n\n    expect(console.warn.calls.length).toEqual(1);\n    expect(mapped).toEqual({'.$something': zero});\n  });\n\n  it('should return 0 for null children', function() {\n    var numberOfChildren = ReactChildren.count(null);\n    expect(numberOfChildren).toBe(0);\n  });\n\n  it('should return 0 for undefined children', function() {\n    var numberOfChildren = ReactChildren.count(undefined);\n    expect(numberOfChildren).toBe(0);\n  });\n\n  it('should return 1 for single child', function() {\n    var simpleKid = React.createElement(\"span\", {key: \"simple\"});\n    var instance = React.createElement(\"div\", null, simpleKid);\n    var numberOfChildren = ReactChildren.count(instance.props.children);\n    expect(numberOfChildren).toBe(1);\n  });\n\n  it('should count the number of children in flat structure', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n\n    var instance = (\n      React.createElement(\"div\", null, \n        zero, \n        one, \n        two, \n        three, \n        four\n      )\n    );\n    var numberOfChildren = ReactChildren.count(instance.props.children);\n    expect(numberOfChildren).toBe(5);\n  });\n\n  it('should count the number of children in nested structure', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n    var five = React.createElement(\"div\", {key: \"keyFiveInner\"});\n    // five is placed into a JS object with a key that is joined to the\n    // component key attribute.\n    // Precedence is as follows:\n    // 1. If grouped in an Object, the object key combined with `key` prop\n    // 2. If grouped in an Array, the `key` prop, falling back to array index\n\n    var instance = (\n      React.createElement(\"div\", null, \n        [{\n          firstHalfKey: [zero, one, two],\n          secondHalfKey: [three, four],\n          keyFive: five\n        }]\n      )\n    );\n    var numberOfChildren = ReactChildren.count(instance.props.children);\n    expect(numberOfChildren).toBe(6);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/ReactChildren-test\", module);\n",
"utils/__tests__/Transaction-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nvar assign = require(\"../../Object.assign\");\n\nvar Transaction;\n\nvar INIT_ERRORED = 'initErrored';     // Just a dummy value to check for.\ndescribe('Transaction', function() {\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    Transaction = require(\"../../Transaction\");\n  });\n\n  /**\n   * We should not invoke closers for inits that failed. We should pass init\n   * return values to closers when those inits are successful. We should not\n   * invoke the actual method when any of the initializers fail.\n   */\n  it('should invoke closers with/only-with init returns', function() {\n    var throwInInit = function() {\n      throw new Error('close[0] should receive Transaction.OBSERVED_ERROR');\n    };\n\n    var performSideEffect;\n    var dontPerformThis = function() {\n      performSideEffect = 'This should never be set to this';\n    };\n\n    /**\n     * New test Transaction subclass.\n     */\n    var TestTransaction = function() {\n      this.reinitializeTransaction();\n      this.firstCloseParam = INIT_ERRORED;   // WON'T be set to something else\n      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else\n      this.lastCloseParam = INIT_ERRORED;    // WON'T be set to something else\n    };\n    assign(TestTransaction.prototype, Transaction.Mixin);\n    TestTransaction.prototype.getTransactionWrappers = function() {\n      return [\n        {\n          initialize: throwInInit,\n          close: function(initResult) {\n            this.firstCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() { return 'asdf'; },\n          close: function(initResult) {\n            this.secondCloseParam = initResult;\n          }\n        },\n        {\n          initialize: throwInInit,\n          close: function(initResult) {\n            this.lastCloseParam = initResult;\n          }\n        }\n      ];\n    };\n\n    var transaction = new TestTransaction();\n\n    expect(function() {\n      transaction.perform(dontPerformThis);\n    }).toThrow();\n\n    expect(performSideEffect).toBe(undefined);\n    expect(transaction.firstCloseParam).toBe(INIT_ERRORED);\n    expect(transaction.secondCloseParam).toBe('asdf');\n    expect(transaction.lastCloseParam).toBe(INIT_ERRORED);\n    expect(transaction.isInTransaction()).toBe(false);\n  });\n\n  it('should invoke closers and wrapped method when inits success', function() {\n\n    var performSideEffect;\n    /**\n     * New test Transaction subclass.\n     */\n    var TestTransaction = function() {\n      this.reinitializeTransaction();\n      this.firstCloseParam = INIT_ERRORED;   // WILL be set to something else\n      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else\n      this.lastCloseParam = INIT_ERRORED;    // WILL be set to something else\n    };\n    assign(TestTransaction.prototype, Transaction.Mixin);\n    TestTransaction.prototype.getTransactionWrappers = function() {\n      return [\n        {\n          initialize: function() {\n            return 'firstResult';\n          },\n          close: function(initResult) {\n            this.firstCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            return 'secondResult';\n          },\n          close: function(initResult) {\n            this.secondCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            return 'thirdResult';\n          },\n          close: function(initResult) {\n            this.lastCloseParam = initResult;\n          }\n        }\n      ];\n    };\n\n    var transaction = new TestTransaction();\n\n    transaction.perform(function() {\n      performSideEffect = 'SIDE_EFFECT';\n    });\n\n    expect(performSideEffect).toBe('SIDE_EFFECT');\n    expect(transaction.firstCloseParam).toBe('firstResult');\n    expect(transaction.secondCloseParam).toBe('secondResult');\n    expect(transaction.lastCloseParam).toBe('thirdResult');\n    expect(transaction.isInTransaction()).toBe(false);\n  });\n\n  /**\n   * When the operation throws, the transaction should throw, but all of the\n   * error-free closers should execute gracefully without issue. If a closer\n   * throws an error, the transaction should prefer to throw the error\n   * encountered earlier in the operation.\n   */\n  it('should throw when wrapped operation throws', function() {\n\n    var performSideEffect;\n    /**\n     * New test Transaction subclass.\n     */\n    var TestTransaction = function() {\n      this.reinitializeTransaction();\n      this.firstCloseParam = INIT_ERRORED;   // WILL be set to something else\n      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else\n      this.lastCloseParam = INIT_ERRORED;    // WILL be set to something else\n    };\n    assign(TestTransaction.prototype, Transaction.Mixin);\n    // Now, none of the close/inits throw, but the operation we wrap will throw.\n    TestTransaction.prototype.getTransactionWrappers = function() {\n      return [\n        {\n          initialize: function() {\n            return 'firstResult';\n          },\n          close: function(initResult) {\n            this.firstCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            return 'secondResult';\n          },\n          close: function(initResult) {\n            this.secondCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            return 'thirdResult';\n          },\n          close: function(initResult) {\n            this.lastCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            return 'fourthResult';\n          },\n          close: function(initResult) {\n            throw new Error('The transaction should throw a TypeError.');\n          }\n        }\n      ];\n    };\n\n    var transaction = new TestTransaction();\n\n    expect(function() {\n      var isTypeError = false;\n      try {\n        transaction.perform(function() {\n          throw new TypeError(\"Thrown in main wrapped operation\");\n        });\n      } catch (err) {\n        isTypeError = (err instanceof TypeError);\n      }\n      return isTypeError;\n    }()).toBe(true);\n\n    expect(performSideEffect).toBe(undefined);\n    expect(transaction.firstCloseParam).toBe('firstResult');\n    expect(transaction.secondCloseParam).toBe('secondResult');\n    expect(transaction.lastCloseParam).toBe('thirdResult');\n    expect(transaction.isInTransaction()).toBe(false);\n  });\n\n  it('should throw errors in transaction close', function() {\n    var TestTransaction = function() {\n      this.reinitializeTransaction();\n    };\n    assign(TestTransaction.prototype, Transaction.Mixin);\n    var exceptionMsg = 'This exception should throw.';\n    TestTransaction.prototype.getTransactionWrappers = function() {\n      return [\n        {\n          close: function(initResult) {\n            throw new Error(exceptionMsg);\n          }\n        }\n      ];\n    };\n\n    var transaction = new TestTransaction();\n    expect(function() {\n      transaction.perform(function() {});\n    }).toThrow(exceptionMsg);\n    expect(transaction.isInTransaction()).toBe(false);\n  });\n\n  it('should allow nesting of transactions', function() {\n    var performSideEffect;\n    var nestedPerformSideEffect;\n    /**\n     * New test Transaction subclass.\n     */\n    var TestTransaction = function() {\n      this.reinitializeTransaction();\n      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else\n    };\n    assign(TestTransaction.prototype, Transaction.Mixin);\n    TestTransaction.prototype.getTransactionWrappers = function() {\n      return [\n        {\n          initialize: function() {\n            return 'firstResult';\n          },\n          close: function(initResult) {\n            this.firstCloseParam = initResult;\n          }\n        },\n        {\n          initialize: function() {\n            this.nestedTransaction = new NestedTransaction();\n          },\n          close: function() {\n            // Test performing a transaction in another transaction's close()\n            this.nestedTransaction.perform(function() {\n              nestedPerformSideEffect = 'NESTED_SIDE_EFFECT';\n            });\n          }\n        }\n      ];\n    };\n\n    var NestedTransaction = function() {\n      this.reinitializeTransaction();\n    };\n    assign(NestedTransaction.prototype, Transaction.Mixin);\n    NestedTransaction.prototype.getTransactionWrappers = function() {\n      return [{\n        initialize: function() {\n          this.hasInitializedNested = true;\n        },\n        close: function() {\n          this.hasClosedNested = true;\n        }\n      }];\n    };\n\n    var transaction = new TestTransaction();\n\n    transaction.perform(function() {\n      performSideEffect = 'SIDE_EFFECT';\n    });\n\n    expect(performSideEffect).toBe('SIDE_EFFECT');\n    expect(nestedPerformSideEffect).toBe('NESTED_SIDE_EFFECT');\n    expect(transaction.firstCloseParam).toBe('firstResult');\n    expect(transaction.isInTransaction()).toBe(false);\n    expect(transaction.nestedTransaction.hasClosedNested).toBe(true);\n    expect(transaction.nestedTransaction.hasInitializedNested).toBe(true);\n    expect(transaction.nestedTransaction.isInTransaction()).toBe(false);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/Transaction-test\", module);\n",
"utils/__tests__/accumulateInto-test":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\")\n  .dontMock('accumulateInto');\n\nvar accumulateInto;\n\ndescribe('accumulateInto', function() {\n\n  beforeEach(function() {\n    accumulateInto = require(\"../../accumulateInto\");\n  });\n\n  it('throws if the second item is null', function() {\n    expect(function() {\n      accumulateInto([], null);\n    }).toThrow(\n      'Invariant Violation: accumulateInto(...): Accumulated items must not ' +\n      'be null or undefined.'\n    );\n  });\n\n  it('returns the second item if first is null', function() {\n    var a = [];\n    expect(accumulateInto(null, a)).toBe(a);\n  });\n\n  it('merges the second into the first if first item is an array', function() {\n    var a = [1, 2];\n    var b = [3, 4];\n    accumulateInto(a, b);\n    expect(a).toEqual([1, 2, 3, 4]);\n    expect(b).toEqual([3, 4]);\n    var c = [1];\n    accumulateInto(c, 2);\n    expect(c).toEqual([1, 2]);\n  });\n\n  it('returns a new array if first or both items are scalar', function() {\n    var a = [2];\n    expect(accumulateInto(1, a)).toEqual([1, 2]);\n    expect(a).toEqual([2]);\n    expect(accumulateInto(1, 2)).toEqual([1, 2]);\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/accumulateInto-test\", module);\n",
"utils/__tests__/cloneWithProps-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\")\n  .dontMock('cloneWithProps')\n  .dontMock('emptyObject');\n\nvar mocks = require(\"../../mocks\");\n\nvar React;\nvar ReactTestUtils;\n\nvar onlyChild;\nvar cloneWithProps;\nvar emptyObject;\n\ndescribe('cloneWithProps', function() {\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n    onlyChild = require(\"../../onlyChild\");\n    cloneWithProps = require(\"../../cloneWithProps\");\n    emptyObject = require(\"../../emptyObject\");\n  });\n\n  it('should clone a DOM component with new props', function() {\n    var Grandparent = React.createClass({displayName: \"Grandparent\",\n      render: function() {\n        return React.createElement(Parent, null, React.createElement(\"div\", {className: \"child\"}));\n      }\n    });\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", {className: \"parent\"}, \n            cloneWithProps(onlyChild(this.props.children), {className: 'xyz'})\n          )\n        );\n      }\n    });\n    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, null));\n    expect(component.getDOMNode().childNodes[0].className)\n      .toBe('xyz child');\n  });\n\n  it('should clone a composite component with new props', function() {\n\n    var Child = React.createClass({displayName: \"Child\",\n      render: function() {\n        return React.createElement(\"div\", {className: this.props.className});\n      }\n    });\n\n    var Grandparent = React.createClass({displayName: \"Grandparent\",\n      render: function() {\n        return React.createElement(Parent, null, React.createElement(Child, {className: \"child\"}));\n      }\n    });\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", {className: \"parent\"}, \n            cloneWithProps(onlyChild(this.props.children), {className: 'xyz'})\n          )\n        );\n      }\n    });\n    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, null));\n    expect(component.getDOMNode().childNodes[0].className)\n      .toBe('xyz child');\n  });\n\n  it('should warn when cloning with refs', function() {\n    var Grandparent = React.createClass({displayName: \"Grandparent\",\n      render: function() {\n        return React.createElement(Parent, null, React.createElement(\"div\", {ref: \"yolo\"}));\n      }\n    });\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            cloneWithProps(onlyChild(this.props.children), {className: 'xyz'})\n          )\n        );\n      }\n    });\n\n    var _warn = console.warn;\n\n    try {\n      console.warn = mocks.getMockFunction();\n\n      var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, null));\n      expect(component.refs).toBe(emptyObject);\n      expect(console.warn.mock.calls.length).toBe(1);\n    } finally {\n      console.warn = _warn;\n    }\n  });\n\n  it('should transfer the key property', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return null;\n      }\n    });\n    var clone = cloneWithProps(React.createElement(Component, null), {key: 'xyz'});\n    expect(clone.key).toBe('xyz');\n  });\n\n  it('should transfer children', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        expect(this.props.children).toBe('xyz');\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(\n      cloneWithProps(React.createElement(Component, null), {children: 'xyz'})\n    );\n  });\n\n  it('should shallow clone children', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        expect(this.props.children).toBe('xyz');\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(\n      cloneWithProps(React.createElement(Component, null, \"xyz\"), {})\n    );\n  });\n\n  it('should support keys and refs', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    var Parent = React.createClass({displayName: \"Parent\",\n      render: function() {\n        var clone =\n          cloneWithProps(this.props.children, {key: 'xyz', ref: 'xyz'});\n        expect(clone.key).toBe('xyz');\n        expect(clone.ref).toBe('xyz');\n        return React.createElement(\"div\", null, clone);\n      }\n    });\n\n    var Grandparent = React.createClass({displayName: \"Grandparent\",\n      render: function() {\n        return React.createElement(Parent, null, React.createElement(Component, {key: \"abc\"}));\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, null));\n  });\n\n  it('should overwrite props', function() {\n    var Component = React.createClass({displayName: \"Component\",\n      render: function() {\n        expect(this.props.myprop).toBe('xyz');\n        return React.createElement(\"div\", null);\n      }\n    });\n\n    ReactTestUtils.renderIntoDocument(\n      cloneWithProps(React.createElement(Component, {myprop: \"abc\"}), {myprop: 'xyz'})\n    );\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/cloneWithProps-test\", module);\n",
"utils/__tests__/escapeTextForBrowser-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('escapeTextForBrowser', function() {\n\n  var escapeTextForBrowser = require(\"../../escapeTextForBrowser\");\n\n  it('should escape boolean to string', function() {\n    expect(escapeTextForBrowser(true)).toBe('true');\n    expect(escapeTextForBrowser(false)).toBe('false');\n  });\n\n  it('should escape object to string', function() {\n    var escaped = escapeTextForBrowser({\n      toString: function() {\n        return 'ponys';\n      }\n    });\n\n    expect(escaped).toBe('ponys');\n  });\n\n  it('should escape number to string', function() {\n    expect(escapeTextForBrowser(42)).toBe('42');\n  });\n\n  it('should escape string', function() {\n    var escaped = escapeTextForBrowser('<script type=\\'\\' src=\"\"></script>');\n    expect(escaped).not.toContain('<');\n    expect(escaped).not.toContain('>');\n    expect(escaped).not.toContain('\\'');\n    expect(escaped).not.toContain('\\\"');\n\n    escaped = escapeTextForBrowser('&');\n    expect(escaped).toBe('&amp;');\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/escapeTextForBrowser-test\", module);\n",
"utils/__tests__/joinClasses-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\").dontMock('joinClasses');\n\nvar joinClasses = require(\"../../joinClasses\");\n\ndescribe('joinClasses', function() {\n\n  it('should return a single className', function() {\n    expect(joinClasses('aaa')).toEqual('aaa');\n  });\n\n  it('should join two classes together', function() {\n    var aaa = 'aaa';\n    var bbb = 'bbb';\n    expect(joinClasses(aaa, bbb)).toEqual('aaa bbb');\n  });\n\n  it('should join many classes together', function() {\n    var aaa = 'aaa';\n    var bbb = 'bbb';\n    var ccc = 'ccc';\n    var ddd = 'ddd';\n    var eee = 'eee';\n    expect(joinClasses(aaa, bbb, ccc, ddd, eee)).toEqual('aaa bbb ccc ddd eee');\n  });\n\n  it('should omit undefined and empty classes', function() {\n    var aaa = 'aaa';\n    var bbb;\n    var ccc = null;\n    var ddd = '';\n    var eee = 'eee';\n    expect(joinClasses(bbb)).toEqual('');\n    expect(joinClasses(bbb, bbb, bbb)).toEqual('');\n    expect(joinClasses(aaa, bbb, ccc, ddd, eee)).toEqual('aaa eee');\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/joinClasses-test\", module);\n",
"utils/__tests__/onlyChild-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('onlyChild', function() {\n\n  var React;\n  var onlyChild;\n  var WrapComponent;\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    onlyChild = require(\"../../onlyChild\");\n    WrapComponent = React.createClass({displayName: \"WrapComponent\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            onlyChild(this.props.children, this.props.mapFn, this)\n          )\n        );\n      }\n    });\n  });\n\n  it('should fail when passed two children', function() {\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          React.createElement(\"div\", null), \n          React.createElement(\"span\", null)\n        );\n      onlyChild(instance.props.children);\n    }).toThrow();\n  });\n\n  it('should fail when passed nully values', function() {\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          null\n        );\n      onlyChild(instance.props.children);\n    }).toThrow();\n\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          undefined\n        );\n      onlyChild(instance.props.children);\n    }).toThrow();\n  });\n\n  it('should fail when key/value objects', function() {\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          {oneThing: React.createElement(\"span\", null)}\n        );\n      onlyChild(instance.props.children);\n    }).toThrow();\n  });\n\n\n  it('should not fail when passed interpolated single child', function() {\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          React.createElement(\"span\", null)\n        );\n      onlyChild(instance.props.children);\n    }).not.toThrow();\n  });\n\n\n  it('should return the only child', function() {\n    expect(function() {\n      var instance =\n        React.createElement(WrapComponent, null, \n          React.createElement(\"span\", null)\n        );\n      onlyChild(instance.props.children);\n    }).not.toThrow();\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/onlyChild-test\", module);\n",
"utils/__tests__/keyMirror-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\nrequire(\"../../mock-modules\").dontMock('keyMirror');\n\nvar keyMirror = require(\"../../keyMirror\");\n\ndescribe('keyMirror', function() {\n  it('should create an object with values matching keys provided', function() {\n    var mirror = keyMirror({\n      foo: null,\n      bar: true,\n      \"baz\": { some: \"object\" },\n      qux: undefined\n    });\n    expect('foo' in mirror).toBe(true);\n    expect(mirror.foo).toBe('foo');\n    expect('bar' in mirror).toBe(true);\n    expect(mirror.bar).toBe('bar');\n    expect('baz' in mirror).toBe(true);\n    expect(mirror.baz).toBe('baz');\n    expect('qux' in mirror).toBe(true);\n    expect(mirror.qux).toBe('qux');\n  });\n\n  it('should not use properties from prototypes', function() {\n    function Klass() {\n      this.useMeToo = true;\n    }\n    Klass.prototype.doNotUse = true;\n    var instance = new Klass();\n    instance.useMe = true;\n\n    var mirror = keyMirror(instance);\n\n    expect('doNotUse' in mirror).toBe(false);\n    expect('useMe' in mirror).toBe(true);\n    expect('useMeToo' in mirror).toBe(true);\n  });\n\n  it('should throw when a non-object argument is used', function() {\n    [null, undefined, 0, 7, ['uno'], true, \"string\"].forEach(function(testVal) {\n      expect(keyMirror.bind(null, testVal)).toThrow();\n    });\n  });\n\n  it('should work when \"constructor\" is a key', function() {\n    var obj = { constructor: true };\n    expect(keyMirror.bind(null, obj)).not.toThrow();\n    var mirror = keyMirror(obj);\n    expect('constructor' in mirror).toBe(true);\n  });\n});\n\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/keyMirror-test\", module);\n",
"utils/__tests__/memoizeStringOnly-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('memoizeStringOnly', function() {\n  var memoizeStringOnly;\n\n  beforeEach(function() {\n    require(\"../../mock-modules\").dumpCache();\n    memoizeStringOnly = require(\"../../memoizeStringOnly\");\n  });\n\n  it('should be transparent to callers', function() {\n    var callback = function(string) {\n      return string;\n    };\n    var memoized = memoizeStringOnly(callback);\n\n    expect(memoized('foo'), callback('foo'));\n  });\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/memoizeStringOnly-test\", module);\n",
"utils/__tests__/sliceChildren-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('sliceChildren', function() {\n\n  var React;\n  var ReactTestUtils;\n\n  var sliceChildren;\n  var reactComponentExpect;\n\n  var Partial;\n\n  beforeEach(function() {\n    React = require(\"../../React\");\n    ReactTestUtils = require(\"../../ReactTestUtils\");\n\n    sliceChildren = require(\"../../sliceChildren\");\n    reactComponentExpect = require(\"../../reactComponentExpect\");\n\n    Partial = React.createClass({displayName: \"Partial\",\n      render: function() {\n        return (\n          React.createElement(\"div\", null, \n            sliceChildren(\n              this.props.children,\n              this.props.start,\n              this.props.end\n            )\n          )\n        );\n      }\n    });\n  });\n\n  function renderAndSlice(set, start, end) {\n    var instance = React.createElement(Partial, {start: start, end: end}, set);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    var rendered = reactComponentExpect(instance)\n      .expectRenderedChild()\n      .instance();\n    return rendered.props.children;\n  }\n\n  it('should render the whole set if start zero is supplied', function() {\n    var fullSet = [\n      React.createElement(\"div\", {key: \"A\"}),\n      React.createElement(\"div\", {key: \"B\"}),\n      React.createElement(\"div\", {key: \"C\"})\n    ];\n    var children = renderAndSlice(fullSet, 0);\n    expect(children).toEqual({\n      '.$A': fullSet[0],\n      '.$B': fullSet[1],\n      '.$C': fullSet[2]\n    });\n  });\n\n  it('should render the remaining set if no end index is supplied', function() {\n    var fullSet = [\n      React.createElement(\"div\", {key: \"A\"}),\n      React.createElement(\"div\", {key: \"B\"}),\n      React.createElement(\"div\", {key: \"C\"})\n    ];\n    var children = renderAndSlice(fullSet, 1);\n    expect(children).toEqual({\n      '.$B': fullSet[1],\n      '.$C': fullSet[2]\n    });\n  });\n\n  it('should exclude everything at or after the end index', function() {\n    var fullSet = [\n      React.createElement(\"div\", {key: \"A\"}),\n      React.createElement(\"div\", {key: \"B\"}),\n      React.createElement(\"div\", {key: \"C\"}),\n      React.createElement(\"div\", {key: \"D\"})\n    ];\n    var children = renderAndSlice(fullSet, 1, 2);\n    expect(children).toEqual({\n      '.$B': fullSet[1]\n    });\n  });\n\n  it('should allow static children to be sliced', function() {\n    var a = React.createElement(\"div\", null);\n    var b = React.createElement(\"div\", null);\n    var c = React.createElement(\"div\", null);\n\n    var instance = React.createElement(Partial, {start: 1, end: 2}, a, b, c);\n    instance = ReactTestUtils.renderIntoDocument(instance);\n    var rendered = reactComponentExpect(instance)\n      .expectRenderedChild()\n      .instance();\n\n    expect(rendered.props.children).toEqual({\n      '.1': b\n    });\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/sliceChildren-test\", module);\n",
"utils/__tests__/traverseAllChildren-test":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails react-core\n */\n\n\"use strict\";\n\ndescribe('traverseAllChildren', function() {\n  var traverseAllChildren;\n  var React;\n  beforeEach(function() {\n    traverseAllChildren = require(\"../../traverseAllChildren\");\n    React = require(\"../../React\");\n  });\n\n\n  it('should support identity for simple', function() {\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var simpleKid = React.createElement(\"span\", {key: \"simple\"});\n\n    // Jasmine doesn't provide a way to test that the fn was invoked with scope.\n    var instance = React.createElement(\"div\", null, simpleKid);\n    traverseAllChildren(instance.props.children, traverseFn, traverseContext);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      simpleKid,\n      '.$simple',\n      0\n    );\n    expect(traverseContext.length).toEqual(1);\n  });\n\n  it('should treat single arrayless child as being in array', function() {\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var simpleKid = React.createElement(\"span\", null);\n    var instance = React.createElement(\"div\", null, simpleKid);\n    traverseAllChildren(instance.props.children, traverseFn, traverseContext);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      simpleKid,\n      '.0',\n      0\n    );\n    expect(traverseContext.length).toEqual(1);\n  });\n\n  it('should treat single child in array as expected', function() {\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var simpleKid = React.createElement(\"span\", null);\n    var instance = React.createElement(\"div\", null, [simpleKid]);\n    traverseAllChildren(instance.props.children, traverseFn, traverseContext);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      simpleKid,\n      '.0',\n      0\n    );\n    expect(traverseContext.length).toEqual(1);\n  });\n\n  it('should be called for each child', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var instance = (\n      React.createElement(\"div\", null, \n        zero, \n        one, \n        two, \n        three, \n        four\n      )\n    );\n\n    traverseAllChildren(instance.props.children, traverseFn, traverseContext);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      zero,\n      '.$keyZero',\n      0\n    );\n    expect(traverseFn).toHaveBeenCalledWith(traverseContext, one, '.1', 1);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      two,\n      '.$keyTwo',\n      2\n    );\n    expect(traverseFn).toHaveBeenCalledWith(traverseContext, three, '.3', 3);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      four,\n      '.$keyFour',\n      4\n    );\n  });\n\n  // Todo: test that nums/strings are converted to ReactComponents.\n\n  it('should be called for each child in nested structure', function() {\n    var zero = React.createElement(\"div\", {key: \"keyZero\"});\n    var one = null;\n    var two = React.createElement(\"div\", {key: \"keyTwo\"});\n    var three = null;\n    var four = React.createElement(\"div\", {key: \"keyFour\"});\n    var five = React.createElement(\"div\", {key: \"keyFiveInner\"});\n    // five is placed into a JS object with a key that is joined to the\n    // component key attribute.\n    // Precedence is as follows:\n    // 1. If grouped in an Object, the object key combined with `key` prop\n    // 2. If grouped in an Array, the `key` prop, falling back to array index\n\n\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var instance = (\n      React.createElement(\"div\", null, \n        [{\n          firstHalfKey: [zero, one, two],\n          secondHalfKey: [three, four],\n          keyFive: five\n        }]\n      )\n    );\n\n    traverseAllChildren(instance.props.children, traverseFn, traverseContext);\n    expect(traverseFn.calls.length).toBe(6);\n    expect(traverseContext.length).toEqual(6);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      zero,\n      '.0:$firstHalfKey:0:$keyZero',\n      0\n    );\n\n    expect(traverseFn)\n      .toHaveBeenCalledWith(traverseContext, one, '.0:$firstHalfKey:0:1', 1);\n\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      two,\n      '.0:$firstHalfKey:0:$keyTwo',\n      2\n    );\n\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      three,\n      '.0:$secondHalfKey:0:0',\n      3\n    );\n\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      four,\n      '.0:$secondHalfKey:0:$keyFour',\n      4\n    );\n\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      five,\n      '.0:$keyFive:$keyFiveInner',\n      5\n    );\n  });\n\n  it('should retain key across two mappings', function() {\n    var zeroForceKey = React.createElement(\"div\", {key: \"keyZero\"});\n    var oneForceKey = React.createElement(\"div\", {key: \"keyOne\"});\n    var traverseContext = [];\n    var traverseFn =\n      jasmine.createSpy().andCallFake(function(context, kid, key, index) {\n        context.push(true);\n      });\n\n    var forcedKeys = (\n      React.createElement(\"div\", null, \n        zeroForceKey, \n        oneForceKey\n      )\n    );\n\n    traverseAllChildren(forcedKeys.props.children, traverseFn, traverseContext);\n    expect(traverseContext.length).toEqual(2);\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      zeroForceKey,\n      '.$keyZero',\n      0\n    );\n    expect(traverseFn).toHaveBeenCalledWith(\n      traverseContext,\n      oneForceKey,\n      '.$keyOne',\n      1\n    );\n  });\n\n});\n\nrequire(\"../../mock-modules\").register(\"utils/__tests__/traverseAllChildren-test\", module);\n",
"test/phantomjs-shims":"(function() {\n\nvar Ap = Array.prototype;\nvar slice = Ap.slice;\nvar Fp = Function.prototype;\n\nif (!Fp.bind) {\n  // PhantomJS doesn't support Function.prototype.bind natively, so\n  // polyfill it whenever this module is required.\n  Fp.bind = function(context) {\n    var func = this;\n    var args = slice.call(arguments, 1);\n\n    function bound() {\n      var invokedAsConstructor = func.prototype && (this instanceof func);\n      return func.apply(\n        // Ignore the context parameter when invoking the bound function\n        // as a constructor. Note that this includes not only constructor\n        // invocations using the new keyword but also calls to base class\n        // constructors such as BaseClass.call(this, ...) or super(...).\n        !invokedAsConstructor && context || this,\n        args.concat(slice.call(arguments))\n      );\n    }\n\n    // The bound function must share the .prototype of the unbound\n    // function so that any object created by one constructor will count\n    // as an instance of both constructors.\n    bound.prototype = func.prototype;\n\n    return bound;\n  };\n}\n\n})();\n\nrequire(\"../mock-modules\").register(\"test/phantomjs-shims\", module);\n",
"ReactTestUtils":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar React = require(\"./React\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactTextComponent = require(\"./ReactTextComponent\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\nvar ReactTestUtils = {\n  renderIntoDocument: function(instance) {\n    var div = document.createElement('div');\n    // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n    return React.render(instance, div);\n  },\n\n  isElement: function(element) {\n    return ReactElement.isValidElement(element);\n  },\n\n  isElementOfType: function(inst, convenienceConstructor) {\n    return (\n      ReactElement.isValidElement(inst) &&\n      inst.type === convenienceConstructor.type\n    );\n  },\n\n  isDOMComponent: function(inst) {\n    return !!(inst && inst.mountComponent && inst.tagName);\n  },\n\n  isDOMComponentElement: function(inst) {\n    return !!(inst &&\n              ReactElement.isValidElement(inst) &&\n              !!inst.tagName);\n  },\n\n  isCompositeComponent: function(inst) {\n    return typeof inst.render === 'function' &&\n           typeof inst.setState === 'function';\n  },\n\n  isCompositeComponentWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) &&\n             (inst.constructor === type.type));\n  },\n\n  isCompositeComponentElement: function(inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    }\n    // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n    var prototype = inst.type.prototype;\n    return (\n      typeof prototype.render === 'function' &&\n      typeof prototype.setState === 'function'\n    );\n  },\n\n  isCompositeComponentElementWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&\n             (inst.constructor === type));\n  },\n\n  isTextComponent: function(inst) {\n    return inst instanceof ReactTextComponent.type;\n  },\n\n  findAllInRenderedTree: function(inst, test) {\n    if (!inst) {\n      return [];\n    }\n    var ret = test(inst) ? [inst] : [];\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var renderedChildren = inst._renderedChildren;\n      var key;\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n        ret = ret.concat(\n          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)\n        );\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(\n        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)\n      );\n    }\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function(root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && (\n        instClassName &&\n        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1\n      );\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function(root, className) {\n    var all =\n      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for class:' + className);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function(root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isDOMComponent(inst) &&\n            inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function(root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function(root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isCompositeComponentWithType(\n        inst,\n        componentType\n      );\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function(root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(\n      root,\n      componentType\n    );\n    if (all.length !== 1) {\n      throw new Error(\n        'Did not find exactly one match for componentType:' + componentType\n      );\n    }\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function(module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n\n    var ConvenienceConstructor = React.createClass({displayName: \"ConvenienceConstructor\",\n      render: function() {\n        return React.createElement(\n          mockTagName,\n          null,\n          this.props.children\n        );\n      }\n    });\n\n    module.mockImplementation(ConvenienceConstructor);\n\n    module.type = ConvenienceConstructor.type;\n    module.isReactLegacyFactory = true;\n\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(\n      topLevelType,\n      fakeNativeEvent\n    );\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function(\n      topLevelType,\n      comp,\n      fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(\n      topLevelType,\n      comp.getDOMNode(),\n      fakeNativeEvent\n    );\n  },\n\n  nativeTouchData: function(x, y) {\n    return {\n      touches: [\n        {pageX: x, pageY: y}\n      ]\n    };\n  },\n\n  Simulate: null,\n  SimulateNative: {}\n};\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\nfunction makeSimulator(eventType) {\n  return function(domComponentOrNode, eventData) {\n    var node;\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node;\n    // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n    var event = new SyntheticEvent(\n      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],\n      ReactMount.getID(node),\n      fakeNativeEvent\n    );\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n\n    ReactUpdates.batchedUpdates(function() {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n\n  var eventType;\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n}\n\n// Rebuild ReactTestUtils.Simulate whenever event plugins are injected\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\nEventPluginHub.injection.injectEventPluginOrder = function() {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\nEventPluginHub.injection.injectEventPluginsByName = function() {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function(domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    }\n  };\n}\n\nvar eventType;\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ?\n    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n  ReactTestUtils.SimulateNative[convenienceName] =\n    makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;\n\nrequire(\"./mock-modules\").register(\"ReactTestUtils\", module);\n",
"reactComponentExpect":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule reactComponentExpect\n * @nolint\n */\n\n\"use strict\";\n\nvar ReactTestUtils = require(\"./ReactTestUtils\");\n\nvar assign = require(\"./Object.assign\");\n\nfunction reactComponentExpect(instance) {\n  if (instance instanceof reactComponentExpect) {\n    return instance;\n  }\n\n  if (!(this instanceof reactComponentExpect)) {\n    return new reactComponentExpect(instance);\n  }\n\n  this._instance = instance;\n  expect(typeof instance).toBe('object');\n  expect(typeof instance.constructor).toBe('function');\n  expect(ReactTestUtils.isElement(instance)).toBe(false);\n}\n\nassign(reactComponentExpect.prototype, {\n  // Getters -------------------------------------------------------------------\n\n  /**\n   * @instance: Retrieves the backing instance.\n   */\n  instance: function() {\n    return this._instance;\n  },\n\n  /**\n   * There are two types of components in the world.\n   * - A component created via React.createClass() - Has a single child\n   *   subComponent - the return value from the .render() function. This\n   *   function @subComponent expects that this._instance is component created\n   *   with React.createClass().\n   * - A primitive DOM component - which has many renderedChildren, each of\n   *   which may have a name that is unique with respect to its siblings. This\n   *   method will fail if this._instance is a primitive component.\n   *\n   * TL;DR: An instance may have a subComponent (this._renderedComponent) or\n   * renderedChildren, but never both. Neither will actually show up until you\n   * render the component (simply instantiating is not enough).\n   */\n  expectRenderedChild: function() {\n    this.toBeCompositeComponent();\n    return new reactComponentExpect(this.instance()._renderedComponent);\n  },\n\n  /**\n   * The nth child of a DOMish component instance that is not falsy.\n   */\n  expectRenderedChildAt: function(childIndex) {\n    // Currently only dom components have arrays of children, but that will\n    // change soon.\n    this.toBeDOMComponent();\n    var renderedChildren = this.instance()._renderedChildren || {};\n    for (var name in renderedChildren) {\n      if (!renderedChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      if (renderedChildren[name]) {\n        if (renderedChildren[name]._mountIndex === childIndex) {\n          return new reactComponentExpect(renderedChildren[name]);\n        }\n      }\n    }\n    throw new Error('Child:' + childIndex + ' is not found');\n  },\n\n  toBeDOMComponentWithChildCount: function(n) {\n    this.toBeDOMComponent();\n    expect(this.instance()._renderedChildren).toBeTruthy();\n    var len = Object.keys(this.instance()._renderedChildren).length;\n    expect(len).toBe(n);\n    return this;\n  },\n\n  toBeDOMComponentWithNoChildren: function() {\n    this.toBeDOMComponent();\n    expect(this.instance()._renderedChildren).toBeFalsy();\n    return this;\n  },\n\n  // Matchers ------------------------------------------------------------------\n\n  toBeComponentOfType: function(convenienceConstructor) {\n    var type = typeof convenienceConstructor === 'string' ?\n               convenienceConstructor :\n               convenienceConstructor.type;\n    expect(\n      this.instance()._currentElement.type === type\n    ).toBe(true);\n    return this;\n  },\n\n  /**\n   * A component that is created with React.createClass. Just duck typing\n   * here.\n   */\n  toBeCompositeComponent: function() {\n    expect(\n      typeof this.instance().render === 'function' &&\n      typeof this.instance().setState === 'function'\n    ).toBe(true);\n    return this;\n  },\n\n  toBeCompositeComponentWithType: function(convenienceConstructor) {\n    this.toBeCompositeComponent();\n    expect(\n      this.instance()._currentElement.type === convenienceConstructor.type\n    ).toBe(true);\n    return this;\n  },\n\n  toBeTextComponent: function() {\n    expect(ReactTestUtils.isTextComponent(this.instance())).toBe(true);\n    return this;\n  },\n\n  toBePresent: function() {\n    expect(this.instance()).toBeTruthy();\n    return this;\n  },\n\n  /**\n   * A terminal type of component representing some virtual dom node. Just duck\n   * typing here.\n   */\n  toBeDOMComponent: function() {\n    expect(ReactTestUtils.isDOMComponent(this.instance())).toBe(true);\n    return this;\n  },\n\n  /**\n   * @deprecated\n   * @see toBeComponentOfType\n   */\n  toBeDOMComponentWithTag: function(tag) {\n    this.toBeDOMComponent();\n    expect(this.instance().tagName).toBe(tag.toUpperCase());\n    return this;\n  },\n\n  /**\n   * Check that internal state values are equal to a state of expected values.\n   */\n  scalarStateEqual: function(stateNameToExpectedValue) {\n    expect(this.instance()).toBeTruthy();\n    for (var stateName in stateNameToExpectedValue) {\n      if (!stateNameToExpectedValue.hasOwnProperty(stateName)) {\n        continue;\n      }\n      expect(this.instance().state[stateName])\n        .toEqual(stateNameToExpectedValue[stateName]);\n    }\n    return this;\n  },\n\n  /**\n   * Check a set of props are equal to a set of expected values - only works\n   * with scalars.\n   */\n  scalarPropsEqual: function(propNameToExpectedValue) {\n    expect(this.instance()).toBeTruthy();\n    for (var propName in propNameToExpectedValue) {\n      if (!propNameToExpectedValue.hasOwnProperty(propName)) {\n        continue;\n      }\n      expect(this.instance().props[propName])\n        .toEqual(propNameToExpectedValue[propName]);\n    }\n    return this;\n  },\n\n  /**\n   * Check a set of props are equal to a set of expected values - only works\n   * with scalars.\n   */\n  scalarContextEqual: function(contextNameToExpectedValue) {\n    expect(this.instance()).toBeTruthy();\n    for (var contextName in contextNameToExpectedValue) {\n      if (!contextNameToExpectedValue.hasOwnProperty(contextName)) {\n        continue;\n      }\n      expect(this.instance().context[contextName])\n        .toEqual(contextNameToExpectedValue[contextName]);\n    }\n    return this;\n  }\n});\n\nmodule.exports = reactComponentExpect;\n\nrequire(\"./mock-modules\").register(\"reactComponentExpect\", module);\n",
"mocks":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mocks\n */\n\nfunction isA(typeName, value) {\n  return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n}\n\nfunction getType(ref) {\n  if (isA('RegExp', ref)) {\n    return 'regexp';\n  }\n\n  if (isA('Array', ref)) {\n    return 'array';\n  }\n\n  if (isA('Function', ref)) {\n    return 'function';\n  }\n\n  if (isA('Object', ref)) {\n    return 'object';\n  }\n\n  // consider number and string fields to be constants that we want to\n  // pick up as they are\n  if (isA('Number', ref) || isA('String', ref)) {\n    return 'constant';\n  }\n\n  return null;\n}\n\nfunction makeComponent(metadata) {\n  switch (metadata.type) {\n    case 'object':\n      return {};\n\n    case 'array':\n      return [];\n\n    case 'regexp':\n      return new RegExp();\n\n    case 'constant':\n      return metadata.value;\n\n    case 'function':\n      var defaultReturnValue;\n      var specificReturnValues = [];\n      var mockImpl;\n      var isReturnValueLastSet = false;\n      var calls = [];\n      var instances = [];\n      var prototype =\n        (metadata.members && metadata.members.prototype &&\n          metadata.members.prototype.members) || {};\n\n      var f = function() {\n        global.dirtyMocks.push(f);\n\n        instances.push(this);\n        calls.push(Array.prototype.slice.call(arguments));\n        if (this instanceof arguments.callee) {\n          // This is probably being called as a constructor\n          for (var slot in prototype) {\n            // Copy prototype methods to the instance to make\n            // it easier to interact with mock instance call and\n            // return values\n            if (prototype[slot].type == 'function') {\n              var protoImpl = this[slot];\n              this[slot] = generateFromMetadata(prototype[slot]);\n              this[slot]._protoImpl = protoImpl;\n            }\n          }\n\n          // Run the mock constructor implementation\n          mockImpl && mockImpl.apply(this, arguments);\n          return;\n        }\n\n        var returnValue;\n        // If return value is last set, either specific or default, i.e.\n        // mockReturnValueOnce()/mockReturnValue() is called and no\n        // mockImplementation() is called after that.\n        // use the set return value.\n        if (isReturnValueLastSet) {\n          returnValue = specificReturnValues.shift();\n          if (returnValue === undefined) {\n            returnValue = defaultReturnValue;\n          }\n        }\n\n        // If mockImplementation() is last set, or specific return values\n        // are used up, use the mock implementation.\n        if (mockImpl && returnValue === undefined) {\n          return mockImpl.apply(this, arguments);\n        }\n\n        // Otherwise use prototype implementation\n        if (returnValue === undefined && arguments.callee._protoImpl) {\n          return arguments.callee._protoImpl.apply(this, arguments);\n        }\n\n        return returnValue;\n      };\n\n      f._isMockFunction = true;\n\n      f.mock = {\n        calls : calls,\n        instances : instances\n      };\n\n      f.mockClear = function() {\n        calls.length = 0;\n        instances.length = 0;\n      };\n\n      f.mockReturnValueOnce = function(value) {\n        // next function call will return this value or default return value\n        isReturnValueLastSet = true;\n        specificReturnValues.push(value);\n        return f;\n      };\n\n      f.mockReturnValue = function(value) {\n        // next function call will return specified return value or this one\n        isReturnValueLastSet = true;\n        defaultReturnValue = value;\n        return f;\n      };\n\n      f.mockImplementation = function(fn) {\n        // next function call will use mock implementation return value\n        isReturnValueLastSet = false;\n        mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = function() {\n        return f.mockImplementation(function() {\n          return this;\n        });\n      };\n\n      f._getMockImplementation = function() {\n        return mockImpl;\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n  }\n\n  throw new Error('Unrecognized type ' + metadata.type);\n}\n\nfunction generateFromMetadata(_metadata) {\n  var callbacks = [];\n  var refs = {};\n\n  function generateMock(metadata) {\n    var mock = makeComponent(metadata);\n    if (metadata.ref_id != null) {\n      refs[metadata.ref_id] = mock;\n    }\n\n    function getRefCallback(slot, ref) {\n      return function() {\n        mock[slot] = refs[ref];\n      };\n    }\n\n    for (var slot in metadata.members) {\n      var slotMetadata = metadata.members[slot];\n      if (slotMetadata.ref != null) {\n        callbacks.push(getRefCallback(slot, slotMetadata.ref));\n      } else {\n        mock[slot] = generateMock(slotMetadata);\n      }\n    }\n\n    return mock;\n  }\n\n  var mock = generateMock(_metadata);\n  callbacks.forEach(function(setter) {\n    setter();\n  });\n\n  return mock;\n}\n\n\nfunction _getMetadata(component, _refs) {\n  var refs = _refs || [];\n\n  // This is a potential performance drain, since the whole list is scanned\n  // for every component\n  var ref = refs.indexOf(component);\n  if (ref > -1) {\n    return {ref: ref};\n  }\n\n  var type = getType(component);\n  if (!type) {\n    return null;\n  }\n\n  var metadata = {type : type};\n  if (type == 'constant') {\n    metadata.value = component;\n    return metadata;\n  } else if (type == 'function') {\n    if (component._isMockFunction) {\n      metadata.mockImpl = component._getMockImplementation();\n    }\n  }\n\n  metadata.ref_id = refs.length;\n  refs.push(component);\n\n  var members = null;\n\n  function addMember(slot, data) {\n    if (!data) {\n      return;\n    }\n    if (!members) {\n      members = {};\n    }\n    members[slot] = data;\n  }\n\n  // Leave arrays alone\n  if (type != 'array') {\n    for (var slot in component) {\n      if (slot.charAt(0) == '_' ||\n          (type == 'function' && component._isMockFunction &&\n           slot.match(/^mock/))) {\n        continue;\n      }\n\n      if (component.hasOwnProperty(slot) ||\n          (type == 'object' && component[slot] != Object.prototype[slot])) {\n        addMember(slot, _getMetadata(component[slot], refs));\n      }\n    }\n\n    // If component is native code function, prototype might be undefined\n    if (type == 'function' && component.prototype) {\n      var prototype = _getMetadata(component.prototype, refs);\n      if (prototype && prototype.members) {\n        addMember('prototype', prototype);\n      }\n    }\n  }\n\n  if (members) {\n    metadata.members = members;\n  }\n\n  return metadata;\n}\n\nfunction removeUnusedRefs(metadata) {\n  function visit(md, f) {\n    f(md);\n    if (md.members) {\n      for (var slot in md.members) {\n        visit(md.members[slot], f);\n      }\n    }\n  }\n\n  var usedRefs = {};\n  visit(metadata, function(md) {\n    if (md.ref != null) {\n      usedRefs[md.ref] = true;\n    }\n  });\n\n  visit(metadata, function(md) {\n    if (!usedRefs[md.ref_id]) {\n      delete md.ref_id;\n    }\n  });\n}\n\nvar global = Function(\"return this\")();\nglobal.dirtyMocks = global.dirtyMocks || [];\n\nmodule.exports = {\n  /**\n   * Invokes the .mockClear method of all function mocks that have been\n   * called since the last time clear was called.\n   */\n  clear: function() {\n    var old = global.dirtyMocks;\n    global.dirtyMocks = [];\n    old.forEach(function(mock) {\n      mock.mockClear();\n    });\n  },\n\n  /**\n   * Generates a mock based on the given metadata. Mocks treat functions\n   * specially, and all mock functions have additional members, described in the\n   * documentation for getMockFunction in this module.\n   *\n   * One important note: function prototoypes are handled specially by this\n   * mocking framework. For functions with prototypes, when called as a\n   * constructor, the mock will install mocked function members on the instance.\n   * This allows different instances of the same constructor to have different\n   * values for its mocks member and its return values.\n   *\n   * @param metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   *\n   */\n  generateFromMetadata: generateFromMetadata,\n\n  /**\n   * Inspects the argument and returns its schema in the following recursive\n   * format:\n   * {\n   *  type: ...\n   *  members : {}\n   * }\n   *\n   * Where type is one of 'array', 'object', 'function', or 'ref', and members\n   * is an optional dictionary where the keys are member names and the values\n   * are metadata objects. Function prototypes are defined simply by defining\n   * metadata for the member.prototype of the function. The type of a function\n   * prototype should always be \"object\". For instance, a simple class might be\n   * defined like this:\n   *\n   * {\n   *  type: 'function',\n   *  members: {\n   *    staticMethod: {type: 'function'},\n   *    prototype: {\n   *      type: 'object',\n   *      members: {\n   *        instanceMethod: {type: 'function'}\n   *      }\n   *    }\n   *  }\n   * }\n   *\n   * Metadata may also contain references to other objects defined within the\n   * same metadata object. The metadata for the referent must be marked with\n   * 'ref_id' key and an arbitrary value. The referer must be marked with a\n   * 'ref' key that has the same value as object with ref_id that it refers to.\n   * For instance, this metadata blob:\n   * {\n   *  type: 'object',\n   *  ref_id: 1,\n   *  members: {\n   *    self: {ref: 1}\n   *  }\n   * }\n   *\n   * defines an object with a slot named 'self' that refers back to the object.\n   *\n   * @param component The component for which to retrieve metadata.\n   */\n  getMetadata: function(component) {\n    var metadata = _getMetadata(component);\n    // to make it easier to work with mock metadata, only preserve references\n    // that are actually used\n    removeUnusedRefs(metadata);\n    return metadata;\n  },\n\n  /**\n   * Generates a stand-alone function with members that help drive unit tests or\n   * confirm expectations. Specifically, functions returned by this method have\n   * the following members:\n   *\n   * .mock:\n   * An object with two members, \"calls\", and \"instances\", which are both\n   * lists. The items in the \"calls\" list are the arguments with which the\n   * function was called. The \"instances\" list stores the value of 'this' for\n   * each call to the function. This is useful for retrieving instances from a\n   * constructor.\n   *\n   * .mockReturnValueOnce(value)\n   * Pushes the given value onto a FIFO queue of return values for the\n   * function.\n   *\n   * .mockReturnValue(value)\n   * Sets the default return value for the function.\n   *\n   * .mockImplementation(function)\n   * Sets a mock implementation for the function.\n   *\n   * .mockReturnThis()\n   * Syntactic sugar for .mockImplementation(function() {return this;})\n   *\n   * In case both mockImplementation() and\n   * mockReturnValueOnce()/mockReturnValue() are called. The priority of\n   * which to use is based on what is the last call:\n   * - if the last call is mockReturnValueOnce() or mockReturnValue(),\n   *   use the specific return specific return value or default return value.\n   *   If specific return values are used up or no default return value is set,\n   *   fall back to try mockImplementation();\n   * - if the last call is mockImplementation(), run the given implementation\n   *   and return the result.\n   */\n  getMockFunction: function() {\n    return makeComponent({type: 'function'});\n  }\n};\n",
"mock-modules":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mock-modules\n */\n\nvar mocks = require(\"./mocks\");\nvar exportsRegistry = {};\nvar hasOwn = exportsRegistry.hasOwnProperty;\nvar explicitMockMap = {};\n\nfunction getMock(exports) {\n  try {\n    return mocks.generateFromMetadata(mocks.getMetadata(exports));\n  } catch (err) {\n    console.warn(err);\n    return exports;\n  }\n}\n\n// This function should be called at the bottom of any module that might\n// need to be mocked, after the final value of module.exports is known.\nexports.register = function(id, module) {\n  exportsRegistry[id] = {\n    module: module,\n    actual: module.exports,\n    mocked: null // Filled in lazily later.\n  };\n\n  // If doMock or doNotMock was called earlier, before the module was\n  // registered, then the choice should have been recorded in\n  // explicitMockMap. Now that the module is registered, we can finally\n  // fulfill the request.\n  if (hasOwn.call(explicitMockMap, id)) {\n    if (explicitMockMap[id]) {\n      doMock(id);\n    } else {\n      doNotMock(id);\n    }\n  }\n\n  return exports;\n};\n\nfunction resetEntry(id) {\n  if (hasOwn.call(exportsRegistry, id)) {\n    delete exportsRegistry[id].module.exports;\n    delete exportsRegistry[id];\n  }\n}\n\nexports.dumpCache = function() {\n  require(\"./mocks\").clear();\n\n  // Deleting module.exports will cause the module to be lazily\n  // reevaluated the next time it is required.\n  for (var id in exportsRegistry) {\n    resetEntry(id);\n  }\n\n  return exports;\n};\n\nexports.getMockMap = function() {\n  return explicitMockMap;\n};\n\nexports.clearMockMap = function() {\n  explicitMockMap = {};\n};\n\nexports.setMockMap = function(mockMap) {\n  exports.dumpCache();\n  exports.clearMockMap();\n  for (var id in mockMap) {\n    if (mockMap[id]) {\n      doMock(id);\n    } else {\n      doNotMock(id);\n    }\n  }\n\n  return exports;\n};\n\n// Call this function to ensure that require(id) returns the actual\n// exports object created by the module.\nfunction doNotMock(id) {\n  explicitMockMap[id] = false;\n\n  var entry = exportsRegistry[id];\n  if (entry && entry.module && entry.actual) {\n    entry.module.exports = entry.actual;\n  }\n\n  return exports;\n}\n\n// Call this function to ensure that require(id) returns a mock exports\n// object based on the actual exports object created by the module.\nfunction doMock(id) {\n  explicitMockMap[id] = true;\n\n  var entry = exportsRegistry[id];\n  if (entry && entry.module && entry.actual) {\n    // Because mocking can be expensive, create the mock exports object on\n    // demand, the first time doMock is called.\n    entry.mocked || (entry.mocked = getMock(entry.actual));\n    entry.module.exports = entry.mocked;\n  }\n\n  return exports;\n}\n\nvar global = Function(\"return this\")();\nrequire(\"./test/mock-timers\").installMockTimers(global);\n\n// Exported names are different for backwards compatibility.\nexports.dontMock = doNotMock;\nexports.mock = doMock;\n",
"test/mock-timers":"var mocks = require(\"../mocks\");\n\nvar timers = {};\n// Keep a fake timestamp\n// move on the time when runTimersToTime() is called\nvar now = 0;\n\n// add a timer of type either 'timeout' or 'interval'\nfunction _setTimer(type, callback, delay) {\n  var token = null;\n  do {\n    token = Math.floor(Math.random() * 4294967296) + 1;\n  } while (timers[token]);\n  timers[token] = {\n    type: type,\n    callback: callback,\n    // Add some random msecs to the delay to mimic code execution time.\n    time: now + delay + Math.floor(Math.random() * 5),\n    interval: (type == 'interval' ? delay : 0)\n  };\n  return token;\n}\n\n// clear a timer of type either 'timeout' or 'interval'\nfunction _clearTimer(type, token) {\n  if (timers[token] && timers[token].type == type) {\n    delete timers[token];\n  }\n}\n\nfunction _setTimeout(callback, delay) {\n  return _setTimer('timeout', callback, delay);\n}\n\nfunction _setInterval(callback, delay) {\n  return _setTimer('interval', callback, delay);\n}\n\nfunction _clearTimeout(token) {\n  _clearTimer('timeout', token);\n}\n\nfunction _clearInterval(token) {\n  _clearTimer('interval', token);\n}\n\n// Run timer of given token\nfunction _runTimer(token) {\n  // Skip non-existing token\n  if (timers[token]) {\n    if (timers[token].type == 'timeout') {\n      // for 'timeout', run callback and delete the timer\n      var callback = timers[token].callback;\n      delete timers[token];\n      callback();\n    } else if (timers[token].type == 'interval') {\n      // for 'interval', run callback and set the next invoke time\n      // Add some random msecs to the delay to mimic code execution time.\n      timers[token].time =\n        now + timers[token].interval + Math.floor(Math.random() * 5);\n      timers[token].callback();\n    }\n  }\n}\n\nfunction _runTimersOnce() {\n  // Invoke all timers once regardsless of the delay\n  for (var token in timers) {\n    _runTimer(token);\n  }\n}\n\nfunction _runTimersToTime(delay) {\n  var toRunToken = _getNextTimerToken();\n  if (!toRunToken) {\n    return;\n  }\n\n  var minTime = timers[toRunToken].time;\n  if (now + delay < minTime) {\n    // Termination when there's no more timers to invoke\n    now += delay;\n  } else {\n    // Recursively invoke the next to-run timer\n    delay -= (minTime - now);\n    now = minTime;\n    _runTimer(toRunToken);\n    _runTimersToTime(delay);\n  }\n}\n\nfunction _runTimersRepeatedly() {\n  // Only run a generous 1000 timers and then bail, since we may have entered\n  // a loop if we have more than that.\n  var max_timers = 1000;\n\n  var token;\n  for (var ii = 0; ii < max_timers; ii++) {\n    token = _getNextTimerToken();\n\n    if (!token) {\n      break;\n    }\n\n    _runTimer(token);\n  }\n\n  if (ii === max_timers) {\n    throw new Error(\"More timers still exist after \" + max_timers + \" timers!\");\n  }\n}\n\nfunction _clearTimers() {\n  for (var token in timers) {\n    delete timers[token];\n  }\n}\n\nfunction _getNextTimerToken() {\n  var nextTimerToken = null;\n  var minTime = 31536000000; // One year\n  // Find the next to invoke timer\n  for (var token in timers) {\n    if (timers[token].time < minTime) {\n      nextTimerToken = token;\n      minTime = timers[token].time;\n    }\n  }\n  return nextTimerToken;\n}\n\nvar mockTimers = {\n  setTimeout: _setTimeout,\n  clearTimeout: _clearTimeout,\n  setInterval: _setInterval,\n  clearInterval: _clearInterval,\n\n  /**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n   * Iteratively run callbacks in time order during the time from now to\n   * now + delay.\n   * If one callback register another timer which should be run during now to\n   * now + delay, the new timer will also be run in the right order.\n   *\n   * @param delay\n   */\n  runTimersToTime: _runTimersToTime,\n\n  /**\n   * Run all registered timer once. Newly registered timers will not be run.\n   */\n  runTimersOnce: _runTimersOnce,\n\n  /**\n   * Iteratively run callbacks until there are no timers left to call. Will\n   * stop after a maximum number of iterations to avoid infinite loop.\n   *\n   * @param maximum iterations (optional)\n   */\n  runTimersRepeatedly: _runTimersRepeatedly,\n\n  /**\n   * Clear all timers\n   */\n  clearTimers: _clearTimers,\n\n  /**\n   * Get the number of remaining timers\n   */\n  getTimersCount: function() {\n    return Object.keys(timers).length;\n  }\n};\n\nmodule.exports.installMockTimers = function(window) {\n  window._originalTimeouts = {\n    setTimeout: window.setTimeout,\n    clearTimeout: window.clearTimeout,\n    setInterval: window.setInterval,\n    clearInterval: window.clearInterval\n  };\n  window.setTimeout =\n    mocks.getMockFunction().mockImplementation(mockTimers.setTimeout);\n  window.clearTimeout =\n    mocks.getMockFunction().mockImplementation(mockTimers.clearTimeout);\n  window.setInterval =\n    mocks.getMockFunction().mockImplementation(mockTimers.setInterval);\n  window.clearInterval =\n    mocks.getMockFunction().mockImplementation(mockTimers.clearInterval);\n  window.mockRunTimersOnce =\n    mocks.getMockFunction().mockImplementation(mockTimers.runTimersOnce);\n  window.mockRunTimersToTime =\n    mocks.getMockFunction().mockImplementation(mockTimers.runTimersToTime);\n  window.mockRunTimersRepeatedly =\n    mocks.getMockFunction().mockImplementation(mockTimers.runTimersRepeatedly);\n  window.mockClearTimers =\n    mocks.getMockFunction().mockImplementation(mockTimers.clearTimers);\n  window.mockGetTimersCount =\n    mocks.getMockFunction().mockImplementation(mockTimers.getTimersCount);\n};\n\nmodule.exports.uninstallMockTimers = function(window) {\n  window.setTimeout = window._originalTimeouts.setTimeout;\n  window.clearTimeout = window._originalTimeouts.clearTimeout;\n  window.setInterval = window._originalTimeouts.setInterval;\n  window.clearInterval = window._originalTimeouts.clearInterval;\n  window._originalTimeouts = undefined;\n  window.mockRunTimersOnce = undefined;\n  window.mockRunTimersToTime = undefined;\n  window.mockRunTimersRepeatedly = undefined;\n  window.mockClearTimers = undefined;\n  window.mockGetTimersCount = undefined;\n};\n\nrequire(\"../mock-modules\").register(\"test/mock-timers\", module);\n",
"update":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule update\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar keyOf = require(\"./keyOf\");\nvar invariant = require(\"./invariant\");\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = keyOf({$push: null});\nvar COMMAND_UNSHIFT = keyOf({$unshift: null});\nvar COMMAND_SPLICE = keyOf({$splice: null});\nvar COMMAND_SET = keyOf({$set: null});\nvar COMMAND_MERGE = keyOf({$merge: null});\nvar COMMAND_APPLY = keyOf({$apply: null});\n\nvar ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY\n];\n\nvar ALL_COMMANDS_SET = {};\n\nALL_COMMANDS_LIST.forEach(function(command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  ) : invariant(Array.isArray(value)));\n  var specValue = spec[command];\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue\n  ) : invariant(Array.isArray(specValue)));\n}\n\nfunction update(value, spec) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec === 'object',\n    'update(): You provided a key path to update() that did not contain one ' +\n    'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET\n  ) : invariant(typeof spec === 'object'));\n\n  if (spec.hasOwnProperty(COMMAND_SET)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET\n    ) : invariant(Object.keys(spec).length === 1));\n\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (spec.hasOwnProperty(COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      mergeObj && typeof mergeObj === 'object',\n      'update(): %s expects a spec of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      mergeObj\n    ) : invariant(mergeObj && typeof mergeObj === 'object'));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      nextValue && typeof nextValue === 'object',\n      'update(): %s expects a target of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      nextValue\n    ) : invariant(nextValue && typeof nextValue === 'object'));\n    assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (spec.hasOwnProperty(COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function(item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function(item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_SPLICE)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array; got %s',\n      COMMAND_SPLICE,\n      value\n    ) : invariant(Array.isArray(value)));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays; got %s. ' +\n      'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE]\n    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));\n    spec[COMMAND_SPLICE].forEach(function(args) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays; got %s. ' +\n        'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE]\n      ) : invariant(Array.isArray(args)));\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_APPLY)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function; got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY]\n    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;\n\nrequire(\"./mock-modules\").register(\"update\", module);\n",
"LinkedStateMixin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedStateMixin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactLink = require(\"./ReactLink\");\nvar ReactStateSetters = require(\"./ReactStateSetters\");\n\n/**\n * A simple mixin around ReactLink.forState().\n */\nvar LinkedStateMixin = {\n  /**\n   * Create a ReactLink that's linked to part of this component's state. The\n   * ReactLink will have the current value of this.state[key] and will call\n   * setState() when a change is requested.\n   *\n   * @param {string} key state key to update. Note: you may want to use keyOf()\n   * if you're using Google Closure Compiler advanced mode.\n   * @return {ReactLink} ReactLink instance linking to the state.\n   */\n  linkState: function(key) {\n    return new ReactLink(\n      this.state[key],\n      ReactStateSetters.createStateKeySetter(this, key)\n    );\n  }\n};\n\nmodule.exports = LinkedStateMixin;\n\nrequire(\"./mock-modules\").register(\"LinkedStateMixin\", module);\n",
"React":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar ReactChildren = require(\"./ReactChildren\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\nvar ReactDefaultInjection = require(\"./ReactDefaultInjection\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactMultiChild = require(\"./ReactMultiChild\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypes = require(\"./ReactPropTypes\");\nvar ReactServerRendering = require(\"./ReactServerRendering\");\nvar ReactTextComponent = require(\"./ReactTextComponent\");\n\nvar assign = require(\"./Object.assign\");\nvar deprecated = require(\"./deprecated\");\nvar onlyChild = require(\"./onlyChild\");\n\nReactDefaultInjection.inject();\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n}\n\n// TODO: Drop legacy elements once classes no longer export these factories\ncreateElement = ReactLegacyElement.wrapCreateElement(\n  createElement\n);\ncreateFactory = ReactLegacyElement.wrapCreateFactory(\n  createFactory\n);\n\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);\n\nvar React = {\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    only: onlyChild\n  },\n  DOM: ReactDOM,\n  PropTypes: ReactPropTypes,\n  initializeTouchEvents: function(shouldUseTouch) {\n    EventPluginUtils.useTouchEvents = shouldUseTouch;\n  },\n  createClass: ReactCompositeComponent.createClass,\n  createElement: createElement,\n  createFactory: createFactory,\n  constructAndRenderComponent: ReactMount.constructAndRenderComponent,\n  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,\n  render: render,\n  renderToString: ReactServerRendering.renderToString,\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  isValidClass: ReactLegacyElement.isValidClass,\n  isValidElement: ReactElement.isValidElement,\n  withContext: ReactContext.withContext,\n\n  // Hook for JSX spread, don't use this for anything else.\n  __spread: assign,\n\n  // Deprecations (remove for 0.13)\n  renderComponent: deprecated(\n    'React',\n    'renderComponent',\n    'render',\n    this,\n    render\n  ),\n  renderComponentToString: deprecated(\n    'React',\n    'renderComponentToString',\n    'renderToString',\n    this,\n    ReactServerRendering.renderToString\n  ),\n  renderComponentToStaticMarkup: deprecated(\n    'React',\n    'renderComponentToStaticMarkup',\n    'renderToStaticMarkup',\n    this,\n    ReactServerRendering.renderToStaticMarkup\n  ),\n  isValidComponent: deprecated(\n    'React',\n    'isValidComponent',\n    'isValidElement',\n    this,\n    ReactElement.isValidElement\n  )\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    Component: ReactComponent,\n    CurrentOwner: ReactCurrentOwner,\n    DOMComponent: ReactDOMComponent,\n    DOMPropertyOperations: DOMPropertyOperations,\n    InstanceHandles: ReactInstanceHandles,\n    Mount: ReactMount,\n    MultiChild: ReactMultiChild,\n    TextComponent: ReactTextComponent\n  });\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {\n\n    // If we're in Chrome, look for the devtools marker and provide a download\n    // link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n        console.debug(\n          'Download the React DevTools for a better development experience: ' +\n          'http://fb.me/react-devtools'\n        );\n      }\n    }\n\n    var expectedFeatures = [\n      // shims\n      Array.isArray,\n      Array.prototype.every,\n      Array.prototype.forEach,\n      Array.prototype.indexOf,\n      Array.prototype.map,\n      Date.now,\n      Function.prototype.bind,\n      Object.keys,\n      String.prototype.split,\n      String.prototype.trim,\n\n      // shams\n      Object.create,\n      Object.freeze\n    ];\n\n    for (var i = 0; i < expectedFeatures.length; i++) {\n      if (!expectedFeatures[i]) {\n        console.error(\n          'One or more ES5 shim/shams expected by React are not available: ' +\n          'http://fb.me/react-warning-polyfills'\n        );\n        break;\n      }\n    }\n  }\n}\n\n// Version exists only in the open-source version of React, not in Facebook's\n// internal version.\nReact.version = '0.12.2';\n\nmodule.exports = React;\n\nrequire(\"./mock-modules\").register(\"React\", module);\n",
"ReactLink":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactLink\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * ReactLink encapsulates a common pattern in which a component wants to modify\n * a prop received from its parent. ReactLink allows the parent to pass down a\n * value coupled with a callback that, when invoked, expresses an intent to\n * modify that value. For example:\n *\n * React.createClass({\n *   getInitialState: function() {\n *     return {value: ''};\n *   },\n *   render: function() {\n *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);\n *     return <input valueLink={valueLink} />;\n *   },\n *   this._handleValueChange: function(newValue) {\n *     this.setState({value: newValue});\n *   }\n * });\n *\n * We have provided some sugary mixins to make the creation and\n * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.\n */\n\nvar React = require(\"./React\");\n\n/**\n * @param {*} value current value of the link\n * @param {function} requestChange callback to request a change\n */\nfunction ReactLink(value, requestChange) {\n  this.value = value;\n  this.requestChange = requestChange;\n}\n\n/**\n * Creates a PropType that enforces the ReactLink API and optionally checks the\n * type of the value being passed inside the link. Example:\n *\n * MyComponent.propTypes = {\n *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)\n * }\n */\nfunction createLinkTypeChecker(linkType) {\n  var shapes = {\n    value: typeof linkType === 'undefined' ?\n      React.PropTypes.any.isRequired :\n      linkType.isRequired,\n    requestChange: React.PropTypes.func.isRequired\n  };\n  return React.PropTypes.shape(shapes);\n}\n\nReactLink.PropTypes = {\n  link: createLinkTypeChecker\n};\n\nmodule.exports = ReactLink;\n\nrequire(\"./mock-modules\").register(\"ReactLink\", module);\n",
"emptyFunction":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function() { return this; };\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\nmodule.exports = emptyFunction;\n\nrequire(\"./mock-modules\").register(\"emptyFunction\", module);\n",
"ReactPropTypeLocations":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n\"use strict\";\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;\n\nrequire(\"./mock-modules\").register(\"ReactPropTypeLocations\", module);\n",
"ReactCSSTransitionGroup":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroup\n */\n\n\"use strict\";\n\nvar React = require(\"./React\");\n\nvar assign = require(\"./Object.assign\");\n\nvar ReactTransitionGroup = React.createFactory(\n  require(\"./ReactTransitionGroup\")\n);\nvar ReactCSSTransitionGroupChild = React.createFactory(\n  require(\"./ReactCSSTransitionGroupChild\")\n);\n\nvar ReactCSSTransitionGroup = React.createClass({\n  displayName: 'ReactCSSTransitionGroup',\n\n  propTypes: {\n    transitionName: React.PropTypes.string.isRequired,\n    transitionEnter: React.PropTypes.bool,\n    transitionLeave: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      transitionEnter: true,\n      transitionLeave: true\n    };\n  },\n\n  _wrapChild: function(child) {\n    // We need to provide this childFactory so that\n    // ReactCSSTransitionGroupChild can receive updates to name, enter, and\n    // leave while it is leaving.\n    return ReactCSSTransitionGroupChild(\n      {\n        name: this.props.transitionName,\n        enter: this.props.transitionEnter,\n        leave: this.props.transitionLeave\n      },\n      child\n    );\n  },\n\n  render: function() {\n    return (\n      ReactTransitionGroup(\n        assign({}, this.props, {childFactory: this._wrapChild})\n      )\n    );\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroup;\n\nrequire(\"./mock-modules\").register(\"ReactCSSTransitionGroup\", module);\n",
"ReactTransitionChildMapping":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactTransitionChildMapping\n */\n\n\"use strict\";\n\nvar ReactChildren = require(\"./ReactChildren\");\n\nvar ReactTransitionChildMapping = {\n  /**\n   * Given `this.props.children`, return an object mapping key to child. Just\n   * simple syntactic sugar around ReactChildren.map().\n   *\n   * @param {*} children `this.props.children`\n   * @return {object} Mapping of key to child\n   */\n  getChildMapping: function(children) {\n    return ReactChildren.map(children, function(child) {\n      return child;\n    });\n  },\n\n  /**\n   * When you're adding or removing children some may be added or removed in the\n   * same render pass. We want to show *both* since we want to simultaneously\n   * animate elements in and out. This function takes a previous set of keys\n   * and a new set of keys and merges them with its best guess of the correct\n   * ordering. In the future we may expose some of the utilities in\n   * ReactMultiChild to make this easy, but for now React itself does not\n   * directly have this concept of the union of prevChildren and nextChildren\n   * so we implement it here.\n   *\n   * @param {object} prev prev children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @param {object} next next children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @return {object} a key set that contains all keys in `prev` and all keys\n   * in `next` in a reasonable order.\n   */\n  mergeChildMappings: function(prev, next) {\n    prev = prev || {};\n    next = next || {};\n\n    function getValueForKey(key) {\n      if (next.hasOwnProperty(key)) {\n        return next[key];\n      } else {\n        return prev[key];\n      }\n    }\n\n    // For each key of `next`, the list of keys to insert before that key in\n    // the combined list\n    var nextKeysPending = {};\n\n    var pendingKeys = [];\n    for (var prevKey in prev) {\n      if (next.hasOwnProperty(prevKey)) {\n        if (pendingKeys.length) {\n          nextKeysPending[prevKey] = pendingKeys;\n          pendingKeys = [];\n        }\n      } else {\n        pendingKeys.push(prevKey);\n      }\n    }\n\n    var i;\n    var childMapping = {};\n    for (var nextKey in next) {\n      if (nextKeysPending.hasOwnProperty(nextKey)) {\n        for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n          var pendingNextKey = nextKeysPending[nextKey][i];\n          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(\n            pendingNextKey\n          );\n        }\n      }\n      childMapping[nextKey] = getValueForKey(nextKey);\n    }\n\n    // Finally, add the keys which didn't appear before any key in `next`\n    for (i = 0; i < pendingKeys.length; i++) {\n      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n    }\n\n    return childMapping;\n  }\n};\n\nmodule.exports = ReactTransitionChildMapping;\n\nrequire(\"./mock-modules\").register(\"ReactTransitionChildMapping\", module);\n",
"ReactTransitionGroup":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionGroup\n */\n\n\"use strict\";\n\nvar React = require(\"./React\");\nvar ReactTransitionChildMapping = require(\"./ReactTransitionChildMapping\");\n\nvar assign = require(\"./Object.assign\");\nvar cloneWithProps = require(\"./cloneWithProps\");\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar ReactTransitionGroup = React.createClass({\n  displayName: 'ReactTransitionGroup',\n\n  propTypes: {\n    component: React.PropTypes.any,\n    childFactory: React.PropTypes.func\n  },\n\n  getDefaultProps: function() {\n    return {\n      component: 'span',\n      childFactory: emptyFunction.thatReturnsArgument\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      children: ReactTransitionChildMapping.getChildMapping(this.props.children)\n    };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(\n      nextProps.children\n    );\n    var prevChildMapping = this.state.children;\n\n    this.setState({\n      children: ReactTransitionChildMapping.mergeChildMappings(\n        prevChildMapping,\n        nextChildMapping\n      )\n    });\n\n    var key;\n\n    for (key in nextChildMapping) {\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n      if (nextChildMapping[key] && !hasPrev &&\n          !this.currentlyTransitioningKeys[key]) {\n        this.keysToEnter.push(key);\n      }\n    }\n\n    for (key in prevChildMapping) {\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);\n      if (prevChildMapping[key] && !hasNext &&\n          !this.currentlyTransitioningKeys[key]) {\n        this.keysToLeave.push(key);\n      }\n    }\n\n    // If we want to someday check for reordering, we could do it here.\n  },\n\n  componentWillMount: function() {\n    this.currentlyTransitioningKeys = {};\n    this.keysToEnter = [];\n    this.keysToLeave = [];\n  },\n\n  componentDidUpdate: function() {\n    var keysToEnter = this.keysToEnter;\n    this.keysToEnter = [];\n    keysToEnter.forEach(this.performEnter);\n\n    var keysToLeave = this.keysToLeave;\n    this.keysToLeave = [];\n    keysToLeave.forEach(this.performLeave);\n  },\n\n  performEnter: function(key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n\n    if (component.componentWillEnter) {\n      component.componentWillEnter(\n        this._handleDoneEntering.bind(this, key)\n      );\n    } else {\n      this._handleDoneEntering(key);\n    }\n  },\n\n  _handleDoneEntering: function(key) {\n    var component = this.refs[key];\n    if (component.componentDidEnter) {\n      component.componentDidEnter();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(\n      this.props.children\n    );\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully entered. Remove it.\n      this.performLeave(key);\n    }\n  },\n\n  performLeave: function(key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n    if (component.componentWillLeave) {\n      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));\n    } else {\n      // Note that this is somewhat dangerous b/c it calls setState()\n      // again, effectively mutating the component before all the work\n      // is done.\n      this._handleDoneLeaving(key);\n    }\n  },\n\n  _handleDoneLeaving: function(key) {\n    var component = this.refs[key];\n\n    if (component.componentDidLeave) {\n      component.componentDidLeave();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(\n      this.props.children\n    );\n\n    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n      // This entered again before it fully left. Add it again.\n      this.performEnter(key);\n    } else {\n      var newChildren = assign({}, this.state.children);\n      delete newChildren[key];\n      this.setState({children: newChildren});\n    }\n  },\n\n  render: function() {\n    // TODO: we could get rid of the need for the wrapper node\n    // by cloning a single child\n    var childrenToRender = {};\n    for (var key in this.state.children) {\n      var child = this.state.children[key];\n      if (child) {\n        // You may need to apply reactive updates to a child as it is leaving.\n        // The normal React way to do it won't work since the child will have\n        // already been removed. In case you need this behavior you can provide\n        // a childFactory function to wrap every child, even the ones that are\n        // leaving.\n        childrenToRender[key] = cloneWithProps(\n          this.props.childFactory(child),\n          {ref: key}\n        );\n      }\n    }\n    return React.createElement(\n      this.props.component,\n      this.props,\n      childrenToRender\n    );\n  }\n});\n\nmodule.exports = ReactTransitionGroup;\n\nrequire(\"./mock-modules\").register(\"ReactTransitionGroup\", module);\n",
"keyOf":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without loosing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf = function(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\n\nmodule.exports = keyOf;\n\nrequire(\"./mock-modules\").register(\"keyOf\", module);\n",
"ReactMount":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMount\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar containsNode = require(\"./containsNode\");\nvar deprecated = require(\"./deprecated\");\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nvar createElement = ReactLegacyElement.wrapCreateElement(\n  ReactElement.createElement\n);\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray = [];\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !isValid(cached, id),\n          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',\n          ATTR_NAME, id\n        ) : invariant(!isValid(cached, id)));\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      internalGetID(node) === id,\n      'ReactMount: Unexpected modification of `%s`',\n      ATTR_NAME\n    ) : invariant(internalGetID(node) === id));\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(\n    targetID,\n    findDeepestCachedAncestorImpl\n  );\n\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function(container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function(\n      prevComponent,\n      nextComponent,\n      container,\n      callback) {\n    var nextProps = nextComponent.props;\n    ReactMount.scrollMonitor(container, function() {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] =\n        getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function(nextComponent, container) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n        container.nodeType === DOC_NODE_TYPE\n      ),\n      '_registerComponent(...): Target container is not a DOM element.'\n    ) : invariant(container && (\n      container.nodeType === ELEMENT_NODE_TYPE ||\n      container.nodeType === DOC_NODE_TYPE\n    )));\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: ReactPerf.measure(\n    'ReactMount',\n    '_renderNewRootComponent',\n    function(\n        nextComponent,\n        container,\n        shouldReuseMarkup) {\n      // Various parts of our code (such as ReactCompositeComponent's\n      // _renderValidatedComponent) assume that calls to render aren't nested;\n      // verify that that's the case.\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        ReactCurrentOwner.current == null,\n        '_renderNewRootComponent(): Render methods should be a pure function ' +\n        'of props and state; triggering nested component updates from ' +\n        'render is not allowed. If necessary, trigger nested updates in ' +\n        'componentDidUpdate.'\n      ) : null);\n\n      var componentInstance = instantiateReactComponent(nextComponent, null);\n      var reactRootID = ReactMount._registerComponent(\n        componentInstance,\n        container\n      );\n      componentInstance.mountComponentIntoNode(\n        reactRootID,\n        container,\n        shouldReuseMarkup\n      );\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        // Record the root element in case it later gets transplanted.\n        rootElementsByReactRootID[reactRootID] =\n          getReactRootElementInContainer(container);\n      }\n\n      return componentInstance;\n    }\n  ),\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function(nextElement, container, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactElement.isValidElement(nextElement),\n      'renderComponent(): Invalid component element.%s',\n      (\n        typeof nextElement === 'string' ?\n          ' Instead of passing an element string, make sure to instantiate ' +\n          'it by passing it to React.createElement.' :\n        ReactLegacyElement.isValidFactory(nextElement) ?\n          ' Instead of passing a component class, make sure to instantiate ' +\n          'it by passing it to React.createElement.' :\n        // Check if it quacks like a element\n        typeof nextElement.props !== \"undefined\" ?\n          ' This may be caused by unintentionally loading two independent ' +\n          'copies of React.' :\n          ''\n      )\n    ) : invariant(ReactElement.isValidElement(nextElement)));\n\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      var prevElement = prevComponent._currentElement;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        return ReactMount._updateRootComponent(\n          prevComponent,\n          nextElement,\n          container,\n          callback\n        );\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup =\n      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;\n\n    var component = ReactMount._renderNewRootComponent(\n      nextElement,\n      container,\n      shouldReuseMarkup\n    );\n    callback && callback.call(component);\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function(constructor, props, container) {\n    var element = createElement(constructor, props);\n    return ReactMount.render(element, container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function(constructor, props, id) {\n    var domNode = document.getElementById(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      domNode,\n      'Tried to get element with id of \"%s\" but it is not present on the page.',\n      id\n    ) : invariant(domNode));\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function(container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function(container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      ReactCurrentOwner.current == null,\n      'unmountComponentAtNode(): Render methods should be a pure function of ' +\n      'props and state; triggering nested component updates from render is ' +\n      'not allowed. If necessary, trigger nested updates in ' +\n      'componentDidUpdate.'\n    ) : null);\n\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      return false;\n    }\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (\"production\" !== process.env.NODE_ENV) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    }\n\n    // http://jsperf.com/emptying-a-node\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function(id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          // Call internalGetID here because getID calls isValid which calls\n          // findReactContainerForID (this function).\n          internalGetID(rootElement) === reactRootID,\n          'ReactMount: Root element ID differed from reactRootID.'\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID));\n\n        var containerChild = container.firstChild;\n        if (containerChild &&\n            reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          console.warn(\n            'ReactMount: Root element has been removed from its original ' +\n            'container. New container:', rootElement.parentNode\n          );\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function(id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function(node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function(node) {\n    var current = node;\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n      current = current.parentNode;\n    }\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function(ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      false,\n      'findComponentRoot(..., %s): Unable to find element. This probably ' +\n      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +\n      'usually due to forgetting a <tbody> when using tables, nesting tags ' +\n      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +\n      'parent. ' +\n      'Try inspecting the child nodes of the element with React ID `%s`.',\n      targetID,\n      ReactMount.getID(ancestorNode)\n    ) : invariant(false));\n  },\n\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  purgeID: purgeID\n};\n\n// Deprecations (remove for 0.13)\nReactMount.renderComponent = deprecated(\n  'ReactMount',\n  'renderComponent',\n  'render',\n  this,\n  ReactMount.render\n);\n\nmodule.exports = ReactMount;\n\nrequire(\"./mock-modules\").register(\"ReactMount\", module);\n",
"EventPluginHub":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n\"use strict\";\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function(event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var invalid = !InstanceHandle||\n    !InstanceHandle.traverseTwoPhase ||\n    !InstanceHandle.traverseEnterLeave;\n  if (invalid) {\n    throw new Error('InstanceHandle not injected before use!');\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !listener || typeof listener === 'function',\n      'Expected %s listener to be a function, instead got type %s',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener === 'function'));\n\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !eventQueue,\n      'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n\nrequire(\"./mock-modules\").register(\"EventPluginHub\", module);\n",
"TapEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TapEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\nvar TouchEventUtils = require(\"./TouchEventUtils\");\nvar ViewportMetrics = require(\"./ViewportMetrics\");\n\nvar keyOf = require(\"./keyOf\");\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar isStartish = EventPluginUtils.isStartish;\nvar isEndish = EventPluginUtils.isEndish;\n\n/**\n * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`\n * in order to still be considered a 'tap' event.\n */\nvar tapMoveThreshold = 10;\nvar startCoords = {x: null, y: null};\n\nvar Axis = {\n  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},\n  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}\n};\n\nfunction getAxisCoordOfEvent(axis, nativeEvent) {\n  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);\n  if (singleTouch) {\n    return singleTouch[axis.page];\n  }\n  return axis.page in nativeEvent ?\n    nativeEvent[axis.page] :\n    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];\n}\n\nfunction getDistance(coords, nativeEvent) {\n  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);\n  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);\n  return Math.pow(\n    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),\n    0.5\n  );\n}\n\nvar dependencies = [\n  topLevelTypes.topMouseDown,\n  topLevelTypes.topMouseMove,\n  topLevelTypes.topMouseUp\n];\n\nif (EventPluginUtils.useTouchEvents) {\n  dependencies.push(\n    topLevelTypes.topTouchCancel,\n    topLevelTypes.topTouchEnd,\n    topLevelTypes.topTouchStart,\n    topLevelTypes.topTouchMove\n  );\n}\n\nvar eventTypes = {\n  touchTap: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchTap: null}),\n      captured: keyOf({onTouchTapCapture: null})\n    },\n    dependencies: dependencies\n  }\n};\n\nvar TapEventPlugin = {\n\n  tapMoveThreshold: tapMoveThreshold,\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {\n      return null;\n    }\n    var event = null;\n    var distance = getDistance(startCoords, nativeEvent);\n    if (isEndish(topLevelType) && distance < tapMoveThreshold) {\n      event = SyntheticUIEvent.getPooled(\n        eventTypes.touchTap,\n        topLevelTargetID,\n        nativeEvent\n      );\n    }\n    if (isStartish(topLevelType)) {\n      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);\n      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);\n    } else if (isEndish(topLevelType)) {\n      startCoords.x = 0;\n      startCoords.y = 0;\n    }\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n\n};\n\nmodule.exports = TapEventPlugin;\n\nrequire(\"./mock-modules\").register(\"TapEventPlugin\", module);\n",
"EventListener":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (!target.addEventListener) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        console.error(\n          'Attempted to listen to events during the capture phase on a ' +\n          'browser that does not support the capture phase. Your application ' +\n          'will not receive some events.'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  },\n\n  registerDefault: function() {}\n};\n\nmodule.exports = EventListener;\n\nrequire(\"./mock-modules\").register(\"EventListener\", module);\n",
"ReactBrowserEventEmitter":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserEventEmitter\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar ReactEventEmitterMixin = require(\"./ReactEventEmitterMixin\");\nvar ViewportMetrics = require(\"./ViewportMetrics\");\n\nvar assign = require(\"./Object.assign\");\nvar isEventSupported = require(\"./isEventSupported\");\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo = {};\nvar isMonitoringScrollValue = false;\nvar reactTopListenersCounter = 0;\n\n// For events like 'submit' which don't consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don't include them here\nvar topEventMapping = {\n  topBlur: 'blur',\n  topChange: 'change',\n  topClick: 'click',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topScroll: 'scroll',\n  topSelectionChange: 'selectionchange',\n  topTextInput: 'textInput',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topWheel: 'wheel'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = \"_reactListenersID\" + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);\n *\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function(ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(\n        ReactBrowserEventEmitter.handleTopLevel\n      );\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function(enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function() {\n    return !!(\n      ReactBrowserEventEmitter.ReactEventListener &&\n      ReactBrowserEventEmitter.ReactEventListener.isEnabled()\n    );\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won't be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function(registrationName, contentDocumentHandle) {\n    var mountAt = contentDocumentHandle;\n    var isListening = getListeningForDocument(mountAt);\n    var dependencies = EventPluginRegistry.\n      registrationNameDependencies[registrationName];\n\n    var topLevelTypes = EventConstants.topLevelTypes;\n    for (var i = 0, l = dependencies.length; i < l; i++) {\n      var dependency = dependencies[i];\n      if (!(\n            isListening.hasOwnProperty(dependency) &&\n            isListening[dependency]\n          )) {\n        if (dependency === topLevelTypes.topWheel) {\n          if (isEventSupported('wheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'wheel',\n              mountAt\n            );\n          } else if (isEventSupported('mousewheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'mousewheel',\n              mountAt\n            );\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'DOMMouseScroll',\n              mountAt\n            );\n          }\n        } else if (dependency === topLevelTypes.topScroll) {\n\n          if (isEventSupported('scroll', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topScroll,\n              'scroll',\n              mountAt\n            );\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topScroll,\n              'scroll',\n              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE\n            );\n          }\n        } else if (dependency === topLevelTypes.topFocus ||\n            dependency === topLevelTypes.topBlur) {\n\n          if (isEventSupported('focus', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topFocus,\n              'focus',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topBlur,\n              'blur',\n              mountAt\n            );\n          } else if (isEventSupported('focusin')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topFocus,\n              'focusin',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topBlur,\n              'focusout',\n              mountAt\n            );\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] = true;\n          isListening[topLevelTypes.topFocus] = true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n            dependency,\n            topEventMapping[dependency],\n            mountAt\n          );\n        }\n\n        isListening[dependency] = true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function(){\n    if (!isMonitoringScrollValue) {\n      var refresh = ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue = true;\n    }\n  },\n\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginHub.registrationNameModules,\n\n  putListener: EventPluginHub.putListener,\n\n  getListener: EventPluginHub.getListener,\n\n  deleteListener: EventPluginHub.deleteListener,\n\n  deleteAllListeners: EventPluginHub.deleteAllListeners\n\n});\n\nmodule.exports = ReactBrowserEventEmitter;\n\nrequire(\"./mock-modules\").register(\"ReactBrowserEventEmitter\", module);\n",
"ReactDOM":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOM\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\n\nvar mapObject = require(\"./mapObject\");\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @param {string} tag Tag name (e.g. `div`).\n * @private\n */\nfunction createDOMFactory(tag) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    return ReactLegacyElement.markNonLegacyFactory(\n      ReactElementValidator.createFactory(tag)\n    );\n  }\n  return ReactLegacyElement.markNonLegacyFactory(\n    ReactElement.createFactory(tag)\n  );\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOM = mapObject({\n  a: 'a',\n  abbr: 'abbr',\n  address: 'address',\n  area: 'area',\n  article: 'article',\n  aside: 'aside',\n  audio: 'audio',\n  b: 'b',\n  base: 'base',\n  bdi: 'bdi',\n  bdo: 'bdo',\n  big: 'big',\n  blockquote: 'blockquote',\n  body: 'body',\n  br: 'br',\n  button: 'button',\n  canvas: 'canvas',\n  caption: 'caption',\n  cite: 'cite',\n  code: 'code',\n  col: 'col',\n  colgroup: 'colgroup',\n  data: 'data',\n  datalist: 'datalist',\n  dd: 'dd',\n  del: 'del',\n  details: 'details',\n  dfn: 'dfn',\n  dialog: 'dialog',\n  div: 'div',\n  dl: 'dl',\n  dt: 'dt',\n  em: 'em',\n  embed: 'embed',\n  fieldset: 'fieldset',\n  figcaption: 'figcaption',\n  figure: 'figure',\n  footer: 'footer',\n  form: 'form',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  head: 'head',\n  header: 'header',\n  hr: 'hr',\n  html: 'html',\n  i: 'i',\n  iframe: 'iframe',\n  img: 'img',\n  input: 'input',\n  ins: 'ins',\n  kbd: 'kbd',\n  keygen: 'keygen',\n  label: 'label',\n  legend: 'legend',\n  li: 'li',\n  link: 'link',\n  main: 'main',\n  map: 'map',\n  mark: 'mark',\n  menu: 'menu',\n  menuitem: 'menuitem',\n  meta: 'meta',\n  meter: 'meter',\n  nav: 'nav',\n  noscript: 'noscript',\n  object: 'object',\n  ol: 'ol',\n  optgroup: 'optgroup',\n  option: 'option',\n  output: 'output',\n  p: 'p',\n  param: 'param',\n  picture: 'picture',\n  pre: 'pre',\n  progress: 'progress',\n  q: 'q',\n  rp: 'rp',\n  rt: 'rt',\n  ruby: 'ruby',\n  s: 's',\n  samp: 'samp',\n  script: 'script',\n  section: 'section',\n  select: 'select',\n  small: 'small',\n  source: 'source',\n  span: 'span',\n  strong: 'strong',\n  style: 'style',\n  sub: 'sub',\n  summary: 'summary',\n  sup: 'sup',\n  table: 'table',\n  tbody: 'tbody',\n  td: 'td',\n  textarea: 'textarea',\n  tfoot: 'tfoot',\n  th: 'th',\n  thead: 'thead',\n  time: 'time',\n  title: 'title',\n  tr: 'tr',\n  track: 'track',\n  u: 'u',\n  ul: 'ul',\n  'var': 'var',\n  video: 'video',\n  wbr: 'wbr',\n\n  // SVG\n  circle: 'circle',\n  defs: 'defs',\n  ellipse: 'ellipse',\n  g: 'g',\n  line: 'line',\n  linearGradient: 'linearGradient',\n  mask: 'mask',\n  path: 'path',\n  pattern: 'pattern',\n  polygon: 'polygon',\n  polyline: 'polyline',\n  radialGradient: 'radialGradient',\n  rect: 'rect',\n  stop: 'stop',\n  svg: 'svg',\n  text: 'text',\n  tspan: 'tspan'\n\n}, createDOMFactory);\n\nmodule.exports = ReactDOM;\n\nrequire(\"./mock-modules\").register(\"ReactDOM\", module);\n",
"EnterLeaveEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\nvar ReactMount = require(\"./ReactMount\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({onMouseEnter: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  },\n  mouseLeave: {\n    registrationName: keyOf({onMouseLeave: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType === topLevelTypes.topMouseOver &&\n        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut &&\n        topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from, to;\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      to =\n        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||\n        win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromID = from ? ReactMount.getID(from) : '';\n    var toID = to ? ReactMount.getID(to) : '';\n\n    var leave = SyntheticMouseEvent.getPooled(\n      eventTypes.mouseLeave,\n      fromID,\n      nativeEvent\n    );\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(\n      eventTypes.mouseEnter,\n      toID,\n      nativeEvent\n    );\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n\nrequire(\"./mock-modules\").register(\"EnterLeaveEventPlugin\", module);\n",
"EventConstants":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventConstants\n */\n\n\"use strict\";\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar PropagationPhases = keyMirror({bubbled: null, captured: null});\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes = keyMirror({\n  topBlur: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topReset: null,\n  topScroll: null,\n  topSelectionChange: null,\n  topSubmit: null,\n  topTextInput: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topWheel: null\n});\n\nvar EventConstants = {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports = EventConstants;\n\nrequire(\"./mock-modules\").register(\"EventConstants\", module);\n",
"AnalyticsEventPluginFactory":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AnalyticsEventPluginFactory\n *\n * This module provides a factory method to create the AnalyticsEventPlugin that\n * can be used to track the usage of React components that are of interest to\n * the user.\n *\n * In order to enable a component for analytics tracking, you need to specify\n * two additional attributes to the component when you describe the structure of\n * your component in the render() method:\n *\n * 1. 'data-analytics-id': This represents a unique ID that the analytics module\n *     will use to identify this component in all the analytics data. Note that\n *     this is independent of the ref or the DOM id of the element. Over the\n *     lifetime of the product, even if the component id or ref needs to be\n *     changed, as long as you can ensure the analytics ID doesnt change, the\n *     historical data can be correlated. Also note that React does NOT do\n *     anything to guarantee or enforce uniqueness of this ID. If its not unique\n *     the analytics data reported will be incorrect.\n *\n * 2. 'data-analytics-events': This is a comma separated list of DOM events that\n *     you want analytics on. React currently supports tracking only on a\n *     distinct set of events (See topLevelTypesToAnalyticsEvent).\n *     If the list contains an event that React does not recognize for analytics\n *     tracking, in __DEV__, an error will be thrown. Note that it is case\n *     sensitive and space sensitive.\n *\n * By default the AnalyticsEventPlugin is NOT enabled in React. To use it, you\n * need to create the plugin using the factory method and add it to the list of\n * Plugins maintained in the EventPluginHub before your component is rendered.\n * As creation parameters you can specify two arguments:\n *\n * 1. callback: This is a required parameter. In __DEV__, an error will be\n *    thrown if this param is missing. The callback will be called with the\n *    analyticsData as an argument. The analyticsData will contain one property\n *    per every React component, identified by its data-analytics-id. The value\n *    of this property will be an object containing properties corresponding to\n *    each of the comma separated events specified in data-analytics-events.\n *\n *    For example, if you have:\n *    <Button ...\n *      data-analytics-id=\"createButton\"\n *      data-analytics-events=\"click\"\n *    />\n *    and\n *    <TextBox ...\n *      data-analytics-id=\"disclaimerBox\"\n *      data-analytics-events=\"focus,scroll\"\n *    />\n *    analyticsData will be something like:\n *    '{\"createButton\":{\"click\":50}, \"disclaimerBox\":{\"focus\":15, \"scroll\":5}}'\n *\n *    DO NOT mutate the data that you get in the callback. Mutating it will lead\n *    to errors and unstable behavior.\n *\n *    The React component will be included for analytics as long as some user\n *    interaction has happened with that component. If no user interaction has\n *    happened with any of the components tracked for analytics, the callback\n *    will not be called.\n *\n * 2. interval (in milliseconds): This is an optional parameter to specify the\n *    interval at which the callback needs to be called. It needs to be greater\n *    than the 2 minutes (which is the default value if this parameter is not\n *    specified or a value less than 2 minutes is specified)\n *\n * Please refer to the unit tests AnalyticsEventPlugin-test.js for details on\n * usage.\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar emptyFunction = require(\"./emptyFunction\");\nvar invariant = require(\"./invariant\");\nvar topLevelTypes = require(\"./EventConstants\").topLevelTypes;\n\nvar ANALYTICS_ID = 'data-analytics-id';\nvar ANALYTICS_EVENTS = 'data-analytics-events';\nvar DEFAULT_INTERVAL_MS = 2 * 60 * 1000; // 2 minutes\n\nvar analyticsData = {};\n\n// List of topLevel event types that React supports for analytics tracking\nvar topLevelTypesToAnalyticsEvent = {\n  topClick:       'click',\n  topDoubleClick: 'doubleClick',\n  wheel:          'wheel',\n  topTouchStart:  'touchStart',\n  topTouchEnd:    'touchEnd',\n  topTouchMove:   'touchMove',\n  topTouchCancel: 'touchCancel',\n  topKeyUp:       'keyUp',\n  topKeyPress:    'keyPress',\n  topKeyDown:     'keyDown',\n  topFocus:       'focus',\n  topBlur:        'blur',\n  topScroll:      'scroll',\n  topChange:      'change'\n};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var analyticsEventNameToTopLevelType = {\n    'click':        topLevelTypes.topClick,\n    'doubleClick':  topLevelTypes.topDoubleClick,\n    'wheel':        topLevelTypes.wheel,\n    'touchStart':   topLevelTypes.topTouchStart,\n    'touchEnd':     topLevelTypes.topTouchEnd,\n    'touchMove':    topLevelTypes.topTouchMove,\n    'touchCancel':  topLevelTypes.topTouchCancel,\n    'keyUp':        topLevelTypes.topKeyUp,\n    'keyPress':     topLevelTypes.topKeyPress,\n    'keyDown':      topLevelTypes.topKeyDown,\n    'focus':        topLevelTypes.topFocus,\n    'blur':         topLevelTypes.topBlur,\n    'scroll':       topLevelTypes.topScroll,\n    'change':       topLevelTypes.topChange\n  };\n}\n\n/**\n * This plugin does not really extract any synthetic events. Rather it just\n * looks at the top-level event and bumps up counters as appropriate\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {*} An accumulation of synthetic events.\n * @see {EventPluginHub.extractEvents}\n */\nfunction extractEvents(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID,\n    nativeEvent) {\n  var currentEvent = topLevelTypesToAnalyticsEvent[topLevelType];\n  if (!currentEvent || !topLevelTarget || !topLevelTarget.attributes) {\n    return null;\n  }\n\n  var analyticsID = topLevelTarget.getAttribute(ANALYTICS_ID);\n  var analyticsEventsStr = topLevelTarget.getAttribute(ANALYTICS_EVENTS);\n  if (!analyticsID || !analyticsEventsStr) {\n    return null;\n  }\n\n  var analyticsEventsArr = analyticsEventsStr.split(\",\");\n  if (!analyticsData.hasOwnProperty(analyticsID)) {\n    initAnalyticsDataForID(analyticsID, analyticsEventsArr);\n  }\n\n  if (analyticsEventsArr.indexOf(currentEvent) !== -1) {\n    analyticsData[analyticsID][currentEvent]++;\n  }\n\n  return null;\n}\n\n/**\n * Initialize the analytics data for a specific element identified by the\n * analyticsID - Create an entry in the analyticsData object for the element and\n * initialize all counters for that element to 0.\n */\nfunction initAnalyticsDataForID(analyticsID, analyticsEventsArr) {\n  analyticsData[analyticsID] = {};\n  analyticsEventsArr.forEach(function(analyticsEvent) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        analyticsEventNameToTopLevelType[analyticsEvent],\n        'Invalid analyticsEvent:%s for analyticsID:%s',\n        analyticsEvent,\n        analyticsID\n      ) : invariant(analyticsEventNameToTopLevelType[analyticsEvent]));\n    }\n    analyticsData[analyticsID][analyticsEvent] = 0;\n  });\n}\n\n/**\n * Returns the analytics event plugin given the callback that needs to be\n * invoked for reporting analytics and the interval at which the callback needs\n * to be invoked. This interval has to be atleast DEFAULT_INTERVAL_MS.\n */\nvar createAnalyticsPlugin = function(cb, interval) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ExecutionEnvironment.canUseDOM,\n    'createAnalyticsPlugin(...): The DOM is not supported in the execution ' +\n    'environment.'\n  ) : invariant(ExecutionEnvironment.canUseDOM));\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(cb, 'createAnalyticsPlugin(...): You must provide a callback.') : invariant(cb));\n  }\n  cb = cb || emptyFunction;\n\n  setInterval(\n    function() {\n      if (Object.keys(analyticsData).length) {\n        // Invoke the callback with a clone of analyticsData, otherwise our\n        // analyticsData will be dirtied by user changes\n        cb(analyticsData);\n      }\n    },\n    interval > DEFAULT_INTERVAL_MS ? interval : DEFAULT_INTERVAL_MS\n  );\n\n  return {extractEvents: extractEvents};\n};\n\nvar AnalyticsEventPluginFactory = {\n  createAnalyticsPlugin: createAnalyticsPlugin\n};\n\nmodule.exports = AnalyticsEventPluginFactory;\n\nrequire(\"./mock-modules\").register(\"AnalyticsEventPluginFactory\", module);\n",
"EventPluginRegistry":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n      'the plugin ordering, `%s`.',\n      pluginName\n    ) : invariant(pluginIndex > -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      PluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n      'method, but `%s` does not.',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'event name, `%s`.',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'registration name, `%s`.',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] =\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !EventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n      'once. You are likely trying to load more than one copy of React.'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== PluginModule) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n\nrequire(\"./mock-modules\").register(\"EventPluginRegistry\", module);\n",
"DefaultEventPluginOrder":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n\"use strict\";\n\n var keyOf = require(\"./keyOf\");\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder = [\n  keyOf({ResponderEventPlugin: null}),\n  keyOf({SimpleEventPlugin: null}),\n  keyOf({TapEventPlugin: null}),\n  keyOf({EnterLeaveEventPlugin: null}),\n  keyOf({ChangeEventPlugin: null}),\n  keyOf({SelectEventPlugin: null}),\n  keyOf({CompositionEventPlugin: null}),\n  keyOf({BeforeInputEventPlugin: null}),\n  keyOf({AnalyticsEventPlugin: null}),\n  keyOf({MobileSafariClickEventPlugin: null})\n];\n\nmodule.exports = DefaultEventPluginOrder;\n\nrequire(\"./mock-modules\").register(\"DefaultEventPluginOrder\", module);\n",
"ChangeEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onChange: null}),\n      captured: keyOf({onChangeCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topChange,\n      topLevelTypes.topClick,\n      topLevelTypes.topFocus,\n      topLevelTypes.topInput,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  return (\n    elem.nodeName === 'SELECT' ||\n    (elem.nodeName === 'INPUT' && elem.type === 'file')\n  );\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (\n    !('documentMode' in document) || document.documentMode > 8\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(\n    eventTypes.change,\n    activeElementID,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (\n    !('documentMode' in document) || document.documentMode > 9\n  );\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp =  {\n  get: function() {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function(val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(\n    target.constructor.prototype,\n    'value'\n  );\n\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange ||\n      topLevelType === topLevelTypes.topKeyUp ||\n      topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return (\n    elem.nodeName === 'INPUT' &&\n    (elem.type === 'checkbox' || elem.type === 'radio')\n  );\n}\n\nfunction getTargetIDForClickEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(\n          eventTypes.change,\n          targetID,\n          nativeEvent\n        );\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n\nrequire(\"./mock-modules\").register(\"ChangeEventPlugin\", module);\n",
"ReactInstanceHandles":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactRootIndex = require(\"./ReactRootIndex\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 100;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || (\n    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR\n  );\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return (\n    descendantID.indexOf(ancestorID) === 0 &&\n    isBoundary(descendantID, ancestorID.length)\n  );\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(ancestorID) && isValidID(destinationID),\n    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',\n    ancestorID,\n    destinationID\n  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isAncestorIDOf(ancestorID, destinationID),\n    'getNextDescendantID(...): React has made an invalid assumption about ' +\n    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',\n    ancestorID,\n    destinationID\n  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  for (var i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(longestCommonID),\n    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',\n    oneID,\n    twoID,\n    longestCommonID\n  ) : invariant(isValidID(longestCommonID)));\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    start !== stop,\n    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',\n    start\n  ) : invariant(start !== stop));\n  var traverseUp = isAncestorIDOf(stop, start);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    traverseUp || isAncestorIDOf(start, stop),\n    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +\n    'not have a parent path.',\n    start,\n    stop\n  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start; /* until break */; id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      depth++ < MAX_TREE_DEPTH,\n      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +\n      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',\n      start, stop\n    ) : invariant(depth++ < MAX_TREE_DEPTH));\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function() {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function(rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function(id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function(targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function(targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;\n\nrequire(\"./mock-modules\").register(\"ReactInstanceHandles\", module);\n",
"SimpleEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticClipboardEvent = require(\"./SyntheticClipboardEvent\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\nvar SyntheticFocusEvent = require(\"./SyntheticFocusEvent\");\nvar SyntheticKeyboardEvent = require(\"./SyntheticKeyboardEvent\");\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\nvar SyntheticDragEvent = require(\"./SyntheticDragEvent\");\nvar SyntheticTouchEvent = require(\"./SyntheticTouchEvent\");\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\nvar SyntheticWheelEvent = require(\"./SyntheticWheelEvent\");\n\nvar getEventCharCode = require(\"./getEventCharCode\");\n\nvar invariant = require(\"./invariant\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBlur: true}),\n      captured: keyOf({onBlurCapture: true})\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onClick: true}),\n      captured: keyOf({onClickCapture: true})\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onContextMenu: true}),\n      captured: keyOf({onContextMenuCapture: true})\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCopy: true}),\n      captured: keyOf({onCopyCapture: true})\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCut: true}),\n      captured: keyOf({onCutCapture: true})\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDoubleClick: true}),\n      captured: keyOf({onDoubleClickCapture: true})\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrag: true}),\n      captured: keyOf({onDragCapture: true})\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnd: true}),\n      captured: keyOf({onDragEndCapture: true})\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnter: true}),\n      captured: keyOf({onDragEnterCapture: true})\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragExit: true}),\n      captured: keyOf({onDragExitCapture: true})\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragLeave: true}),\n      captured: keyOf({onDragLeaveCapture: true})\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragOver: true}),\n      captured: keyOf({onDragOverCapture: true})\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragStart: true}),\n      captured: keyOf({onDragStartCapture: true})\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrop: true}),\n      captured: keyOf({onDropCapture: true})\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onFocus: true}),\n      captured: keyOf({onFocusCapture: true})\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onInput: true}),\n      captured: keyOf({onInputCapture: true})\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyDown: true}),\n      captured: keyOf({onKeyDownCapture: true})\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyPress: true}),\n      captured: keyOf({onKeyPressCapture: true})\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyUp: true}),\n      captured: keyOf({onKeyUpCapture: true})\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onLoad: true}),\n      captured: keyOf({onLoadCapture: true})\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onError: true}),\n      captured: keyOf({onErrorCapture: true})\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseDown: true}),\n      captured: keyOf({onMouseDownCapture: true})\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseMove: true}),\n      captured: keyOf({onMouseMoveCapture: true})\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOut: true}),\n      captured: keyOf({onMouseOutCapture: true})\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOver: true}),\n      captured: keyOf({onMouseOverCapture: true})\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseUp: true}),\n      captured: keyOf({onMouseUpCapture: true})\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onPaste: true}),\n      captured: keyOf({onPasteCapture: true})\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onReset: true}),\n      captured: keyOf({onResetCapture: true})\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onScroll: true}),\n      captured: keyOf({onScrollCapture: true})\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSubmit: true}),\n      captured: keyOf({onSubmitCapture: true})\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchCancel: true}),\n      captured: keyOf({onTouchCancelCapture: true})\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchEnd: true}),\n      captured: keyOf({onTouchEndCapture: true})\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchMove: true}),\n      captured: keyOf({onTouchMoveCapture: true})\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchStart: true}),\n      captured: keyOf({onTouchStartCapture: true})\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onWheel: true}),\n      captured: keyOf({onWheelCapture: true})\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig = {\n  topBlur:        eventTypes.blur,\n  topClick:       eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy:        eventTypes.copy,\n  topCut:         eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag:        eventTypes.drag,\n  topDragEnd:     eventTypes.dragEnd,\n  topDragEnter:   eventTypes.dragEnter,\n  topDragExit:    eventTypes.dragExit,\n  topDragLeave:   eventTypes.dragLeave,\n  topDragOver:    eventTypes.dragOver,\n  topDragStart:   eventTypes.dragStart,\n  topDrop:        eventTypes.drop,\n  topError:       eventTypes.error,\n  topFocus:       eventTypes.focus,\n  topInput:       eventTypes.input,\n  topKeyDown:     eventTypes.keyDown,\n  topKeyPress:    eventTypes.keyPress,\n  topKeyUp:       eventTypes.keyUp,\n  topLoad:        eventTypes.load,\n  topMouseDown:   eventTypes.mouseDown,\n  topMouseMove:   eventTypes.mouseMove,\n  topMouseOut:    eventTypes.mouseOut,\n  topMouseOver:   eventTypes.mouseOver,\n  topMouseUp:     eventTypes.mouseUp,\n  topPaste:       eventTypes.paste,\n  topReset:       eventTypes.reset,\n  topScroll:      eventTypes.scroll,\n  topSubmit:      eventTypes.submit,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd:    eventTypes.touchEnd,\n  topTouchMove:   eventTypes.touchMove,\n  topTouchStart:  eventTypes.touchStart,\n  topWheel:       eventTypes.wheel\n};\n\nfor (var topLevelType in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];\n}\n\nvar SimpleEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * Same as the default implementation, except cancels the event when return\n   * value is false. This behavior will be disabled in a future release.\n   *\n   * @param {object} Event to be dispatched.\n   * @param {function} Application-level callback.\n   * @param {string} domID DOM ID to pass to the callback.\n   */\n  executeDispatch: function(event, listener, domID) {\n    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);\n\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      typeof returnValue !== 'boolean',\n      'Returning `false` from an event handler is deprecated and will be ' +\n      'ignored in a future release. Instead, manually call ' +\n      'e.stopPropagation() or e.preventDefault(), as appropriate.'\n    ) : null);\n\n    if (returnValue === false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  },\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topError:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSubmit:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      EventConstructor,\n      'SimpleEventPlugin: Unhandled event type, `%s`.',\n      topLevelType\n    ) : invariant(EventConstructor));\n    var event = EventConstructor.getPooled(\n      dispatchConfig,\n      topLevelTargetID,\n      nativeEvent\n    );\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n\n};\n\nmodule.exports = SimpleEventPlugin;\n\nrequire(\"./mock-modules\").register(\"SimpleEventPlugin\", module);\n",
"EventPropagators":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners =\n      accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(\n      event.dispatchMarker,\n      accumulateDirectionalDispatches,\n      event\n    );\n  }\n}\n\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners =\n        accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(\n    fromID,\n    toID,\n    accumulateDispatches,\n    leave,\n    enter\n  );\n}\n\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;\n\nrequire(\"./mock-modules\").register(\"EventPropagators\", module);\n",
"ResponderEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ResponderEventPlugin\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar keyOf = require(\"./keyOf\");\n\nvar isStartish = EventPluginUtils.isStartish;\nvar isMoveish = EventPluginUtils.isMoveish;\nvar isEndish = EventPluginUtils.isEndish;\nvar executeDirectDispatch = EventPluginUtils.executeDirectDispatch;\nvar hasDispatches = EventPluginUtils.hasDispatches;\nvar executeDispatchesInOrderStopAtTrue =\n  EventPluginUtils.executeDispatchesInOrderStopAtTrue;\n\n/**\n * ID of element that should respond to touch/move types of interactions, as\n * indicated explicitly by relevant callbacks.\n */\nvar responderID = null;\nvar isPressing = false;\n\nvar eventTypes = {\n  /**\n   * On a `touchStart`/`mouseDown`, is it desired that this element become the\n   * responder?\n   */\n  startShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onStartShouldSetResponder: null}),\n      captured: keyOf({onStartShouldSetResponderCapture: null})\n    }\n  },\n\n  /**\n   * On a `scroll`, is it desired that this element become the responder? This\n   * is usually not needed, but should be used to retroactively infer that a\n   * `touchStart` had occured during momentum scroll. During a momentum scroll,\n   * a touch start will be immediately followed by a scroll event if the view is\n   * currently scrolling.\n   */\n  scrollShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onScrollShouldSetResponder: null}),\n      captured: keyOf({onScrollShouldSetResponderCapture: null})\n    }\n  },\n\n  /**\n   * On a `touchMove`/`mouseMove`, is it desired that this element become the\n   * responder?\n   */\n  moveShouldSetResponder: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMoveShouldSetResponder: null}),\n      captured: keyOf({onMoveShouldSetResponderCapture: null})\n    }\n  },\n\n  /**\n   * Direct responder events dispatched directly to responder. Do not bubble.\n   */\n  responderMove: {registrationName: keyOf({onResponderMove: null})},\n  responderRelease: {registrationName: keyOf({onResponderRelease: null})},\n  responderTerminationRequest: {\n    registrationName: keyOf({onResponderTerminationRequest: null})\n  },\n  responderGrant: {registrationName: keyOf({onResponderGrant: null})},\n  responderReject: {registrationName: keyOf({onResponderReject: null})},\n  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})}\n};\n\n/**\n * Performs negotiation between any existing/current responder, checks to see if\n * any new entity is interested in becoming responder, performs that handshake\n * and returns any events that must be emitted to notify the relevant parties.\n *\n * A note about event ordering in the `EventPluginHub`.\n *\n * Suppose plugins are injected in the following order:\n *\n * `[R, S, C]`\n *\n * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for\n * `onClick` etc) and `R` is `ResponderEventPlugin`.\n *\n * \"Deferred-Dispatched Events\":\n *\n * - The current event plugin system will traverse the list of injected plugins,\n *   in order, and extract events by collecting the plugin's return value of\n *   `extractEvents()`.\n * - These events that are returned from `extractEvents` are \"deferred\n *   dispatched events\".\n * - When returned from `extractEvents`, deferred-dispatched events contain an\n *   \"accumulation\" of deferred dispatches.\n * - These deferred dispatches are accumulated/collected before they are\n *   returned, but processed at a later time by the `EventPluginHub` (hence the\n *   name deferred).\n *\n * In the process of returning their deferred-dispatched events, event plugins\n * themselves can dispatch events on-demand without returning them from\n * `extractEvents`. Plugins might want to do this, so that they can use event\n * dispatching as a tool that helps them decide which events should be extracted\n * in the first place.\n *\n * \"On-Demand-Dispatched Events\":\n *\n * - On-demand-dispatched events are not returned from `extractEvents`.\n * - On-demand-dispatched events are dispatched during the process of returning\n *   the deferred-dispatched events.\n * - They should not have side effects.\n * - They should be avoided, and/or eventually be replaced with another\n *   abstraction that allows event plugins to perform multiple \"rounds\" of event\n *   extraction.\n *\n * Therefore, the sequence of event dispatches becomes:\n *\n * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)\n * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)\n * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)\n * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)\n * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)\n * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)\n *\n * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`\n * on-demand dispatch returns `true` (and some other details are satisfied) the\n * `onResponderGrant` deferred dispatched event is returned from\n * `extractEvents`. The sequence of dispatch executions in this case\n * will appear as follows:\n *\n * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)\n * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)\n * - `touchStart`              (`EventPluginHub` dispatches as usual)\n * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {string} topLevelTargetID ID of deepest React rendered element.\n * @param {object} nativeEvent Native browser event.\n * @return {*} An accumulation of synthetic events.\n */\nfunction setResponderAndExtractTransfer(\n    topLevelType,\n    topLevelTargetID,\n    nativeEvent) {\n  var shouldSetEventType =\n    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :\n    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :\n    eventTypes.scrollShouldSetResponder;\n\n  var bubbleShouldSetFrom = responderID || topLevelTargetID;\n  var shouldSetEvent = SyntheticEvent.getPooled(\n    shouldSetEventType,\n    bubbleShouldSetFrom,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);\n  var wantsResponderID = executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n  if (!shouldSetEvent.isPersistent()) {\n    shouldSetEvent.constructor.release(shouldSetEvent);\n  }\n\n  if (!wantsResponderID || wantsResponderID === responderID) {\n    return null;\n  }\n  var extracted;\n  var grantEvent = SyntheticEvent.getPooled(\n    eventTypes.responderGrant,\n    wantsResponderID,\n    nativeEvent\n  );\n\n  EventPropagators.accumulateDirectDispatches(grantEvent);\n  if (responderID) {\n    var terminationRequestEvent = SyntheticEvent.getPooled(\n      eventTypes.responderTerminationRequest,\n      responderID,\n      nativeEvent\n    );\n    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);\n    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||\n      executeDirectDispatch(terminationRequestEvent);\n    if (!terminationRequestEvent.isPersistent()) {\n      terminationRequestEvent.constructor.release(terminationRequestEvent);\n    }\n\n    if (shouldSwitch) {\n      var terminateType = eventTypes.responderTerminate;\n      var terminateEvent = SyntheticEvent.getPooled(\n        terminateType,\n        responderID,\n        nativeEvent\n      );\n      EventPropagators.accumulateDirectDispatches(terminateEvent);\n      extracted = accumulateInto(extracted, [grantEvent, terminateEvent]);\n      responderID = wantsResponderID;\n    } else {\n      var rejectEvent = SyntheticEvent.getPooled(\n        eventTypes.responderReject,\n        wantsResponderID,\n        nativeEvent\n      );\n      EventPropagators.accumulateDirectDispatches(rejectEvent);\n      extracted = accumulateInto(extracted, rejectEvent);\n    }\n  } else {\n    extracted = accumulateInto(extracted, grantEvent);\n    responderID = wantsResponderID;\n  }\n  return extracted;\n}\n\n/**\n * A transfer is a negotiation between a currently set responder and the next\n * element to claim responder status. Any start event could trigger a transfer\n * of responderID. Any move event could trigger a transfer, so long as there is\n * currently a responder set (in other words as long as the user is pressing\n * down).\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @return {boolean} True if a transfer of responder could possibly occur.\n */\nfunction canTriggerTransfer(topLevelType) {\n  return topLevelType === EventConstants.topLevelTypes.topScroll ||\n         isStartish(topLevelType) ||\n         (isPressing && isMoveish(topLevelType));\n}\n\n/**\n * Event plugin for formalizing the negotiation between claiming locks on\n * receiving touches.\n */\nvar ResponderEventPlugin = {\n\n  getResponderID: function() {\n    return responderID;\n  },\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var extracted;\n    // Must have missed an end event - reset the state here.\n    if (responderID && isStartish(topLevelType)) {\n      responderID = null;\n    }\n    if (isStartish(topLevelType)) {\n      isPressing = true;\n    } else if (isEndish(topLevelType)) {\n      isPressing = false;\n    }\n    if (canTriggerTransfer(topLevelType)) {\n      var transfer = setResponderAndExtractTransfer(\n        topLevelType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (transfer) {\n        extracted = accumulateInto(extracted, transfer);\n      }\n    }\n    // Now that we know the responder is set correctly, we can dispatch\n    // responder type events (directly to the responder).\n    var type = isMoveish(topLevelType) ? eventTypes.responderMove :\n      isEndish(topLevelType) ? eventTypes.responderRelease :\n      isStartish(topLevelType) ? eventTypes.responderStart : null;\n    if (type) {\n      var gesture = SyntheticEvent.getPooled(\n        type,\n        responderID || '',\n        nativeEvent\n      );\n      EventPropagators.accumulateDirectDispatches(gesture);\n      extracted = accumulateInto(extracted, gesture);\n    }\n    if (type === eventTypes.responderRelease) {\n      responderID = null;\n    }\n    return extracted;\n  }\n\n};\n\nmodule.exports = ResponderEventPlugin;\n\nrequire(\"./mock-modules\").register(\"ResponderEventPlugin\", module);\n",
"SyntheticEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getEventTarget = require(\"./getEventTarget\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: getEventTarget,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n */\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  this.dispatchConfig = dispatchConfig;\n  this.dispatchMarker = dispatchMarker;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      this[propName] = nativeEvent[propName];\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ?\n    nativeEvent.defaultPrevented :\n    nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;\n}\n\nassign(SyntheticEvent.prototype, {\n\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    event.preventDefault ? event.preventDefault() : event.returnValue = false;\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    var event = this.nativeEvent;\n    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function() {\n    this.isPersistent = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function() {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      this[propName] = null;\n    }\n    this.dispatchConfig = null;\n    this.dispatchMarker = null;\n    this.nativeEvent = null;\n  }\n\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function(Class, Interface) {\n  var Super = this;\n\n  var prototype = Object.create(Super.prototype);\n  assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);\n\nmodule.exports = SyntheticEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticEvent\", module);\n",
"ReactMarkupChecksum":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n\"use strict\";\n\nvar adler32 = require(\"./adler32\");\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function(markup) {\n    var checksum = adler32(markup);\n    return markup.replace(\n      '>',\n      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\">'\n    );\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function(markup, element) {\n    var existingChecksum = element.getAttribute(\n      ReactMarkupChecksum.CHECKSUM_ATTR_NAME\n    );\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;\n\nrequire(\"./mock-modules\").register(\"ReactMarkupChecksum\", module);\n",
"ReactReconcileTransaction":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function() {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`\n   *   restores the previous value.\n   */\n  close: function(previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  }\n};\n\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: function() {\n    this.putListenerQueue.putListeners();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  PUT_LISTENER_QUEUEING,\n  SELECTION_RESTORATION,\n  EVENT_SUPPRESSION,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\n\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n\nrequire(\"./mock-modules\").register(\"ReactReconcileTransaction\", module);\n",
"ExecutionEnvironment":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners:\n    canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n\nrequire(\"./mock-modules\").register(\"ExecutionEnvironment\", module);\n",
"ReactServerRendering":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactServerRenderingTransaction =\n  require(\"./ReactServerRenderingTransaction\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(element),\n    'renderToString(): You must pass a valid ReactElement.'\n  ) : invariant(ReactElement.isValidElement(element)));\n\n  var transaction;\n  try {\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function() {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, 0);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(element),\n    'renderToStaticMarkup(): You must pass a valid ReactElement.'\n  ) : invariant(ReactElement.isValidElement(element)));\n\n  var transaction;\n  try {\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function() {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, 0);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};\n\nrequire(\"./mock-modules\").register(\"ReactServerRendering\", module);\n",
"DOMProperty":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.isStandardName.hasOwnProperty(propName),\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +\n        '\\'%s\\' which has already been injected. You may be accidentally ' +\n        'injecting the same DOM property config twice, or you may be ' +\n        'injecting two configs that have conflicting property names.',\n        propName\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));\n\n      DOMProperty.isStandardName[propName] = true;\n\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] =\n        DOMPropertyNames.hasOwnProperty(propName) ?\n          DOMPropertyNames[propName] :\n          propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        'DOMProperty: Cannot require using both attribute and property: %s',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        'DOMProperty: Properties that have side effects must use property: %s',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !!DOMProperty.hasBooleanValue[propName] +\n          !!DOMProperty.hasNumericValue[propName] +\n          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,\n        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +\n        'numeric value, but not a combination: %s',\n        propName\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +\n        !!DOMProperty.hasNumericValue[propName] +\n        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n\nrequire(\"./mock-modules\").register(\"DOMProperty\", module);\n",
"SyntheticWheelEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function(event) {\n    return (\n      'deltaX' in event ? event.deltaX :\n      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n      'wheelDeltaX' in event ? -event.wheelDeltaX : 0\n    );\n  },\n  deltaY: function(event) {\n    return (\n      'deltaY' in event ? event.deltaY :\n      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n      'wheelDeltaY' in event ? -event.wheelDeltaY :\n      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n      'wheelDelta' in event ? -event.wheelDelta : 0\n    );\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticWheelEvent\", module);\n",
"Object.assign":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Object.assign\n */\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\nfunction assign(target, sources) {\n  if (target == null) {\n    throw new TypeError('Object.assign target cannot be null or undefined');\n  }\n\n  var to = Object(target);\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n    var nextSource = arguments[nextIndex];\n    if (nextSource == null) {\n      continue;\n    }\n\n    var from = Object(nextSource);\n\n    // We don't currently support accessors nor proxies. Therefore this\n    // copy cannot throw. If we ever supported this then we must handle\n    // exceptions and side-effects. We don't support symbols so they won't\n    // be transferred.\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n};\n\nmodule.exports = assign;\n\nrequire(\"./mock-modules\").register(\"Object.assign\", module);\n",
"ReactDefaultInjection":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultInjection\n */\n\n\"use strict\";\n\nvar BeforeInputEventPlugin = require(\"./BeforeInputEventPlugin\");\nvar ChangeEventPlugin = require(\"./ChangeEventPlugin\");\nvar ClientReactRootIndex = require(\"./ClientReactRootIndex\");\nvar CompositionEventPlugin = require(\"./CompositionEventPlugin\");\nvar DefaultEventPluginOrder = require(\"./DefaultEventPluginOrder\");\nvar EnterLeaveEventPlugin = require(\"./EnterLeaveEventPlugin\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar HTMLDOMPropertyConfig = require(\"./HTMLDOMPropertyConfig\");\nvar MobileSafariClickEventPlugin = require(\"./MobileSafariClickEventPlugin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDefaultBatchingStrategy = require(\"./ReactDefaultBatchingStrategy\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\nvar ReactDOMButton = require(\"./ReactDOMButton\");\nvar ReactDOMForm = require(\"./ReactDOMForm\");\nvar ReactDOMImg = require(\"./ReactDOMImg\");\nvar ReactDOMInput = require(\"./ReactDOMInput\");\nvar ReactDOMOption = require(\"./ReactDOMOption\");\nvar ReactDOMSelect = require(\"./ReactDOMSelect\");\nvar ReactDOMTextarea = require(\"./ReactDOMTextarea\");\nvar ReactEventListener = require(\"./ReactEventListener\");\nvar ReactInjection = require(\"./ReactInjection\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar SelectEventPlugin = require(\"./SelectEventPlugin\");\nvar ServerReactRootIndex = require(\"./ServerReactRootIndex\");\nvar SimpleEventPlugin = require(\"./SimpleEventPlugin\");\nvar SVGDOMPropertyConfig = require(\"./SVGDOMPropertyConfig\");\n\nvar createFullPageComponent = require(\"./createFullPageComponent\");\n\nfunction inject() {\n  ReactInjection.EventEmitter.injectReactEventListener(\n    ReactEventListener\n  );\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);\n  ReactInjection.EventPluginHub.injectMount(ReactMount);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    CompositionEventPlugin: CompositionEventPlugin,\n    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.NativeComponent.injectGenericComponentClass(\n    ReactDOMComponent\n  );\n\n  ReactInjection.NativeComponent.injectComponentClasses({\n    'button': ReactDOMButton,\n    'form': ReactDOMForm,\n    'img': ReactDOMImg,\n    'input': ReactDOMInput,\n    'option': ReactDOMOption,\n    'select': ReactDOMSelect,\n    'textarea': ReactDOMTextarea,\n\n    'html': createFullPageComponent('html'),\n    'head': createFullPageComponent('head'),\n    'body': createFullPageComponent('body')\n  });\n\n  // This needs to happen after createFullPageComponent() otherwise the mixin\n  // gets double injected.\n  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');\n\n  ReactInjection.Updates.injectReconcileTransaction(\n    ReactComponentBrowserEnvironment.ReactReconcileTransaction\n  );\n  ReactInjection.Updates.injectBatchingStrategy(\n    ReactDefaultBatchingStrategy\n  );\n\n  ReactInjection.RootIndex.injectCreateReactRootIndex(\n    ExecutionEnvironment.canUseDOM ?\n      ClientReactRootIndex.createReactRootIndex :\n      ServerReactRootIndex.createReactRootIndex\n  );\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';\n    if ((/[?&]react_perf\\b/).test(url)) {\n      var ReactDefaultPerf = require(\"./ReactDefaultPerf\");\n      ReactDefaultPerf.start();\n    }\n  }\n}\n\nmodule.exports = {\n  inject: inject\n};\n\nrequire(\"./mock-modules\").register(\"ReactDefaultInjection\", module);\n",
"ReactDOMComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMProperty = require(\"./DOMProperty\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactMultiChild = require(\"./ReactMultiChild\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\nvar invariant = require(\"./invariant\");\nvar isEventSupported = require(\"./isEventSupported\");\nvar keyOf = require(\"./keyOf\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;\nvar listenTo = ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES = {'string': true, 'number': true};\n\nvar STYLE = keyOf({style: null});\n\nvar ELEMENT_NODE_TYPE = 1;\n\n/**\n * @param {?object} props\n */\nfunction assertValidProps(props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    props.children == null || props.dangerouslySetInnerHTML == null,\n    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'\n  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (props.contentEditable && props.children != null) {\n      console.warn(\n        'A component is `contentEditable` and contains `children` managed by ' +\n        'React. It is now your responsibility to guarantee that none of those '+\n        'nodes are unexpectedly modified or duplicated. This is probably not ' +\n        'intentional.'\n      );\n    }\n  }\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    props.style == null || typeof props.style === 'object',\n    'The `style` prop expects a mapping from style properties to values, ' +\n    'not a string.'\n  ) : invariant(props.style == null || typeof props.style === 'object'));\n}\n\nfunction putListener(id, registrationName, listener, transaction) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    // IE8 has no API for event capturing and the `onScroll` event doesn't\n    // bubble.\n    if (registrationName === 'onScroll' &&\n        !isEventSupported('scroll', true)) {\n      monitorCodeUse('react_no_scroll_event');\n      console.warn('This browser doesn\\'t support the `onScroll` event');\n    }\n  }\n  var container = ReactMount.findReactContainerForID(id);\n  if (container) {\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ?\n      container.ownerDocument :\n      container;\n    listenTo(registrationName, doc);\n  }\n  transaction.getPutListenerQueue().enqueuePutListener(\n    id,\n    registrationName,\n    listener\n  );\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special cased tags.\n\nvar omittedCloseTags = {\n  'area': true,\n  'base': true,\n  'br': true,\n  'col': true,\n  'embed': true,\n  'hr': true,\n  'img': true,\n  'input': true,\n  'keygen': true,\n  'link': true,\n  'meta': true,\n  'param': true,\n  'source': true,\n  'track': true,\n  'wbr': true\n  // NOTE: menuitem's close tag should be omitted, but that causes problems.\n};\n\n// We accept any tag to be rendered but since this gets injected into abitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\nvar validatedTagCache = {};\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction validateDangerousTag(tag) {\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));\n    validatedTagCache[tag] = true;\n  }\n}\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @constructor ReactDOMComponent\n * @extends ReactComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(tag) {\n  validateDangerousTag(tag);\n  this._tag = tag;\n  this.tagName = tag.toUpperCase();\n}\n\nReactDOMComponent.displayName = 'ReactDOMComponent';\n\nReactDOMComponent.Mixin = {\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {string} rootID The root DOM ID for this node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} The computed markup.\n   */\n  mountComponent: ReactPerf.measure(\n    'ReactDOMComponent',\n    'mountComponent',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      assertValidProps(this.props);\n      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';\n      return (\n        this._createOpenTagMarkupAndPutListeners(transaction) +\n        this._createContentMarkup(transaction) +\n        closeTag\n      );\n    }\n  ),\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function(transaction) {\n    var props = this.props;\n    var ret = '<' + this._tag;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue = props[propKey];\n      if (propValue == null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, propValue, transaction);\n      } else {\n        if (propKey === STYLE) {\n          if (propValue) {\n            propValue = props.style = assign({}, props.style);\n          }\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);\n        }\n        var markup =\n          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        if (markup) {\n          ret += ' ' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret + '>';\n    }\n\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);\n    return ret + ' ' + markupForID + '>';\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function(transaction) {\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = this.props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        return innerHTML.__html;\n      }\n    } else {\n      var contentToUse =\n        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;\n      var childrenToUse = contentToUse != null ? null : this.props.children;\n      if (contentToUse != null) {\n        return escapeTextForBrowser(contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(\n          childrenToUse,\n          transaction\n        );\n        return mountImages.join('');\n      }\n    }\n    return '';\n  },\n\n  receiveComponent: function(nextElement, transaction) {\n    if (nextElement === this._currentElement &&\n        nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for a element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextElement,\n      transaction\n    );\n  },\n\n  /**\n   * Updates a native DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    'ReactDOMComponent',\n    'updateComponent',\n    function(transaction, prevElement) {\n      assertValidProps(this._currentElement.props);\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevElement\n      );\n      this._updateDOMProperties(prevElement.props, transaction);\n      this._updateDOMChildren(prevElement.props, transaction);\n    }\n  ),\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMProperties: function(lastProps, transaction) {\n    var nextProps = this.props;\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) ||\n         !lastProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        var lastStyle = lastProps[propKey];\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates = styleUpdates || {};\n            styleUpdates[styleName] = '';\n          }\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        deleteListener(this._rootNodeID, propKey);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        ReactComponent.BackendIDOperations.deletePropertyByID(\n          this._rootNodeID,\n          propKey\n        );\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var lastProp = lastProps[propKey];\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        if (nextProp) {\n          nextProp = nextProps.style = assign({}, nextProp);\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) &&\n                (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) &&\n                lastProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates = nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, nextProp, transaction);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        ReactComponent.BackendIDOperations.updatePropertyByID(\n          this._rootNodeID,\n          propKey,\n          nextProp\n        );\n      }\n    }\n    if (styleUpdates) {\n      ReactComponent.BackendIDOperations.updateStylesByID(\n        this._rootNodeID,\n        styleUpdates\n      );\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMChildren: function(lastProps, transaction) {\n    var nextProps = this.props;\n\n    var lastContent =\n      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent =\n      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml =\n      lastProps.dangerouslySetInnerHTML &&\n      lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml =\n      nextProps.dangerouslySetInnerHTML &&\n      nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!=` which checks for null or undefined.\n    var lastChildren = lastContent != null ? null : lastProps.children;\n    var nextChildren = nextContent != null ? null : nextProps.children;\n\n    // If we're switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;\n    if (lastChildren != null && nextChildren == null) {\n      this.updateChildren(null, transaction);\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {\n      this.updateTextContent('');\n    }\n\n    if (nextContent != null) {\n      if (lastContent !== nextContent) {\n        this.updateTextContent('' + nextContent);\n      }\n    } else if (nextHtml != null) {\n      if (lastHtml !== nextHtml) {\n        ReactComponent.BackendIDOperations.updateInnerHTMLByID(\n          this._rootNodeID,\n          nextHtml\n        );\n      }\n    } else if (nextChildren != null) {\n      this.updateChildren(nextChildren, transaction);\n    }\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function() {\n    this.unmountChildren();\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);\n    ReactComponent.Mixin.unmountComponent.call(this);\n  }\n\n};\n\nassign(\n  ReactDOMComponent.prototype,\n  ReactComponent.Mixin,\n  ReactDOMComponent.Mixin,\n  ReactMultiChild.Mixin,\n  ReactBrowserComponentMixin\n);\n\nmodule.exports = ReactDOMComponent;\n\nrequire(\"./mock-modules\").register(\"ReactDOMComponent\", module);\n",
"ReactComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\n\n/**\n * Every React component is in one of these life cycles.\n */\nvar ComponentLifeCycle = keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n\nvar injected = false;\n\n/**\n * Optionally injectable environment dependent cleanup hook. (server vs.\n * browser etc). Example: A browser system caches DOM nodes based on component\n * ID and must remove that cache entry when this instance is unmounted.\n *\n * @private\n */\nvar unmountIDFromEnvironment = null;\n\n/**\n * The \"image\" of a component tree, is the platform specific (typically\n * serialized) data that represents a tree of lower level UI building blocks.\n * On the web, this \"image\" is HTML markup which describes a construction of\n * low level `div` and `span` nodes. Other platforms may have different\n * encoding of this \"image\". This must be injected.\n *\n * @private\n */\nvar mountImageIntoNode = null;\n\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as \"props\" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be \"owned\" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\nvar ReactComponent = {\n\n  injection: {\n    injectEnvironment: function(ReactComponentEnvironment) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !injected,\n        'ReactComponent: injectEnvironment() can only be called once.'\n      ) : invariant(!injected));\n      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;\n      unmountIDFromEnvironment =\n        ReactComponentEnvironment.unmountIDFromEnvironment;\n      ReactComponent.BackendIDOperations =\n        ReactComponentEnvironment.BackendIDOperations;\n      injected = true;\n    }\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  BackendIDOperations: null,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function() {\n      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function(partialProps, callback) {\n      // Merge with the pending element if it exists, otherwise with existing\n      // element props.\n      var element = this._pendingElement || this._currentElement;\n      this.replaceProps(\n        assign({}, element.props, partialProps),\n        callback\n      );\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function(props, callback) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'replaceProps(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this._mountDepth === 0,\n        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +\n        'component with a parent. This is an anti-pattern since props will ' +\n        'get reactively updated when rendered. Instead, change the owner\\'s ' +\n        '`render` method to pass the correct value as props to the component ' +\n        'where it is created.'\n      ) : invariant(this._mountDepth === 0));\n      // This is a deoptimized path. We optimize for always having a element.\n      // This creates an extra internal element.\n      this._pendingElement = ReactElement.cloneAndReplaceProps(\n        this._pendingElement || this._currentElement,\n        props\n      );\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Schedule a partial update to the props. Only used for internal testing.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @internal\n     */\n    _setPropsInternal: function(partialProps, callback) {\n      // This is a deoptimized path. We optimize for always having a element.\n      // This creates an extra internal element.\n      var element = this._pendingElement || this._currentElement;\n      this._pendingElement = ReactElement.cloneAndReplaceProps(\n        element,\n        assign({}, element.props, partialProps)\n      );\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React components.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {ReactElement} element\n     * @internal\n     */\n    construct: function(element) {\n      // This is the public exposed props object after it has been processed\n      // with default props. The element's props represents the true internal\n      // state of the props.\n      this.props = element.props;\n      // Record the component responsible for creating this component.\n      // This is accessible through the element but we maintain an extra\n      // field for compatibility with devtools and as a way to make an\n      // incremental update. TODO: Consider deprecating this field.\n      this._owner = element._owner;\n\n      // All components start unmounted.\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n\n      // See ReactUpdates.\n      this._pendingCallbacks = null;\n\n      // We keep the old element and a reference to the pending element\n      // to track updates.\n      this._currentElement = element;\n      this._pendingElement = null;\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function(rootID, transaction, mountDepth) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !this.isMounted(),\n        'mountComponent(%s, ...): Can only mount an unmounted component. ' +\n        'Make sure to avoid storing components between renders or reusing a ' +\n        'single component instance in multiple places.',\n        rootID\n      ) : invariant(!this.isMounted()));\n      var ref = this._currentElement.ref;\n      if (ref != null) {\n        var owner = this._currentElement._owner;\n        ReactOwner.addComponentAsRefTo(this, ref, owner);\n      }\n      this._rootNodeID = rootID;\n      this._lifeCycleState = ComponentLifeCycle.MOUNTED;\n      this._mountDepth = mountDepth;\n      // Effectively: return '';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'unmountComponent(): Can only unmount a mounted component.'\n      ) : invariant(this.isMounted()));\n      var ref = this._currentElement.ref;\n      if (ref != null) {\n        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);\n      }\n      unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID = null;\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function(nextElement, transaction) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        this.isMounted(),\n        'receiveComponent(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      this._pendingElement = nextElement;\n      this.performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * If `_pendingElement` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    performUpdateIfNecessary: function(transaction) {\n      if (this._pendingElement == null) {\n        return;\n      }\n      var prevElement = this._currentElement;\n      var nextElement = this._pendingElement;\n      this._currentElement = nextElement;\n      this.props = nextElement.props;\n      this._owner = nextElement._owner;\n      this._pendingElement = null;\n      this.updateComponent(transaction, prevElement);\n    },\n\n    /**\n     * Updates the component's currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevElement\n     * @internal\n     */\n    updateComponent: function(transaction, prevElement) {\n      var nextElement = this._currentElement;\n\n      // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`. We use the element instead\n      // of the public this.props because the post processing cannot determine\n      // a ref. The ref conceptually lives on the element.\n\n      // TODO: Should this even be possible? The owner cannot change because\n      // it's forbidden by shouldUpdateReactComponent. The ref can change\n      // if you swap the keys of but not the refs. Reconsider where this check\n      // is made. It probably belongs where the key checking and\n      // instantiateReactComponent is done.\n\n      if (nextElement._owner !== prevElement._owner ||\n          nextElement.ref !== prevElement.ref) {\n        if (prevElement.ref != null) {\n          ReactOwner.removeComponentAsRefFrom(\n            this, prevElement.ref, prevElement._owner\n          );\n        }\n        // Correct, even if the owner is the same, and only the ref has changed.\n        if (nextElement.ref != null) {\n          ReactOwner.addComponentAsRefTo(\n            this,\n            nextElement.ref,\n            nextElement._owner\n          );\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.render}\n     */\n    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {\n      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n      transaction.perform(\n        this._mountComponentIntoNode,\n        this,\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup\n      );\n      ReactUpdates.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function(\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup) {\n      var markup = this.mountComponent(rootID, transaction, 0);\n      mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function(owner) {\n      return this._owner === owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function(ref) {\n      var owner = this._owner;\n      if (!owner || !owner.refs) {\n        return null;\n      }\n      return owner.refs[ref];\n    }\n  }\n};\n\nmodule.exports = ReactComponent;\n\nrequire(\"./mock-modules\").register(\"ReactComponent\", module);\n",
"ReactMultiChild":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n      for (var name in children) {\n        var child = children[name];\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they're\n          // mounted.\n          var childInstance = instantiateReactComponent(child, null);\n          children[name] = childInstance;\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = childInstance.mountComponent(\n            rootID,\n            transaction,\n            this._mountDepth + 1\n          );\n          childInstance._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = nextChildren[name];\n        if (shouldUpdateReactComponent(prevElement, nextElement)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextElement, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          var nextChildInstance = instantiateReactComponent(\n            nextElement,\n            null\n          );\n          this._mountChildByNameAtIndex(\n            nextChildInstance, name, nextIndex, transaction\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        // TODO: When is this not true?\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = child.mountComponent(\n        rootID,\n        transaction,\n        this._mountDepth + 1\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n\nrequire(\"./mock-modules\").register(\"ReactMultiChild\", module);\n",
"isEventSupported":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature =\n    document.implementation &&\n    document.implementation.hasFeature &&\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM ||\n      capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;\n\nrequire(\"./mock-modules\").register(\"isEventSupported\", module);\n",
"DOMPropertyOperations":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\nvar warning = require(\"./warning\");\n\nfunction shouldIgnoreValue(name, value) {\n  return value == null ||\n    (DOMProperty.hasBooleanValue[name] && !value) ||\n    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||\n    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||\n    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);\n}\n\nvar processAttributeNameAndPrefix = memoizeStringOnly(function(name) {\n  return escapeTextForBrowser(name) + '=\"';\n});\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function(name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] ||\n        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = (\n      DOMProperty.isCustomAttribute(lowerCasedName) ?\n        lowerCasedName :\n      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?\n        DOMProperty.getPossibleStandardName[lowerCasedName] :\n        null\n    );\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      standardName == null,\n      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'\n    ) : null);\n\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function(id) {\n    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +\n      escapeTextForBrowser(id) + '\"';\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function(name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      if (shouldIgnoreValue(name, value)) {\n        return '';\n      }\n      var attributeName = DOMProperty.getAttributeName[name];\n      if (DOMProperty.hasBooleanValue[name] ||\n          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {\n        return escapeTextForBrowser(attributeName);\n      }\n      return processAttributeNameAndPrefix(attributeName) +\n        escapeTextForBrowser(value) + '\"';\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return processAttributeNameAndPrefix(name) +\n        escapeTextForBrowser(value) + '\"';\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function(node, name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(name, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== ('' + value)) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        node.removeAttribute(name);\n      } else {\n        node.setAttribute(name, '' + value);\n      }\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function(node, name) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.removeAttribute(DOMProperty.getAttributeName[name]);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        var defaultValue = DOMProperty.getDefaultValueForProperty(\n          node.nodeName,\n          propName\n        );\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nmodule.exports = DOMPropertyOperations;\n\nrequire(\"./mock-modules\").register(\"DOMPropertyOperations\", module);\n",
"ReactDOMIDOperations":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML:\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updatePropertyByID',\n    function(id, name, value) {\n      var node = ReactMount.getNode(id);\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        'updatePropertyByID(...): %s',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n      // If we're updating to null or undefined, we should remove the property\n      // from the DOM node instead of inadvertantly setting to a string. This\n      // brings us in line with the same behavior we have on initial render.\n      if (value != null) {\n        DOMPropertyOperations.setValueForProperty(node, name, value);\n      } else {\n        DOMPropertyOperations.deleteValueForProperty(node, name);\n      }\n    }\n  ),\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'deletePropertyByID',\n    function(id, name, value) {\n      var node = ReactMount.getNode(id);\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        'updatePropertyByID(...): %s',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n      DOMPropertyOperations.deleteValueForProperty(node, name, value);\n    }\n  ),\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateStylesByID',\n    function(id, styles) {\n      var node = ReactMount.getNode(id);\n      CSSPropertyOperations.setValueForStyles(node, styles);\n    }\n  ),\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateInnerHTMLByID',\n    function(id, html) {\n      var node = ReactMount.getNode(id);\n      setInnerHTML(node, html);\n    }\n  ),\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateTextContentByID',\n    function(id, content) {\n      var node = ReactMount.getNode(id);\n      DOMChildrenOperations.updateTextContent(node, content);\n    }\n  ),\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'dangerouslyReplaceNodeWithMarkupByID',\n    function(id, markup) {\n      var node = ReactMount.getNode(id);\n      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n    }\n  ),\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'dangerouslyProcessChildrenUpdates',\n    function(updates, markup) {\n      for (var i = 0; i < updates.length; i++) {\n        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n      }\n      DOMChildrenOperations.processUpdates(updates, markup);\n    }\n  )\n};\n\nmodule.exports = ReactDOMIDOperations;\n\nrequire(\"./mock-modules\").register(\"ReactDOMIDOperations\", module);\n",
"ReactEventListener":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventListener = require(\"./EventListener\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar getEventTarget = require(\"./getEventTarget\");\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function() {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(\n  TopLevelCallbackBookKeeping,\n  PooledClass.twoArgumentPooler\n);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(\n    getEventTarget(bookKeeping.nativeEvent)\n  ) || window;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n    ReactEventListener._handleTopLevel(\n      bookKeeping.topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      bookKeeping.nativeEvent\n    );\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function(handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function(enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function() {\n    return ReactEventListener._enabled;\n  },\n\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return;\n    }\n    return EventListener.listen(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return;\n    }\n    return EventListener.capture(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  monitorScrollValue: function(refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n    EventListener.listen(window, 'resize', callback);\n  },\n\n  dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(\n      topLevelType,\n      nativeEvent\n    );\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;\n\nrequire(\"./mock-modules\").register(\"ReactEventListener\", module);\n",
"getTestDocument":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTestDocument\n */\n\n\"use strict\";\n\nfunction getTestDocument(markup) {\n  var iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n  document.body.appendChild(iframe);\n\n  var testDocument = iframe.contentDocument || iframe.contentWindow.document;\n  testDocument.open();\n  testDocument.write(\n    markup || '<!doctype html><html><meta charset=utf-8><title>test doc</title>'\n  );\n  testDocument.close();\n\n  iframe.parentNode.removeChild(iframe);\n  return testDocument;\n}\n\nmodule.exports = getTestDocument;\n\nrequire(\"./mock-modules\").register(\"getTestDocument\", module);\n",
"CSSProperty":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSProperty\n */\n\n\"use strict\";\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexShrink: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  strokeOpacity: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function(prop) {\n  prefixes.forEach(function(prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundImage: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundColor: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports = CSSProperty;\n\nrequire(\"./mock-modules\").register(\"CSSProperty\", module);\n",
"CSSPropertyOperations":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar CSSProperty = require(\"./CSSProperty\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar camelizeStyleName = require(\"./camelizeStyleName\");\nvar dangerousStyleValue = require(\"./dangerousStyleValue\");\nvar hyphenateStyleName = require(\"./hyphenateStyleName\");\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\nvar warning = require(\"./warning\");\n\nvar processStyleName = memoizeStringOnly(function(styleName) {\n  return hyphenateStyleName(styleName);\n});\n\nvar styleFloatAccessor = 'cssFloat';\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8 only supports accessing cssFloat (standard) as styleFloat\n  if (document.documentElement.style.cssFloat === undefined) {\n    styleFloatAccessor = 'styleFloat';\n  }\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var warnedStyleNames = {};\n\n  var warnHyphenatedStyleName = function(name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'Unsupported style property ' + name + '. Did you mean ' +\n      camelizeStyleName(name) + '?'\n    ) : null);\n  };\n}\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function(styles) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (styleName.indexOf('-') > -1) {\n          warnHyphenatedStyleName(styleName);\n        }\n      }\n      var styleValue = styles[styleName];\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function(node, styles) {\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (styleName.indexOf('-') > -1) {\n          warnHyphenatedStyleName(styleName);\n        }\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n      if (styleName === 'float') {\n        styleName = styleFloatAccessor;\n      }\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports = CSSPropertyOperations;\n\nrequire(\"./mock-modules\").register(\"CSSPropertyOperations\", module);\n",
"instantiateReactComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar warning = require(\"./warning\");\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\n\n/**\n * Given an `element` create an instance that will actually be mounted.\n *\n * @param {object} element\n * @param {*} parentCompositeType The composite type that resolved this.\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(element, parentCompositeType) {\n  var instance;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      element && (typeof element.type === 'function' ||\n                     typeof element.type === 'string'),\n      'Only functions or strings can be mounted as React components.'\n    ) : null);\n\n    // Resolve mock instances\n    if (element.type._mockedReactClassConstructor) {\n      // If this is a mocked class, we treat the legacy factory as if it was the\n      // class constructor for future proofing unit tests. Because this might\n      // be mocked as a legacy factory, we ignore any warnings triggerd by\n      // this temporary hack.\n      ReactLegacyElement._isLegacyCallWarningEnabled = false;\n      try {\n        instance = new element.type._mockedReactClassConstructor(\n          element.props\n        );\n      } finally {\n        ReactLegacyElement._isLegacyCallWarningEnabled = true;\n      }\n\n      // If the mock implementation was a legacy factory, then it returns a\n      // element. We need to turn this into a real component instance.\n      if (ReactElement.isValidElement(instance)) {\n        instance = new instance.type(instance.props);\n      }\n\n      var render = instance.render;\n      if (!render) {\n        // For auto-mocked factories, the prototype isn't shimmed and therefore\n        // there is no render function on the instance. We replace the whole\n        // component with an empty component instance instead.\n        element = ReactEmptyComponent.getEmptyComponent();\n      } else {\n        if (render._isMockFunction && !render._getMockImplementation()) {\n          // Auto-mocked components may have a prototype with a mocked render\n          // function. For those, we'll need to mock the result of the render\n          // since we consider undefined to be invalid results from render.\n          render.mockImplementation(\n            ReactEmptyComponent.getEmptyComponent\n          );\n        }\n        instance.construct(element);\n        return instance;\n      }\n    }\n  }\n\n  // Special case string values\n  if (typeof element.type === 'string') {\n    instance = ReactNativeComponent.createInstanceForTag(\n      element.type,\n      element.props,\n      parentCompositeType\n    );\n  } else {\n    // Normal case for non-mocks and non-strings\n    instance = new element.type(element.props);\n  }\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      typeof instance.construct === 'function' &&\n      typeof instance.mountComponent === 'function' &&\n      typeof instance.receiveComponent === 'function',\n      'Only React Components can be mounted.'\n    ) : null);\n  }\n\n  // This actually sets up the internal instance. This will become decoupled\n  // from the public instance in a future diff.\n  instance.construct(element);\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;\n\nrequire(\"./mock-modules\").register(\"instantiateReactComponent\", module);\n",
"Danger":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function(markupList) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +\n      'thread. Make sure `window` and `document` are available globally ' +\n      'before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        markupList[i],\n        'dangerouslyRenderMarkup(...): Missing markup.'\n      ) : invariant(markupList[i]));\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      for (var resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(\n            OPEN_TAG_NAME_EXP,\n            // This index will be parsed back out below.\n            '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" '\n          );\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(\n        markupListByNodeName.join(''),\n        emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (i = 0; i < renderNodes.length; ++i) {\n        var renderNode = renderNodes[i];\n        if (renderNode.hasAttribute &&\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            !resultList.hasOwnProperty(resultIndex),\n            'Danger: Assigning to an already-occupied result index.'\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error(\n            \"Danger: Discarding unexpected node:\",\n            renderNode\n          );\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultListAssignmentCount === resultList.length,\n      'Danger: Did not assign to every index of resultList.'\n    ) : invariant(resultListAssignmentCount === resultList.length));\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultList.length === markupList.length,\n      'Danger: Expected markup to render %s nodes, but rendered %s.',\n      markupList.length,\n      resultList.length\n    ) : invariant(resultList.length === markupList.length));\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +\n      'worker thread. Make sure `window` and `document` are available ' +\n      'globally before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    (\"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      oldChild.tagName.toLowerCase() !== 'html',\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +\n      '<html> node. This is because browser quirks make this unreliable ' +\n      'and/or slow. If you want to render to the root you must use ' +\n      'server rendering. See renderComponentToString().'\n    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));\n\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;\n\nrequire(\"./mock-modules\").register(\"Danger\", module);\n",
"getNodeForCharacterOffset":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n\"use strict\";\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType == 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;\n\nrequire(\"./mock-modules\").register(\"getNodeForCharacterOffset\", module);\n",
"ReactDoNotBindDeprecated":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDoNotBindDeprecated\n */\n\n\"use strict\";\n\nvar ReactDoNotBindDeprecated = {\n  /**\n   * Marks the method for not being automatically bound on component mounting. A\n   * couple of reasons you might want to use this:\n   *\n   * - Automatically supporting the previous behavior in components that were\n   *   built with previous versions of React.\n   * - Tuning performance, by avoiding binding on initial render for methods\n   *   that are always invoked while being preceded by `this.`. Such binds are\n   *   unnecessary.\n   *\n   *   React.createClass({\n   *     handleClick: ReactDoNotBindDeprecated.doNotBind(function() {\n   *       alert(this.setState); // undefined!\n   *     }),\n   *     render: function() {\n   *       return <a onClick={this.handleClick}>Jump</a>;\n   *     }\n   *   });\n   *\n   * @param {function} method Method to avoid automatically binding.\n   * @public\n   */\n  doNotBind: function(method) {\n    method.__reactDontBind = true;   // Mutating\n    return method;\n  }\n};\n\nmodule.exports = ReactDoNotBindDeprecated;\n\nrequire(\"./mock-modules\").register(\"ReactDoNotBindDeprecated\", module);\n",
"ReactCompositeComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar mapObject = require(\"./mapObject\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({mixins: null});\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    validateTypeDef(\n      Constructor,\n      childContextTypes,\n      ReactPropTypeLocations.childContext\n    );\n    Constructor.childContextTypes = assign(\n      {},\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    validateTypeDef(\n      Constructor,\n      contextTypes,\n      ReactPropTypeLocations.context\n    );\n    Constructor.contextTypes = assign(\n      {},\n      Constructor.contextTypes,\n      contextTypes\n    );\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    validateTypeDef(\n      Constructor,\n      propTypes,\n      ReactPropTypeLocations.prop\n    );\n    Constructor.propTypes = assign(\n      {},\n      Constructor.propTypes,\n      propTypes\n    );\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._owner || null;\n  if (owner && owner.constructor && owner.constructor.displayName) {\n    return ' Check the render method of `' + owner.constructor.displayName +\n      '`.';\n  }\n  return '';\n}\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof typeDef[propName] == 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactCompositeComponent',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : invariant(typeof typeDef[propName] == 'function'));\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?\n    ReactCompositeComponentInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactCompositeComponentInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactCompositeComponentInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n    'replaceState(...): Can only update a mounted or mounting component.'\n  ) : invariant(instance.isMounted() ||\n    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactCurrentOwner.current == null,\n    'replaceState(...): Cannot update during an existing state transition ' +\n    '(such as within `render`). Render methods should be a pure function ' +\n    'of props and state.'\n  ) : invariant(ReactCurrentOwner.current == null));\n  (\"production\" !== process.env.NODE_ENV ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n    'replaceState(...): Cannot update while unmounting component. This ' +\n    'usually means you called setState() on an unmounted component.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactLegacyElement.isValidFactory(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactElement.isValidElement(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactElement.isValidElement(spec)));\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod =\n        ReactCompositeComponentInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isCompositeComponentMethod &&\n        !isAlreadyDefined &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactCompositeComponentInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            isCompositeComponentMethod && (\n              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||\n              specPolicy === SpecPolicy.DEFINE_MANY\n            ),\n            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +\n            'when mixing in component specs.',\n            specPolicy,\n            name\n          ) : invariant(isCompositeComponentMethod && (\n            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||\n            specPolicy === SpecPolicy.DEFINE_MANY\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isReserved,\n      'ReactCompositeComponent: You are attempting to define a reserved ' +\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n      'as an instance property instead; it will still be accessible on the ' +\n      'constructor.',\n      name\n    ) : invariant(!isReserved));\n\n    var isInherited = name in Constructor;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isInherited,\n      'ReactCompositeComponent: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be ' +\n      'due to a mixin.',\n      name\n    ) : invariant(!isInherited));\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  mapObject(two, function(value, key) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      one[key] === undefined,\n      'mergeObjectsWithNoDuplicateKeys(): ' +\n      'Tried to merge two objects with the same key: `%s`. This conflict ' +\n      'may be due to a mixin; in particular, this may be caused by two ' +\n      'getInitialState() or getDefaultProps() methods returning objects ' +\n      'with clashing keys.',\n      key\n    ) : invariant(one[key] === undefined));\n    one[key] = value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+---------------------------------+--------+\n * |  UN   |             MOUNTED             |   UN   |\n * |MOUNTED|                                 | MOUNTED|\n * +-------+---------------------------------+--------+\n * |       ^--------+   +-------+   +--------^        |\n * |       |        |   |       |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |\n * |       |        |   |PROPS  |   |MOUNTING|        |\n * |       |        |   |       |   |        |        |\n * |       |        |   |       |   |        |        |\n * |       +--------+   +-------+   +--------+        |\n * |       |                                 |        |\n * +-------+---------------------------------+--------+\n */\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function(element) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n\n    this.state = null;\n    this._pendingState = null;\n\n    // This is the public post-processed context. The real context and pending\n    // context lives on the element.\n    this.context = null;\n\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    return ReactComponent.Mixin.isMounted.call(this) &&\n      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'mountComponent',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n\n      if (this.__reactAutoBindMap) {\n        this._bindAutoBindMethods();\n      }\n\n      this.context = this._processContext(this._currentElement._context);\n      this.props = this._processProps(this.props);\n\n      this.state = this.getInitialState ? this.getInitialState() : null;\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof this.state === 'object' && !Array.isArray(this.state),\n        '%s.getInitialState(): must return an object or null',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));\n\n      this._pendingState = null;\n      this._pendingForceUpdate = false;\n\n      if (this.componentWillMount) {\n        this.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingState` without triggering a re-render.\n        if (this._pendingState) {\n          this.state = this._pendingState;\n          this._pendingState = null;\n        }\n      }\n\n      this._renderedComponent = instantiateReactComponent(\n        this._renderValidatedComponent(),\n        this._currentElement.type // The wrapping type\n      );\n\n      // Done with mounting, `setState` will now trigger UI changes.\n      this._compositeLifeCycleState = null;\n      var markup = this._renderedComponent.mountComponent(\n        rootID,\n        transaction,\n        mountDepth + 1\n      );\n      if (this.componentDidMount) {\n        transaction.getReactMountReady().enqueue(this.componentDidMount, this);\n      }\n      return markup;\n    }\n  ),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState = null;\n\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent = null;\n\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function(partialState, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof partialState === 'object' || partialState == null,\n      'setState(...): takes an object of state variables to update.'\n    ) : invariant(typeof partialState === 'object' || partialState == null));\n    if (\"production\" !== process.env.NODE_ENV){\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        partialState != null,\n        'setState(...): You passed an undefined or null state object; ' +\n        'instead, use forceUpdate().'\n      ) : null);\n    }\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(\n      assign({}, this._pendingState || this.state, partialState),\n      callback\n    );\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function(completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {\n      // If we're in a componentWillMount handler, don't enqueue a rerender\n      // because ReactUpdates assumes we're in a browser context (which is wrong\n      // for server rendering) and we're about to do a render anyway.\n      // TODO: The callback here is ignored when setState is called from\n      // componentWillMount. Either fix it or disallow doing so completely in\n      // favor of getInitialState.\n      ReactUpdates.enqueueUpdate(this, callback);\n    }\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = null;\n    var contextTypes = this.constructor.contextTypes;\n    if (contextTypes) {\n      maskedContext = {};\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function(currentContext) {\n    var childContext = this.getChildContext && this.getChildContext();\n    var displayName = this.constructor.displayName || 'ReactCompositeComponent';\n    if (childContext) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof this.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        displayName\n      ) : invariant(typeof this.constructor.childContextTypes === 'object'));\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          this.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          name in this.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          displayName,\n          name\n        ) : invariant(name in this.constructor.childContextTypes));\n      }\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var propTypes = this.constructor.propTypes;\n      if (propTypes) {\n        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.constructor.displayName;\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error =\n          propTypes[propName](props, propName, componentName, location);\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // renderComponent calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n          (\"production\" !== process.env.NODE_ENV ? warning(false, error.message + addendum) : null);\n        }\n      }\n    }\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||\n        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n\n    if (this._pendingElement == null &&\n        this._pendingState == null &&\n        !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextContext = this.context;\n    var nextProps = this.props;\n    var nextElement = this._currentElement;\n    if (this._pendingElement != null) {\n      nextElement = this._pendingElement;\n      nextContext = this._processContext(nextElement._context);\n      nextProps = this._processProps(nextElement.props);\n      this._pendingElement = null;\n\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    this._compositeLifeCycleState = null;\n\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    var shouldUpdate =\n      this._pendingForceUpdate ||\n      !this.shouldComponentUpdate ||\n      this.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (typeof shouldUpdate === \"undefined\") {\n        console.warn(\n          (this.constructor.displayName || 'ReactCompositeComponent') +\n          '.shouldComponentUpdate(): Returned undefined instead of a ' +\n          'boolean value. Make sure to return true or false.'\n        );\n      }\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(\n        nextElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction\n      );\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state.\n      this._currentElement = nextElement;\n      this.props = nextProps;\n      this.state = nextState;\n      this.context = nextContext;\n\n      // Owner cannot change because shouldUpdateReactComponent doesn't allow\n      // it. TODO: Remove this._owner completely.\n      this._owner = nextElement._owner;\n    }\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction\n  ) {\n    var prevElement = this._currentElement;\n    var prevProps = this.props;\n    var prevState = this.state;\n    var prevContext = this.context;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this.props = nextProps;\n    this.state = nextState;\n    this.context = nextContext;\n\n    // Owner cannot change because shouldUpdateReactComponent doesn't allow\n    // it. TODO: Remove this._owner completely.\n    this._owner = nextElement._owner;\n\n    this.updateComponent(\n      transaction,\n      prevElement\n    );\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),\n        this\n      );\n    }\n  },\n\n  receiveComponent: function(nextElement, transaction) {\n    if (nextElement === this._currentElement &&\n        nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for a element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextElement,\n      transaction\n    );\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'updateComponent',\n    function(transaction, prevParentElement) {\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevParentElement\n      );\n\n      var prevComponentInstance = this._renderedComponent;\n      var prevElement = prevComponentInstance._currentElement;\n      var nextElement = this._renderValidatedComponent();\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        prevComponentInstance.receiveComponent(nextElement, transaction);\n      } else {\n        // These two IDs are actually the same! But nothing should rely on that.\n        var thisID = this._rootNodeID;\n        var prevComponentID = prevComponentInstance._rootNodeID;\n        prevComponentInstance.unmountComponent();\n        this._renderedComponent = instantiateReactComponent(\n          nextElement,\n          this._currentElement.type\n        );\n        var nextMarkup = this._renderedComponent.mountComponent(\n          thisID,\n          transaction,\n          this._mountDepth + 1\n        );\n        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(\n          prevComponentID,\n          nextMarkup\n        );\n      }\n    }\n  ),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function(callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isMounted() ||\n        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n      'forceUpdate(...): Can only force an update on mounted or mounting ' +\n        'components.'\n    ) : invariant(this.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&\n      ReactCurrentOwner.current == null,\n      'forceUpdate(...): Cannot force an update while unmounting component ' +\n      'or within a `render` function.'\n    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&\n    ReactCurrentOwner.current == null));\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    '_renderValidatedComponent',\n    function() {\n      var renderedComponent;\n      var previousContext = ReactContext.current;\n      ReactContext.current = this._processChildContext(\n        this._currentElement._context\n      );\n      ReactCurrentOwner.current = this;\n      try {\n        renderedComponent = this.render();\n        if (renderedComponent === null || renderedComponent === false) {\n          renderedComponent = ReactEmptyComponent.getEmptyComponent();\n          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);\n        } else {\n          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);\n        }\n      } finally {\n        ReactContext.current = previousContext;\n        ReactCurrentOwner.current = null;\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        ReactElement.isValidElement(renderedComponent),\n        '%s.render(): A valid ReactComponent must be returned. You may have ' +\n          'returned undefined, an array or some other invalid object.',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(ReactElement.isValidElement(renderedComponent)));\n      return renderedComponent;\n    }\n  ),\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function() {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(\n        method,\n        this.constructor.displayName + '.' + autoBindKey\n      ));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function(method) {\n    var component = this;\n    var boundMethod = method.bind(component);\n    if (\"production\" !== process.env.NODE_ENV) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): React component methods may only be bound to the ' +\n            'component instance. See ' + componentName\n          );\n        } else if (!args.length) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): You are binding a component method to the component. ' +\n            'React does this for you automatically in a high-performance ' +\n            'way, so you can safely remove this call. See ' + componentName\n          );\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function() {};\nassign(\n  ReactCompositeComponentBase.prototype,\n  ReactComponent.Mixin,\n  ReactOwner.Mixin,\n  ReactPropTransferer.Mixin,\n  ReactCompositeComponentMixin\n);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent = {\n\n  LifeCycle: CompositeLifeCycle,\n\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function(props) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted. This will later be used\n      // by the stand-alone class implementation.\n    };\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse(\n          'react_component_should_update_warning',\n          { component: spec.displayName }\n        );\n        console.warn(\n          (spec.displayName || 'A component') + ' has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.'\n         );\n      }\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      return ReactLegacyElement.wrapFactory(\n        ReactElementValidator.createFactory(Constructor)\n      );\n    }\n    return ReactLegacyElement.wrapFactory(\n      ReactElement.createFactory(Constructor)\n    );\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\n\nmodule.exports = ReactCompositeComponent;\n\nrequire(\"./mock-modules\").register(\"ReactCompositeComponent\", module);\n",
"cx":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function(className) {\n      return classNames[className];\n    }).join(' ');\n  } else {\n    return Array.prototype.join.call(arguments, ' ');\n  }\n}\n\nmodule.exports = cx;\n\nrequire(\"./mock-modules\").register(\"cx\", module);\n",
"ReactCurrentOwner":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n\"use strict\";\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n *\n * The depth indicate how many composite components are above this render level.\n */\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;\n\nrequire(\"./mock-modules\").register(\"ReactCurrentOwner\", module);\n",
"ReactPropTypes":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\n\nvar deprecated = require(\"./deprecated\");\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar elementTypeChecker = createElementTypeChecker();\nvar nodeTypeChecker = createNodeChecker();\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: elementTypeChecker,\n  instanceOf: createInstanceTypeChecker,\n  node: nodeTypeChecker,\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker,\n\n  component: deprecated(\n    'React.PropTypes',\n    'component',\n    'element',\n    this,\n    elementTypeChecker\n  ),\n  renderable: deprecated(\n    'React.PropTypes',\n    'renderable',\n    'node',\n    this,\n    nodeTypeChecker\n  )\n};\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location) {\n    componentName = componentName || ANONYMOUS;\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new Error(\n          (\"Required \" + locationName + \" `\" + propName + \"` was not specified in \")+\n          (\"`\" + componentName + \"`.\")\n        );\n      }\n    } else {\n      return validate(props, propName, componentName, location);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + preciseType + \"` \") +\n        (\"supplied to `\" + componentName + \"`, expected `\" + expectedType + \"`.\")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns());\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\")\n      );\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location);\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!ReactElement.isValidElement(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected a ReactElement.\")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected instance of `\" + expectedClassName + \"`.\")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (propValue === expectedValues[i]) {\n        return;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new Error(\n      (\"Invalid \" + locationName + \" `\" + propName + \"` of value `\" + propValue + \"` \") +\n      (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\")\n      );\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  function validate(props, propName, componentName, location) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location) == null) {\n        return;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new Error(\n      (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n      (\"`\" + componentName + \"`.\")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected a ReactNode.\")\n      );\n    }\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + propType + \"` \") +\n        (\"supplied to `\" + componentName + \"`, expected `object`.\")\n      );\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location);\n      if (error) {\n        return error;\n      }\n    }\n  }\n  return createChainableTypeChecker(validate, 'expected `object`');\n}\n\nfunction isNode(propValue) {\n  switch(typeof propValue) {\n    case 'number':\n    case 'string':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n      for (var k in propValue) {\n        if (!isNode(propValue[k])) {\n          return false;\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\nmodule.exports = ReactPropTypes;\n\nrequire(\"./mock-modules\").register(\"ReactPropTypes\", module);\n",
"ReactErrorUtils":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactErrorUtils\n * @typechecks\n */\n\n\"use strict\";\n\nvar ReactErrorUtils = {\n  /**\n   * Creates a guarded version of a function. This is supposed to make debugging\n   * of event handlers easier. To aid debugging with the browser's debugger,\n   * this currently simply returns the original function.\n   *\n   * @param {function} func Function to be executed\n   * @param {string} name The name of the guard\n   * @return {function}\n   */\n  guard: function(func, name) {\n    return func;\n  }\n};\n\nmodule.exports = ReactErrorUtils;\n\nrequire(\"./mock-modules\").register(\"ReactErrorUtils\", module);\n",
"ReactElement":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n\"use strict\";\n\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar warning = require(\"./warning\");\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true\n};\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} object\n * @param {string} key\n */\nfunction defineWarningProperty(object, key) {\n  Object.defineProperty(object, key, {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function() {\n      if (!this._store) {\n        return null;\n      }\n      return this._store[key];\n    },\n\n    set: function(value) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        false,\n        'Don\\'t set the ' + key + ' property of the component. ' +\n        'Mutate the existing props object instead.'\n      ) : null);\n      this._store[key] = value;\n    }\n\n  });\n}\n\n/**\n * This is updated to true if the membrane is successfully created.\n */\nvar useMutationMembrane = false;\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} element\n */\nfunction defineMutationMembrane(prototype) {\n  try {\n    var pseudoFrozenProperties = {\n      props: true\n    };\n    for (var key in pseudoFrozenProperties) {\n      defineWarningProperty(prototype, key);\n    }\n    useMutationMembrane = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\n/**\n * Base constructor for all React elements. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @param {string|object} ref\n * @param {*} key\n * @param {*} props\n * @internal\n */\nvar ReactElement = function(type, key, ref, owner, context, props) {\n  // Built-in properties that belong on the element\n  this.type = type;\n  this.key = key;\n  this.ref = ref;\n\n  // Record the component responsible for creating this element.\n  this._owner = owner;\n\n  // TODO: Deprecate withContext, and then the context becomes accessible\n  // through the owner.\n  this._context = context;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // The validation flag and props are currently mutative. We put them on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    this._store = { validated: false, props: props };\n\n    // We're not allowed to set props directly on the object so we early\n    // return and rely on the prototype membrane to forward to the backing\n    // store.\n    if (useMutationMembrane) {\n      Object.freeze(this);\n      return;\n    }\n  }\n\n  this.props = props;\n};\n\n// We intentionally don't expose the function on the constructor property.\n// ReactElement should be indistinguishable from a plain object.\nReactElement.prototype = {\n  _isReactElement: true\n};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  defineMutationMembrane(ReactElement.prototype);\n}\n\nReactElement.createElement = function(type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        config.key !== null,\n        'createElement(...): Encountered component with a `key` of null. In ' +\n        'a future version, this will be treated as equivalent to the string ' +\n        '\\'null\\'; instead, provide an explicit key or use undefined.'\n      ) : null);\n    }\n    // TODO: Change this back to `config.key === undefined`\n    key = config.key == null ? null : '' + config.key;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) &&\n          !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return new ReactElement(\n    type,\n    key,\n    ref,\n    ReactCurrentOwner.current,\n    ReactContext.current,\n    props\n  );\n};\n\nReactElement.createFactory = function(type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. <Foo />.type === Foo.type.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceProps = function(oldElement, newProps) {\n  var newElement = new ReactElement(\n    oldElement.type,\n    oldElement.key,\n    oldElement.ref,\n    oldElement._owner,\n    oldElement._context,\n    newProps\n  );\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // If the key on the original is valid, then the clone is valid\n    newElement._store.validated = oldElement._store.validated;\n  }\n  return newElement;\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function(object) {\n  // ReactTestUtils is often used outside of beforeEach where as React is\n  // within it. This leads to two different instances of React on the same\n  // page. To identify a element from a different React instance we use\n  // a flag instead of an instanceof check.\n  var isElement = !!(object && object._isReactElement);\n  // if (isElement && !(object instanceof ReactElement)) {\n  // This is an indicator that you're using multiple versions of React at the\n  // same time. This will screw with ownership and stuff. Fix it, please.\n  // TODO: We could possibly warn here.\n  // }\n  return isElement;\n};\n\nmodule.exports = ReactElement;\n\nrequire(\"./mock-modules\").register(\"ReactElement\", module);\n",
"mapObject":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mapObject\n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object and constructs a new object from the results. The `callback` is\n * invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `mapObject` will not be visited\n * by `callback`. If the values of existing properties are changed, the value\n * passed to `callback` will be the value at the time `mapObject` visits them.\n * Properties that are deleted before being visited are not visited.\n *\n * @grep function objectMap()\n * @grep function objMap()\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n * @return {?object}\n */\nfunction mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}\n\nmodule.exports = mapObject;\n\nrequire(\"./mock-modules\").register(\"mapObject\", module);\n",
"ReactStateSetters":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactStateSetters\n */\n\n\"use strict\";\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(component, funcReturningState) {\n    return function(a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\n\nmodule.exports = ReactStateSetters;\n\nrequire(\"./mock-modules\").register(\"ReactStateSetters\", module);\n",
"ReactUpdates":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n\"use strict\";\n\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactUpdates.ReactReconcileTransaction && batchingStrategy,\n    'ReactUpdates: must inject a reconcile transaction class and batching ' +\n    'strategy'\n  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));\n}\n\nvar NESTED_UPDATES = {\n  initialize: function() {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function() {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function() {\n    this.callbackQueue.reset();\n  },\n  close: function() {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction =\n    ReactUpdates.ReactReconcileTransaction.getPooled();\n}\n\nassign(\n  ReactUpdatesFlushTransaction.prototype,\n  Transaction.Mixin, {\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function() {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function(method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(\n      this,\n      this.reconcileTransaction.perform,\n      this.reconcileTransaction,\n      method,\n      scope,\n      a\n    );\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b);\n}\n\n/**\n * Array comparator for ReactComponents by owner depth\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountDepthComparator(c1, c2) {\n  return c1._mountDepth - c2._mountDepth;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    len === dirtyComponents.length,\n    'Expected flush transaction\\'s stored dirty-components length (%s) to ' +\n    'match dirty-components array length (%s).',\n    len,\n    dirtyComponents.length\n  ) : invariant(len === dirtyComponents.length));\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountDepthComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, ignore them\n    // TODO: Queue unmounts in the same list to avoid this happening at all\n    var component = dirtyComponents[i];\n    if (component.isMounted()) {\n      // If performUpdateIfNecessary happens to enqueue any new updates, we\n      // shouldn't execute the callbacks until the next render happens, so\n      // stash the callbacks first\n      var callbacks = component._pendingCallbacks;\n      component._pendingCallbacks = null;\n      component.performUpdateIfNecessary(transaction.reconcileTransaction);\n\n      if (callbacks) {\n        for (var j = 0; j < callbacks.length; j++) {\n          transaction.callbackQueue.enqueue(\n            callbacks[j],\n            component\n          );\n        }\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = ReactPerf.measure(\n  'ReactUpdates',\n  'flushBatchedUpdates',\n  function() {\n    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n    // array and perform any updates enqueued by mount-ready handlers (i.e.,\n    // componentDidUpdate) but we need to check here too in order to catch\n    // updates enqueued by setState callbacks and asap calls.\n    while (dirtyComponents.length || asapEnqueued) {\n      if (dirtyComponents.length) {\n        var transaction = ReactUpdatesFlushTransaction.getPooled();\n        transaction.perform(runBatchedUpdates, null, transaction);\n        ReactUpdatesFlushTransaction.release(transaction);\n      }\n\n      if (asapEnqueued) {\n        asapEnqueued = false;\n        var queue = asapCallbackQueue;\n        asapCallbackQueue = CallbackQueue.getPooled();\n        queue.notifyAll();\n        CallbackQueue.release(queue);\n      }\n    }\n  }\n);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component, callback) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !callback || typeof callback === \"function\",\n    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +\n    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +\n    'isn\\'t callable.'\n  ) : invariant(!callback || typeof callback === \"function\"));\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    ReactCurrentOwner.current == null,\n    'enqueueUpdate(): Render methods should be a pure function of props ' +\n    'and state; triggering nested component updates from render is not ' +\n    'allowed. If necessary, trigger nested updates in ' +\n    'componentDidUpdate.'\n  ) : null);\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);\n    return;\n  }\n\n  dirtyComponents.push(component);\n\n  if (callback) {\n    if (component._pendingCallbacks) {\n      component._pendingCallbacks.push(callback);\n    } else {\n      component._pendingCallbacks = [callback];\n    }\n  }\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    batchingStrategy.isBatchingUpdates,\n    'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' +\n    'updates are not being batched.'\n  ) : invariant(batchingStrategy.isBatchingUpdates));\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function(ReconcileTransaction) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReconcileTransaction,\n      'ReactUpdates: must provide a reconcile transaction class'\n    ) : invariant(ReconcileTransaction));\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function(_batchingStrategy) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      _batchingStrategy,\n      'ReactUpdates: must provide a batching strategy'\n    ) : invariant(_batchingStrategy));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof _batchingStrategy.batchedUpdates === 'function',\n      'ReactUpdates: must provide a batchedUpdates() function'\n    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof _batchingStrategy.isBatchingUpdates === 'boolean',\n      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'\n    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;\n\nrequire(\"./mock-modules\").register(\"ReactUpdates\", module);\n",
"LegacyImmutableObject":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LegacyImmutableObject\n * @typechecks\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar isNode = require(\"./isNode\");\nvar mergeHelpers = require(\"./mergeHelpers\");\n\nvar checkMergeObjectArgs = mergeHelpers.checkMergeObjectArgs;\nvar isTerminal = mergeHelpers.isTerminal;\n\n/**\n * Wrapper around JavaScript objects that provide a guarantee of immutability at\n * developer time when strict mode is used. The extra computations required to\n * enforce immutability is stripped out in production for performance reasons.\n */\nvar LegacyImmutableObject;\n\nfunction assertLegacyImmutableObject(immutableObject) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    immutableObject instanceof LegacyImmutableObject,\n    'LegacyImmutableObject: Attempted to set fields on an object that is not ' +\n    'an instance of LegacyImmutableObject.'\n  ) : invariant(immutableObject instanceof LegacyImmutableObject));\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  /**\n   * Constructs an instance of `LegacyImmutableObject`.\n   *\n   * @param {?object} initialProperties The initial set of properties.\n   * @constructor\n   */\n  LegacyImmutableObject = function LegacyImmutableObject(initialProperties) {\n    assign(this, initialProperties);\n    deepFreeze(this);\n  };\n\n  /**\n   * Checks if an object should be deep frozen. Instances of\n   * `LegacyImmutableObject` are assumed to have already been deep frozen.\n   *\n   * @param {*} object The object to check.\n   * @return {boolean} Whether or not deep freeze is needed.\n   */\n  var shouldRecurseFreeze = function(object) {\n    return (\n      typeof object === 'object' &&\n      !(object instanceof LegacyImmutableObject) &&\n      object !== null\n    );\n  };\n\n  /**\n   * Freezes the supplied object deeply.\n   *\n   * @param {*} object The object to freeze.\n   */\n  var deepFreeze = function(object) {\n    if (isNode(object)) {\n      return; // Don't try to freeze DOM nodes.\n    }\n    Object.freeze(object); // First freeze the object.\n    for (var prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        var field = object[prop];\n        if (shouldRecurseFreeze(field)) {\n          deepFreeze(field);\n        }\n      }\n    }\n  };\n\n  /**\n   * Returns a new LegacyImmutableObject that is identical to the supplied\n   * object but with the supplied changes, `put`.\n   *\n   * @param {LegacyImmutableObject} immutableObject Starting object.\n   * @param {?object} put Fields to merge into the object.\n   * @return {LegacyImmutableObject} The result of merging in `put` fields.\n   */\n  LegacyImmutableObject.set = function(immutableObject, put) {\n    assertLegacyImmutableObject(immutableObject);\n    var totalNewFields = assign({}, immutableObject, put);\n    return new LegacyImmutableObject(totalNewFields);\n  };\n\n} else {\n  /**\n   * Constructs an instance of `LegacyImmutableObject`.\n   *\n   * @param {?object} initialProperties The initial set of properties.\n   * @constructor\n   */\n  LegacyImmutableObject = function LegacyImmutableObject(initialProperties) {\n    assign(this, initialProperties);\n  };\n\n  /**\n   * Returns a new LegacyImmutableObject that is identical to the supplied\n   * object but with the supplied changes, `put`.\n   *\n   * @param {LegacyImmutableObject} immutableObject Starting object.\n   * @param {?object} put Fields to merge into the object.\n   * @return {LegacyImmutableObject} The result of merging in `put` fields.\n   */\n  LegacyImmutableObject.set = function(immutableObject, put) {\n    assertLegacyImmutableObject(immutableObject);\n    var newMap = new LegacyImmutableObject(immutableObject);\n    assign(newMap, put);\n    return newMap;\n  };\n}\n\n/**\n * Sugar for:\n * `LegacyImmutableObject.set(LegacyImmutableObject, {fieldName: putField})`.\n *\n * @param {LegacyImmutableObject} immutableObject Object on which to set field.\n * @param {string} fieldName Name of the field to set.\n * @param {*} putField Value of the field to set.\n * @return {LegacyImmutableObject} [description]\n */\nLegacyImmutableObject.setField = function(immutableObject, fieldName, putField) {\n  var put = {};\n  put[fieldName] = putField;\n  return LegacyImmutableObject.set(immutableObject, put);\n};\n\n/**\n * Returns a new LegacyImmutableObject that is identical to the supplied object\n * but with the supplied changes recursively applied.\n *\n * @param {LegacyImmutableObject} immutableObject Object on which to set fields.\n * @param {object} put Fields to merge into the object.\n * @return {LegacyImmutableObject} The result of merging in `put` fields.\n */\nLegacyImmutableObject.setDeep = function(immutableObject, put) {\n  assertLegacyImmutableObject(immutableObject);\n  return _setDeep(immutableObject, put);\n};\n\nfunction _setDeep(object, put) {\n  checkMergeObjectArgs(object, put);\n  var totalNewFields = {};\n\n  // To maintain the order of the keys, copy the base object's entries first.\n  var keys = Object.keys(object);\n  for (var ii = 0; ii < keys.length; ii++) {\n    var key = keys[ii];\n    if (!put.hasOwnProperty(key)) {\n      totalNewFields[key] = object[key];\n    } else if (isTerminal(object[key]) || isTerminal(put[key])) {\n      totalNewFields[key] = put[key];\n    } else {\n      totalNewFields[key] = _setDeep(object[key], put[key]);\n    }\n  }\n\n  // Apply any new keys that the base object didn't have.\n  var newKeys = Object.keys(put);\n  for (ii = 0; ii < newKeys.length; ii++) {\n    var newKey = newKeys[ii];\n    if (object.hasOwnProperty(newKey)) {\n      continue;\n    }\n    totalNewFields[newKey] = put[newKey];\n  }\n\n  return (object instanceof LegacyImmutableObject ||\n          put instanceof LegacyImmutableObject) ?\n    new LegacyImmutableObject(totalNewFields) :\n    totalNewFields;\n}\n\nmodule.exports = LegacyImmutableObject;\n\nrequire(\"./mock-modules\").register(\"LegacyImmutableObject\", module);\n",
"OrderedMap":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule OrderedMap\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar PREFIX = 'key:';\n\n/**\n * Utility to extract a backing object from an initialization `Array`, allowing\n * the caller to assist in resolving the unique ID for each entry via the\n * `keyExtractor` callback. The `keyExtractor` must extract non-empty strings or\n * numbers.\n * @param {Array<Object!>} arr Array of items.\n * @param {function} keyExtractor Extracts a unique key from each item.\n * @return {Object} Map from unique key to originating value that the key was\n * extracted from.\n * @throws Exception if the initialization array has duplicate extracted keys.\n */\nfunction extractObjectFromArray(arr, keyExtractor) {\n  var normalizedObj = {};\n  for (var i=0; i < arr.length; i++) {\n    var item = arr[i];\n    var key = keyExtractor(item);\n    assertValidPublicKey(key);\n    var normalizedKey = PREFIX + key;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !(normalizedKey in normalizedObj),\n      'OrderedMap: IDs returned by the key extraction function must be unique.'\n    ) : invariant(!(normalizedKey in normalizedObj)));\n    normalizedObj[normalizedKey] = item;\n  }\n  return normalizedObj;\n}\n\n/**\n * Utility class for mappings with ordering. This class is to be used in an\n * immutable manner. A `OrderedMap` is very much like the native JavaScript\n * object, where keys map to values via the `get()` function. Also, like the\n * native JavaScript object, there is an ordering associated with the mapping.\n * This class is helpful because it eliminates many of the pitfalls that come\n * with the native JavaScript ordered mappings. Specifically, there are\n * inconsistencies with numeric keys in some JavaScript implementations\n * (enumeration ordering). This class protects against those pitfalls and\n * provides functional utilities for dealing with these `OrderedMap`s.\n *\n * - TODO:\n * - orderedMergeExclusive: Merges mutually exclusive `OrderedMap`s.\n * - mapReverse().\n *\n * @class {OrderedMap}\n * @constructor {OrderedMap}\n * @param {Object} normalizedObj Object that is known to be a defensive copy of\n * caller supplied data. We require a defensive copy to guard against callers\n * mutating.  It is also assumed that the keys of `normalizedObj` have been\n * normalized and do not contain any numeric-appearing strings.\n * @param {number} computedLength The precomputed length of `_normalizedObj`\n * keys.\n * @private\n */\nfunction OrderedMapImpl(normalizedObj, computedLength) {\n  this._normalizedObj = normalizedObj;\n  this._computedPositions = null;\n  this.length = computedLength;\n}\n\n/**\n * Validates a \"public\" key - that is, one that the public facing API supplies.\n * The key is then normalized for internal storage. In order to be considered\n * valid, all keys must be non-empty, defined, non-null strings or numbers.\n *\n * @param {string?} key Validates that the key is suitable for use in a\n * `OrderedMap`.\n * @throws Error if key is not appropriate for use in `OrderedMap`.\n */\nfunction assertValidPublicKey(key) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    key !== '' && (typeof key === 'string' || typeof key === 'number'),\n    'OrderedMap: Key must be non-empty, non-null string or number.'\n  ) : invariant(key !== '' && (typeof key === 'string' || typeof key === 'number')));\n}\n\n/**\n * Validates that arguments to range operations are within the correct limits.\n *\n * @param {number} start Start of range.\n * @param {number} length Length of range.\n * @param {number} actualLen Actual length of range that should not be\n * exceeded.\n * @return {void} description\n */\nfunction assertValidRangeIndices(start, length, actualLen) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof start === 'number' &&\n    typeof length === 'number' &&\n    length >= 0 &&\n    start >= 0 &&\n    start + length <= actualLen,\n    'OrderedMap: `mapRange` and `forEachRange` expect non-negative start and ' +\n    'length arguments within the bounds of the instance.'\n  ) : invariant(typeof start === 'number' &&\n  typeof length === 'number' &&\n  length >= 0 &&\n  start >= 0 &&\n  start + length <= actualLen));\n}\n\n/**\n * Merges two \"normalized\" objects (objects who's key have been normalized) into\n * a `OrderedMap`.\n *\n * @param {Object} a Object of key value pairs.\n * @param {Object} b Object of key value pairs.\n * @return {OrderedMap} new `OrderedMap` that results in merging `a` and `b`.\n */\nfunction _fromNormalizedObjects(a, b) {\n  // Second optional, both must be plain JavaScript objects.\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    a && a.constructor === Object && (!b || b.constructor === Object),\n    'OrderedMap: Corrupted instance of OrderedMap detected.'\n  ) : invariant(a && a.constructor === Object && (!b || b.constructor === Object)));\n\n  var newSet = {};\n  var length = 0;\n  var key;\n  for (key in a) {\n    if (a.hasOwnProperty(key)) {\n      newSet[key] = a[key];\n      length++;\n    }\n  }\n\n  for (key in b) {\n    if (b.hasOwnProperty(key)) {\n      // Increment length if not already added via first object (a)\n      if (!(key in newSet)) {\n        length++;\n      }\n      newSet[key] = b[key];\n    }\n  }\n  return new OrderedMapImpl(newSet, length);\n}\n\n/**\n * Methods for `OrderedMap` instances.\n *\n * @lends OrderedMap.prototype\n * TODO: Make this data structure lazy, unify with LazyArray.\n * TODO: Unify this with ImmutableObject - it is to be used immutably.\n * TODO: If so, consider providing `fromObject` API.\n * TODO: Create faster implementation of merging/mapping from original Array,\n * without having to first create an object - simply for the sake of merging.\n */\nvar OrderedMapMethods = {\n\n  /**\n   * Returns whether or not a given key is present in the map.\n   *\n   * @param {string} key Valid string key to lookup membership for.\n   * @return {boolean} Whether or not `key` is a member of the map.\n   * @throws Error if provided known invalid key.\n   */\n  has: function(key) {\n    assertValidPublicKey(key);\n    var normalizedKey = PREFIX + key;\n    return normalizedKey in this._normalizedObj;\n  },\n\n  /**\n   * Returns the object for a given key, or `undefined` if not present. To\n   * distinguish a undefined entry vs not being in the set, use `has()`.\n   *\n   * @param {string} key String key to lookup the value for.\n   * @return {Object?} Object at key `key`, or undefined if not in map.\n   * @throws Error if provided known invalid key.\n   */\n  get: function(key) {\n    assertValidPublicKey(key);\n    var normalizedKey = PREFIX + key;\n    return this.has(key) ? this._normalizedObj[normalizedKey] : undefined;\n  },\n\n  /**\n   * Merges, appending new keys to the end of the ordering. Keys in `orderedMap`\n   * that are redundant with `this`, maintain the same ordering index that they\n   * had in `this`.  This is how standard JavaScript object merging would work.\n   * If you wish to prepend a `OrderedMap` to the beginning of another\n   * `OrderedMap` then simply reverse the order of operation. This is the analog\n   * to `merge(x, y)`.\n   *\n   * @param {OrderedMap} orderedMap OrderedMap to merge onto the end.\n   * @return {OrderedMap} New OrderedMap that represents the result of the\n   * merge.\n   */\n  merge: function(orderedMap) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      orderedMap instanceof OrderedMapImpl,\n      'OrderedMap.merge(...): Expected an OrderedMap instance.'\n    ) : invariant(orderedMap instanceof OrderedMapImpl));\n    return _fromNormalizedObjects(\n      this._normalizedObj,\n      orderedMap._normalizedObj\n    );\n  },\n\n  /**\n   * Functional map API. Returns a new `OrderedMap`.\n   *\n   * @param {Function} cb Callback to invoke for each item.\n   * @param {Object?=} context Context to invoke callback from.\n   * @return {OrderedMap} OrderedMap that results from mapping.\n   */\n  map: function(cb, context) {\n    return this.mapRange(cb, 0, this.length, context);\n  },\n\n  /**\n   * The callback `cb` is invoked with the arguments (item, key,\n   * indexInOriginal).\n   *\n   * @param {Function} cb Determines result for each item.\n   * @param {number} start Start index of map range.\n   * @param {end} end End index of map range.\n   * @param {*!?} context Context of callback invocation.\n   * @return {OrderedMap} OrderedMap resulting from mapping the range.\n   */\n  mapRange: function(cb, start, length, context) {\n    var thisSet = this._normalizedObj;\n    var newSet = {};\n    var i = 0;\n    assertValidRangeIndices(start, length, this.length);\n    var end = start + length - 1;\n    for (var key in thisSet) {\n      if (thisSet.hasOwnProperty(key)) {\n        if (i >= start) {\n          if (i > end) {\n            break;\n          }\n          var item = thisSet[key];\n          newSet[key] = cb.call(context, item, key.substr(PREFIX.length), i);\n        }\n        i++;\n      }\n    }\n    return new OrderedMapImpl(newSet, length);\n  },\n\n  /**\n   * Function filter API. Returns new `OrderedMap`.\n   *\n   * @param {Function} cb Callback to invoke for each item.\n   * @param {Object?=} context Context to invoke callback from.\n   * @return {OrderedMap} OrderedMap that results from filtering.\n   */\n  filter: function(cb, context) {\n    return this.filterRange(cb, 0, this.length, context);\n  },\n\n  /**\n   * The callback `cb` is invoked with the arguments (item, key,\n   * indexInOriginal).\n   *\n   * @param {Function} cb Returns true if item should be in result.\n   * @param {number} start Start index of filter range.\n   * @param {number} end End index of map range.\n   * @param {*!?} context Context of callback invocation.\n   * @return {OrderedMap} OrderedMap resulting from filtering the range.\n   */\n  filterRange: function(cb, start, length, context) {\n    var newSet = {};\n    var newSetLength = 0;\n    this.forEachRange(function(item, key, originalIndex) {\n      if (cb.call(context, item, key, originalIndex)) {\n        var normalizedKey = PREFIX + key;\n        newSet[normalizedKey] = item;\n        newSetLength++;\n      }\n    }, start, length);\n    return new OrderedMapImpl(newSet, newSetLength);\n  },\n\n  forEach: function(cb, context) {\n    this.forEachRange(cb, 0, this.length, context);\n  },\n\n  forEachRange: function(cb, start, length, context) {\n    assertValidRangeIndices(start, length, this.length);\n    var thisSet = this._normalizedObj;\n    var i = 0;\n    var end = start + length - 1;\n    for (var key in thisSet) {\n      if (thisSet.hasOwnProperty(key)) {\n        if (i >= start) {\n          if (i > end) {\n            break;\n          }\n          var item = thisSet[key];\n          cb.call(context, item, key.substr(PREFIX.length), i);\n        }\n        i++;\n      }\n    }\n  },\n\n  /**\n   * Even though `mapRange`/`forEachKeyRange` allow zero length mappings, we'll\n   * impose an additional restriction here that the length of mapping be greater\n   * than zero - the only reason is that there are many ways to express length\n   * zero in terms of two keys and that is confusing.\n   */\n  mapKeyRange: function(cb, startKey, endKey, context) {\n    var startIndex = this.indexOfKey(startKey);\n    var endIndex = this.indexOfKey(endKey);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      startIndex !== undefined && endIndex !== undefined,\n      'mapKeyRange must be given keys that are present.'\n    ) : invariant(startIndex !== undefined && endIndex !== undefined));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      endIndex >= startIndex,\n      'OrderedMap.mapKeyRange(...): `endKey` must not come before `startIndex`.'\n    ) : invariant(endIndex >= startIndex));\n    return this.mapRange(cb, startIndex, (endIndex - startIndex) + 1, context);\n  },\n\n  forEachKeyRange: function(cb, startKey, endKey, context) {\n    var startIndex = this.indexOfKey(startKey);\n    var endIndex = this.indexOfKey(endKey);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      startIndex !== undefined && endIndex !== undefined,\n      'forEachKeyRange must be given keys that are present.'\n    ) : invariant(startIndex !== undefined && endIndex !== undefined));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      endIndex >= startIndex,\n      'OrderedMap.forEachKeyRange(...): `endKey` must not come before ' +\n      '`startIndex`.'\n    ) : invariant(endIndex >= startIndex));\n    this.forEachRange(cb, startIndex, (endIndex - startIndex) + 1, context);\n  },\n\n  /**\n   * @param {number} pos Index to search for key at.\n   * @return {string|undefined} Either the key at index `pos` or undefined if\n   * not in map.\n   */\n  keyAtIndex: function(pos) {\n    var computedPositions = this._getOrComputePositions();\n    var keyAtPos = computedPositions.keyByIndex[pos];\n    return keyAtPos ? keyAtPos.substr(PREFIX.length) : undefined;\n  },\n\n  /**\n   * @param {string} key String key from which to find the next key.\n   * @return {string|undefined} Either the next key, or undefined if there is no\n   * next key.\n   * @throws Error if `key` is not in this `OrderedMap`.\n   */\n  keyAfter: function(key) {\n    return this.nthKeyAfter(key, 1);\n  },\n\n  /**\n   * @param {string} key String key from which to find the preceding key.\n   * @return {string|undefined} Either the preceding key, or undefined if there\n   * is no preceding.key.\n   * @throws Error if `key` is not in this `OrderedMap`.\n   */\n  keyBefore: function(key) {\n    return this.nthKeyBefore(key, 1);\n  },\n\n  /**\n   * @param {string} key String key from which to find a following key.\n   * @param {number} n Distance to scan forward after `key`.\n   * @return {string|undefined} Either the nth key after `key`, or undefined if\n   * there is no next key.\n   * @throws Error if `key` is not in this `OrderedMap`.\n   */\n  nthKeyAfter: function(key, n) {\n    var curIndex = this.indexOfKey(key);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      curIndex !== undefined,\n      'OrderedMap.nthKeyAfter: The key `%s` does not exist in this instance.',\n      key\n    ) : invariant(curIndex !== undefined));\n    return this.keyAtIndex(curIndex + n);\n  },\n\n  /**\n   * @param {string} key String key from which to find a preceding key.\n   * @param {number} n Distance to scan backwards before `key`.\n   * @return {string|undefined} Either the nth key before `key`, or undefined if\n   * there is no previous key.\n   * @throws Error if `key` is not in this `OrderedMap`.\n   */\n  nthKeyBefore: function(key, n) {\n    return this.nthKeyAfter(key, -n);\n  },\n\n  /**\n   * @param {string} key Key to find the index of.\n   * @return {number|undefined} Index of the provided key, or `undefined` if the\n   * key is not found.\n   */\n  indexOfKey: function(key) {\n    assertValidPublicKey(key);\n    var normalizedKey = PREFIX + key;\n    var computedPositions = this._getOrComputePositions();\n    var computedPosition = computedPositions.indexByKey[normalizedKey];\n    // Just writing it this way to make it clear this is intentional.\n    return computedPosition === undefined ? undefined : computedPosition;\n  },\n\n  /**\n   * @return {Array} An ordered array of this object's values.\n   */\n  toArray: function() {\n    var result = [];\n    var thisSet = this._normalizedObj;\n    for (var key in thisSet) {\n      if (thisSet.hasOwnProperty(key)) {\n        result.push(thisSet[key]);\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Finds the key at a given position, or indicates via `undefined` that that\n   * position does not exist in the `OrderedMap`. It is appropriate to return\n   * undefined, indicating that the key doesn't exist in the `OrderedMap`\n   * because `undefined` is not ever a valid `OrderedMap` key.\n   *\n   * @private\n   * @param {number} pos Position for which we're querying the name.\n   * @return {string?} Name of the item at position `pos`, or `undefined` if\n   * there is no item at that position.\n   */\n  _getOrComputePositions: function() {\n    // TODO: Entertain computing this at construction time in some less\n    // performance critical paths.\n    var computedPositions = this._computedPositions;\n    if (!computedPositions) {\n      this._computePositions();\n    }\n    return this._computedPositions;\n  },\n\n  /**\n   * Precomputes the index/key mapping for future lookup. Since `OrderedMap`s\n   * are immutable, there is only ever a need to perform this once.\n   * @private\n   */\n  _computePositions: function() {\n    this._computedPositions = {\n      keyByIndex: {},\n      indexByKey: {}\n    };\n    var keyByIndex = this._computedPositions.keyByIndex;\n    var indexByKey = this._computedPositions.indexByKey;\n    var index = 0;\n    var thisSet = this._normalizedObj;\n    for (var key in thisSet) {\n      if (thisSet.hasOwnProperty(key)) {\n        keyByIndex[index] = key;\n        indexByKey[key] = index;\n        index++;\n      }\n    }\n  }\n};\n\nassign(OrderedMapImpl.prototype, OrderedMapMethods);\n\nvar OrderedMap = {\n  from: function(orderedMap) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      orderedMap instanceof OrderedMapImpl,\n      'OrderedMap.from(...): Expected an OrderedMap instance.'\n    ) : invariant(orderedMap instanceof OrderedMapImpl));\n    return _fromNormalizedObjects(orderedMap._normalizedObj, null);\n  },\n\n  fromArray: function(arr, keyExtractor) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(arr),\n      'OrderedMap.fromArray(...): First argument must be an array.'\n    ) : invariant(Array.isArray(arr)));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof keyExtractor === 'function',\n      'OrderedMap.fromArray(...): Second argument must be a function used ' +\n      'to determine the unique key for each entry.'\n    ) : invariant(typeof keyExtractor === 'function'));\n    return new OrderedMapImpl(\n      extractObjectFromArray(arr, keyExtractor),\n      arr.length\n    );\n  }\n};\n\nmodule.exports = OrderedMap;\n\nrequire(\"./mock-modules\").register(\"OrderedMap\", module);\n",
"PooledClass":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function(copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function(a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function(a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fiveArgumentPooler = function(a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function(instance) {\n  var Klass = this;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance instanceof Klass,\n    'Trying to release an instance into a pool of a different type.'\n  ) : invariant(instance instanceof Klass));\n  if (instance.destructor) {\n    instance.destructor();\n  }\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function(CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;\n\nrequire(\"./mock-modules\").register(\"PooledClass\", module);\n",
"ReactChildren":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n\"use strict\";\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar traverseAllChildren = require(\"./traverseAllChildren\");\nvar warning = require(\"./warning\");\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar threeArgumentPooler = PooledClass.threeArgumentPooler;\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.forEachFunction = forEachFunction;\n  this.forEachContext = forEachContext;\n}\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(traverseContext, child, name, i) {\n  var forEachBookKeeping = traverseContext;\n  forEachBookKeeping.forEachFunction.call(\n    forEachBookKeeping.forEachContext, child, i);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc.\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext =\n    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, mapFunction, mapContext) {\n  this.mapResult = mapResult;\n  this.mapFunction = mapFunction;\n  this.mapContext = mapContext;\n}\nPooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);\n\nfunction mapSingleChildIntoContext(traverseContext, child, name, i) {\n  var mapBookKeeping = traverseContext;\n  var mapResult = mapBookKeeping.mapResult;\n\n  var keyUnique = !mapResult.hasOwnProperty(name);\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    keyUnique,\n    'ReactChildren.map(...): Encountered two children with the same key, ' +\n    '`%s`. Child keys must be unique; when two children share a key, only ' +\n    'the first child will be used.',\n    name\n  ) : null);\n\n  if (keyUnique) {\n    var mappedChild =\n      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);\n    mapResult[name] = mappedChild;\n  }\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * TODO: This may likely break any calls to `ReactChildren.map` that were\n * previously relying on the fact that we guarded against null children.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} mapFunction.\n * @param {*} mapContext Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var mapResult = {};\n  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n  return mapResult;\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name, i) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  count: countChildren\n};\n\nmodule.exports = ReactChildren;\n\nrequire(\"./mock-modules\").register(\"ReactChildren\", module);\n",
"Transaction":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Transaction\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM upates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function() {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (!this.wrapperInitData) {\n      this.wrapperInitData = [];\n    } else {\n      this.wrapperInitData.length = 0;\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function() {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} args... Arguments to pass to the method (optional).\n   *                           Helps prevent need to bind in many cases.\n   * @return Return value from `method`.\n   */\n  perform: function(method, scope, a, b, c, d, e, f) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !this.isInTransaction(),\n      'Transaction.perform(...): Cannot initialize a transaction when there ' +\n      'is already an outstanding transaction.'\n    ) : invariant(!this.isInTransaction()));\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {\n          }\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function(startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ?\n          wrapper.initialize.call(this) :\n          null;\n      } finally {\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function(startIndex) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isInTransaction(),\n      'Transaction.closeAll(): Cannot close transaction when none are open.'\n    ) : invariant(this.isInTransaction()));\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR) {\n          wrapper.close && wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {\n          }\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occured.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;\n\nrequire(\"./mock-modules\").register(\"Transaction\", module);\n",
"accumulateInto":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    next != null,\n    'accumulateInto(...): Accumulated items must not be null or undefined.'\n  ) : invariant(next != null));\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n\nrequire(\"./mock-modules\").register(\"accumulateInto\", module);\n",
"onlyChild":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection. The current implementation of this\n * function assumes that a single child gets passed without a wrapper, but the\n * purpose of this helper function is to abstract away the particular structure\n * of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactComponent} The first and only `ReactComponent` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(children),\n    'onlyChild must be passed a children with exactly one child.'\n  ) : invariant(ReactElement.isValidElement(children)));\n  return children;\n}\n\nmodule.exports = onlyChild;\n\nrequire(\"./mock-modules\").register(\"onlyChild\", module);\n",
"cloneWithProps":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule cloneWithProps\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar CHILDREN_PROP = keyOf({children: null});\n\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {object} child child component you'd like to clone\n * @param {object} props props you'd like to modify. They will be merged\n * as if you used `transferPropsTo()`.\n * @return {object} a clone of child with props merged in.\n */\nfunction cloneWithProps(child, props) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      !child.ref,\n      'You are calling cloneWithProps() on a child with a ref. This is ' +\n      'dangerous because you\\'re creating a new child which will not be ' +\n      'added as a ref to its parent.'\n    ) : null);\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\n  // Use `child.props.children` if it is provided.\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&\n      child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  }\n\n  // The current API doesn't retain _owner and _context, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;\n\nrequire(\"./mock-modules\").register(\"cloneWithProps\", module);\n",
"emptyObject":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyObject\n */\n\n\"use strict\";\n\nvar emptyObject = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n\nrequire(\"./mock-modules\").register(\"emptyObject\", module);\n",
"escapeTextForBrowser":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule escapeTextForBrowser\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ESCAPE_LOOKUP = {\n  \"&\": \"&amp;\",\n  \">\": \"&gt;\",\n  \"<\": \"&lt;\",\n  \"\\\"\": \"&quot;\",\n  \"'\": \"&#x27;\"\n};\n\nvar ESCAPE_REGEX = /[&><\"']/g;\n\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextForBrowser(text) {\n  return ('' + text).replace(ESCAPE_REGEX, escaper);\n}\n\nmodule.exports = escapeTextForBrowser;\n\nrequire(\"./mock-modules\").register(\"escapeTextForBrowser\", module);\n",
"joinClasses":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule joinClasses\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Combines multiple className strings into one.\n * http://jsperf.com/joinclasses-args-vs-array\n *\n * @param {...?string} classes\n * @return {string}\n */\nfunction joinClasses(className/*, ... */) {\n  if (!className) {\n    className = '';\n  }\n  var nextClass;\n  var argLength = arguments.length;\n  if (argLength > 1) {\n    for (var ii = 1; ii < argLength; ii++) {\n      nextClass = arguments[ii];\n      if (nextClass) {\n        className = (className ? className + ' ' : '') + nextClass;\n      }\n    }\n  }\n  return className;\n}\n\nmodule.exports = joinClasses;\n\nrequire(\"./mock-modules\").register(\"joinClasses\", module);\n",
"keyMirror":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyMirror\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function(obj) {\n  var ret = {};\n  var key;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    obj instanceof Object && !Array.isArray(obj),\n    'keyMirror(...): Argument must be an object.'\n  ) : invariant(obj instanceof Object && !Array.isArray(obj)));\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;\n\nrequire(\"./mock-modules\").register(\"keyMirror\", module);\n",
"memoizeStringOnly":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule memoizeStringOnly\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n *\n * @param {function} callback\n * @return {function}\n */\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function(string) {\n    if (cache.hasOwnProperty(string)) {\n      return cache[string];\n    } else {\n      return cache[string] = callback.call(this, string);\n    }\n  };\n}\n\nmodule.exports = memoizeStringOnly;\n\nrequire(\"./mock-modules\").register(\"memoizeStringOnly\", module);\n",
"sliceChildren":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule sliceChildren\n */\n\n\"use strict\";\n\nvar flattenChildren = require(\"./flattenChildren\");\n\n/**\n * Slice children that are typically specified as `props.children`. This version\n * of slice children ignores empty child components.\n *\n * @param {*} children The children set to filter.\n * @param {number} start The first zero-based index to include in the subset.\n * @param {?number} end The non-inclusive last index of the subset.\n * @return {object} mirrored array with mapped children\n */\nfunction sliceChildren(children, start, end) {\n  if (children == null) {\n    return children;\n  }\n\n  var slicedChildren = {};\n  var flattenedMap = flattenChildren(children);\n  var ii = 0;\n  for (var key in flattenedMap) {\n    if (!flattenedMap.hasOwnProperty(key)) {\n      continue;\n    }\n    var child = flattenedMap[key];\n    if (ii >= start) {\n      slicedChildren[key] = child;\n    }\n    ii++;\n    if (end != null && ii >= end) {\n      break;\n    }\n  }\n  return slicedChildren;\n}\n\nmodule.exports = sliceChildren;\n\nrequire(\"./mock-modules\").register(\"sliceChildren\", module);\n",
"traverseAllChildren":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that:\n * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.\n * 2. it('should fail when supplied duplicate key', function() {\n * 3. That a single child and an array with one item have the same key pattern.\n * });\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\n\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} key Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(\n    userProvidedKeyEscapeRegex,\n    userProvidedKeyEscaper\n  );\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!number} indexSoFar Number of children encountered until this point.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nvar traverseAllChildrenImpl =\n  function(children, nameSoFar, indexSoFar, callback, traverseContext) {\n    var nextName, nextIndex;\n    var subtreeCount = 0;  // Count of children found in the current subtree.\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        nextName = (\n          nameSoFar +\n          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +\n          getComponentKey(child, i)\n        );\n        nextIndex = indexSoFar + subtreeCount;\n        subtreeCount += traverseAllChildrenImpl(\n          child,\n          nextName,\n          nextIndex,\n          callback,\n          traverseContext\n        );\n      }\n    } else {\n      var type = typeof children;\n      var isOnlyChild = nameSoFar === '';\n      // If it's the only child, treat the name as if it was wrapped in an array\n      // so that it's consistent if the number of children grows\n      var storageName =\n        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;\n      if (children == null || type === 'boolean') {\n        // All of the above are perceived as null.\n        callback(traverseContext, null, storageName, indexSoFar);\n        subtreeCount = 1;\n      } else if (type === 'string' || type === 'number' ||\n                 ReactElement.isValidElement(children)) {\n        callback(traverseContext, children, storageName, indexSoFar);\n        subtreeCount = 1;\n      } else if (type === 'object') {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !children || children.nodeType !== 1,\n          'traverseAllChildren(...): Encountered an invalid child; DOM ' +\n          'elements are not valid children of React components.'\n        ) : invariant(!children || children.nodeType !== 1));\n        for (var key in children) {\n          if (children.hasOwnProperty(key)) {\n            nextName = (\n              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +\n              wrapUserProvidedKey(key) + SUBSEPARATOR +\n              getComponentKey(children[key], 0)\n            );\n            nextIndex = indexSoFar + subtreeCount;\n            subtreeCount += traverseAllChildrenImpl(\n              children[key],\n              nextName,\n              nextIndex,\n              callback,\n              traverseContext\n            );\n          }\n        }\n      }\n    }\n    return subtreeCount;\n  };\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;\n\nrequire(\"./mock-modules\").register(\"traverseAllChildren\", module);\n",
"ReactTextComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function(props) {\n  // This constructor and it's argument is currently used by mocks.\n};\n\nassign(ReactTextComponent.prototype, ReactComponent.Mixin, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n\n    var escapedText = escapeTextForBrowser(this.props);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps !== this.props) {\n      this.props = nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps\n      );\n    }\n  }\n\n});\n\nvar ReactTextComponentFactory = function(text) {\n  // Bypass validation and configuration\n  return new ReactElement(ReactTextComponent, null, null, null, null, text);\n};\n\nReactTextComponentFactory.type = ReactTextComponent;\n\nmodule.exports = ReactTextComponentFactory;\n\nrequire(\"./mock-modules\").register(\"ReactTextComponent\", module);\n",
"invariant":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n\nrequire(\"./mock-modules\").register(\"invariant\", module);\n",
"EventPluginUtils":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginUtils\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `Mount`: [required] Module that can convert between React dom IDs and\n *   actual node references.\n */\nvar injection = {\n  Mount: null,\n  injectMount: function(InjectedMount) {\n    injection.Mount = InjectedMount;\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        InjectedMount && InjectedMount.getNode,\n        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +\n        'is missing getNode.'\n      ) : invariant(InjectedMount && InjectedMount.getNode));\n    }\n  }\n};\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp ||\n         topLevelType === topLevelTypes.topTouchEnd ||\n         topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove ||\n         topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown ||\n         topLevelType === topLevelTypes.topTouchStart;\n}\n\n\nvar validateEventDispatches;\nif (\"production\" !== process.env.NODE_ENV) {\n  validateEventDispatches = function(event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ?\n      dispatchListeners.length :\n      dispatchListeners ? 1 : 0;\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      idsIsArr === listenersIsArr && IDsLen === listenersLen,\n      'EventPluginUtils: Invalid `event`.'\n    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));\n  };\n}\n\n/**\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is\n * provided. The `(listener,id)` pair effectively forms the \"dispatch\" but are\n * kept separate to conserve memory.\n */\nfunction forEachEventDispatch(event, cb) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      cb(event, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    cb(event, dispatchListeners, dispatchIDs);\n  }\n}\n\n/**\n * Default implementation of PluginModule.executeDispatch().\n * @param {SyntheticEvent} SyntheticEvent to handle\n * @param {function} Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, listener, domID) {\n  event.currentTarget = injection.Mount.getNode(domID);\n  var returnValue = listener(event, domID);\n  event.currentTarget = null;\n  return returnValue;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, executeDispatch) {\n  forEachEventDispatch(event, executeDispatch);\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return id of the first dispatch execution who's listener returns true, or\n * null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchIDs = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !Array.isArray(dispatchListener),\n    'executeDirectDispatch(...): Invalid `event`.'\n  ) : invariant(!Array.isArray(dispatchListener)));\n  var res = dispatchListener ?\n    dispatchListener(event, dispatchID) :\n    null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {bool} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatch: executeDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n  injection: injection,\n  useTouchEvents: false\n};\n\nmodule.exports = EventPluginUtils;\n\nrequire(\"./mock-modules\").register(\"EventPluginUtils\", module);\n",
"ReactContext":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactContext\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\n\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\nvar ReactContext = {\n\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: {},\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n   *\n   *    ));\n   *    return <div>{children}</div>;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array<ReactComponent>}\n   */\n  withContext: function(newContext, scopedCallback) {\n    var result;\n    var previousContext = ReactContext.current;\n    ReactContext.current = assign({}, previousContext, newContext);\n    try {\n      result = scopedCallback();\n    } finally {\n      ReactContext.current = previousContext;\n    }\n    return result;\n  }\n\n};\n\nmodule.exports = ReactContext;\n\nrequire(\"./mock-modules\").register(\"ReactContext\", module);\n",
"ReactElementValidator":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar warning = require(\"./warning\");\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {\n  'react_key_warning': {},\n  'react_numeric_key_warning': {}\n};\nvar ownerHasMonitoredObjectMap = {};\n\nvar loggedTypeFailures = {};\n\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\n\n/**\n * Gets the current owner's displayName for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\nfunction getCurrentOwnerDisplayName() {\n  var current = ReactCurrentOwner.current;\n  return current && current.constructor.displayName || undefined;\n}\n\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction validateExplicitKey(component, parentType) {\n  if (component._store.validated || component.key != null) {\n    return;\n  }\n  component._store.validated = true;\n\n  warnAndMonitorForKeyUse(\n    'react_key_warning',\n    'Each child in an array should have a unique \"key\" prop.',\n    component,\n    parentType\n  );\n}\n\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction validatePropertyKey(name, component, parentType) {\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {\n    return;\n  }\n  warnAndMonitorForKeyUse(\n    'react_numeric_key_warning',\n    'Child objects should have non-numeric keys so ordering is preserved.',\n    component,\n    parentType\n  );\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} warningID The id used when logging.\n * @param {string} message The base warning that gets output.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction warnAndMonitorForKeyUse(warningID, message, component, parentType) {\n  var ownerName = getCurrentOwnerDisplayName();\n  var parentName = parentType.displayName;\n\n  var useName = ownerName || parentName;\n  var memoizer = ownerHasKeyUseWarning[warningID];\n  if (memoizer.hasOwnProperty(useName)) {\n    return;\n  }\n  memoizer[useName] = true;\n\n  message += ownerName ?\n    (\" Check the render method of \" + ownerName + \".\") :\n    (\" Check the renderComponent call using <\" + parentName + \">.\");\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwnerName = null;\n  if (component._owner && component._owner !== ReactCurrentOwner.current) {\n    // Name of the component that originally created this child.\n    childOwnerName = component._owner.constructor.displayName;\n\n    message += (\" It was passed a child from \" + childOwnerName + \".\");\n  }\n\n  message += ' See http://fb.me/react-warning-keys for more information.';\n  monitorCodeUse(warningID, {\n    component: useName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n\n/**\n * Log that we're using an object map. We're considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\nfunction monitorUseOfObjectMap() {\n  var currentName = getCurrentOwnerDisplayName() || '';\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasMonitoredObjectMap[currentName] = true;\n  monitorCodeUse('react_object_map_children');\n}\n\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @param {*} parentType component's parent's type.\n * @return {boolean}\n */\nfunction validateChildKeys(component, parentType) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(component)) {\n    // This component was passed in a valid location.\n    component._store.validated = true;\n  } else if (component && typeof component === 'object') {\n    monitorUseOfObjectMap();\n    for (var name in component) {\n      validatePropertyKey(name, component[name], parentType);\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        // This will soon use the warning module\n        monitorCodeUse(\n          'react_failed_descriptor_type_check',\n          { message: error.message }\n        );\n      }\n    }\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function(type, props, children) {\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      type != null,\n      'React.createElement: type should not be null or undefined. It should ' +\n        'be a string (for DOM elements) or a ReactClass (for composite ' +\n        'components).'\n    ) : null);\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n\n    if (type) {\n      var name = type.displayName;\n      if (type.propTypes) {\n        checkPropTypes(\n          name,\n          type.propTypes,\n          element.props,\n          ReactPropTypeLocations.prop\n        );\n      }\n      if (type.contextTypes) {\n        checkPropTypes(\n          name,\n          type.contextTypes,\n          element._context,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return element;\n  },\n\n  createFactory: function(type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(\n      null,\n      type\n    );\n    validatedFactory.type = type;\n    return validatedFactory;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;\n\nrequire(\"./mock-modules\").register(\"ReactElementValidator\", module);\n",
"ReactLegacyElement":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactLegacyElement\n */\n\n\"use strict\";\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar invariant = require(\"./invariant\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar warning = require(\"./warning\");\n\nvar legacyFactoryLogs = {};\nfunction warnForLegacyFactoryCall() {\n  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {\n    return;\n  }\n  var owner = ReactCurrentOwner.current;\n  var name = owner && owner.constructor ? owner.constructor.displayName : '';\n  if (!name) {\n    name = 'Something';\n  }\n  if (legacyFactoryLogs.hasOwnProperty(name)) {\n    return;\n  }\n  legacyFactoryLogs[name] = true;\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    false,\n    name + ' is calling a React component directly. ' +\n    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'\n  ) : null);\n  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });\n}\n\nfunction warnForPlainFunctionType(type) {\n  var isReactClass =\n    type.prototype &&\n    typeof type.prototype.mountComponent === 'function' &&\n    typeof type.prototype.receiveComponent === 'function';\n  if (isReactClass) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'Did not expect to get a React class here. Use `Component` instead ' +\n      'of `Component.type` or `this.constructor`.'\n    ) : null);\n  } else {\n    if (!type._reactWarnedForThisType) {\n      try {\n        type._reactWarnedForThisType = true;\n      } catch (x) {\n        // just incase this is a frozen object or some special object\n      }\n      monitorCodeUse(\n        'react_non_component_in_jsx',\n        { version: 3, name: type.name }\n      );\n    }\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'This JSX uses a plain function. Only React components are ' +\n      'valid in React\\'s JSX transform.'\n    ) : null);\n  }\n}\n\nfunction warnForNonLegacyFactory(type) {\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    false,\n    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +\n    'Use the string \"' + type.type + '\" instead.'\n  ) : null);\n}\n\n/**\n * Transfer static properties from the source to the target. Functions are\n * rebound to have this reflect the original source.\n */\nfunction proxyStaticMethods(target, source) {\n  if (typeof source !== 'function') {\n    return;\n  }\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      var value = source[key];\n      if (typeof value === 'function') {\n        var bound = value.bind(source);\n        // Copy any properties defined on the function, such as `isRequired` on\n        // a PropTypes validator.\n        for (var k in value) {\n          if (value.hasOwnProperty(k)) {\n            bound[k] = value[k];\n          }\n        }\n        target[key] = bound;\n      } else {\n        target[key] = value;\n      }\n    }\n  }\n}\n\n// We use an object instead of a boolean because booleans are ignored by our\n// mocking libraries when these factories gets mocked.\nvar LEGACY_MARKER = {};\nvar NON_LEGACY_MARKER = {};\n\nvar ReactLegacyElementFactory = {};\n\nReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {\n  var legacyCreateFactory = function(type) {\n    if (typeof type !== 'function') {\n      // Non-function types cannot be legacy factories\n      return createFactory(type);\n    }\n\n    if (type.isReactNonLegacyFactory) {\n      // This is probably a factory created by ReactDOM we unwrap it to get to\n      // the underlying string type. It shouldn't have been passed here so we\n      // warn.\n      if (\"production\" !== process.env.NODE_ENV) {\n        warnForNonLegacyFactory(type);\n      }\n      return createFactory(type.type);\n    }\n\n    if (type.isReactLegacyFactory) {\n      // This is probably a legacy factory created by ReactCompositeComponent.\n      // We unwrap it to get to the underlying class.\n      return createFactory(type.type);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      warnForPlainFunctionType(type);\n    }\n\n    // Unless it's a legacy factory, then this is probably a plain function,\n    // that is expecting to be invoked by JSX. We can just return it as is.\n    return type;\n  };\n  return legacyCreateFactory;\n};\n\nReactLegacyElementFactory.wrapCreateElement = function(createElement) {\n  var legacyCreateElement = function(type, props, children) {\n    if (typeof type !== 'function') {\n      // Non-function types cannot be legacy factories\n      return createElement.apply(this, arguments);\n    }\n\n    var args;\n\n    if (type.isReactNonLegacyFactory) {\n      // This is probably a factory created by ReactDOM we unwrap it to get to\n      // the underlying string type. It shouldn't have been passed here so we\n      // warn.\n      if (\"production\" !== process.env.NODE_ENV) {\n        warnForNonLegacyFactory(type);\n      }\n      args = Array.prototype.slice.call(arguments, 0);\n      args[0] = type.type;\n      return createElement.apply(this, args);\n    }\n\n    if (type.isReactLegacyFactory) {\n      // This is probably a legacy factory created by ReactCompositeComponent.\n      // We unwrap it to get to the underlying class.\n      if (type._isMockFunction) {\n        // If this is a mock function, people will expect it to be called. We\n        // will actually call the original mock factory function instead. This\n        // future proofs unit testing that assume that these are classes.\n        type.type._mockedReactClassConstructor = type;\n      }\n      args = Array.prototype.slice.call(arguments, 0);\n      args[0] = type.type;\n      return createElement.apply(this, args);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      warnForPlainFunctionType(type);\n    }\n\n    // This is being called with a plain function we should invoke it\n    // immediately as if this was used with legacy JSX.\n    return type.apply(null, Array.prototype.slice.call(arguments, 1));\n  };\n  return legacyCreateElement;\n};\n\nReactLegacyElementFactory.wrapFactory = function(factory) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof factory === 'function',\n    'This is suppose to accept a element factory'\n  ) : invariant(typeof factory === 'function'));\n  var legacyElementFactory = function(config, children) {\n    // This factory should not be called when JSX is used. Use JSX instead.\n    if (\"production\" !== process.env.NODE_ENV) {\n      warnForLegacyFactoryCall();\n    }\n    return factory.apply(this, arguments);\n  };\n  proxyStaticMethods(legacyElementFactory, factory.type);\n  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;\n  legacyElementFactory.type = factory.type;\n  return legacyElementFactory;\n};\n\n// This is used to mark a factory that will remain. E.g. we're allowed to call\n// it as a function. However, you're not suppose to pass it to createElement\n// or createFactory, so it will warn you if you do.\nReactLegacyElementFactory.markNonLegacyFactory = function(factory) {\n  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;\n  return factory;\n};\n\n// Checks if a factory function is actually a legacy factory pretending to\n// be a class.\nReactLegacyElementFactory.isValidFactory = function(factory) {\n  // TODO: This will be removed and moved into a class validator or something.\n  return typeof factory === 'function' &&\n    factory.isReactLegacyFactory === LEGACY_MARKER;\n};\n\nReactLegacyElementFactory.isValidClass = function(factory) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'isValidClass is deprecated and will be removed in a future release. ' +\n      'Use a more specific validator instead.'\n    ) : null);\n  }\n  return ReactLegacyElementFactory.isValidFactory(factory);\n};\n\nReactLegacyElementFactory._isLegacyCallWarningEnabled = true;\n\nmodule.exports = ReactLegacyElementFactory;\n\nrequire(\"./mock-modules\").register(\"ReactLegacyElement\", module);\n",
"ReactPerf":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function(objName, fnName, func) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var measuredFunc = null;\n      var wrapper = function() {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function(measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;\n\nrequire(\"./mock-modules\").register(\"ReactPerf\", module);\n",
"deprecated":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule deprecated\n */\n\nvar assign = require(\"./Object.assign\");\nvar warning = require(\"./warning\");\n\n/**\n * This will log a single deprecation notice per function and forward the call\n * on to the new API.\n *\n * @param {string} namespace The namespace of the call, eg 'React'\n * @param {string} oldName The old function name, eg 'renderComponent'\n * @param {string} newName The new function name, eg 'render'\n * @param {*} ctx The context this forwarded call should run in\n * @param {function} fn The function to forward on to\n * @return {*} Will be the value as returned from `fn`\n */\nfunction deprecated(namespace, oldName, newName, ctx, fn) {\n  var warned = false;\n  if (\"production\" !== process.env.NODE_ENV) {\n    var newFn = function() {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        warned,\n        (namespace + \".\" + oldName + \" will be deprecated in a future version. \") +\n        (\"Use \" + namespace + \".\" + newName + \" instead.\")\n      ) : null);\n      warned = true;\n      return fn.apply(ctx, arguments);\n    };\n    newFn.displayName = (namespace + \"_\" + oldName);\n    // We need to make sure all properties of the original fn are copied over.\n    // In particular, this is needed to support PropTypes\n    return assign(newFn, fn);\n  }\n\n  return fn;\n}\n\nmodule.exports = deprecated;\n\nrequire(\"./mock-modules\").register(\"deprecated\", module);\n",
"ReactCSSTransitionGroupChild":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroupChild\n */\n\n\"use strict\";\n\nvar React = require(\"./React\");\n\nvar CSSCore = require(\"./CSSCore\");\nvar ReactTransitionEvents = require(\"./ReactTransitionEvents\");\n\nvar onlyChild = require(\"./onlyChild\");\n\n// We don't remove the element from the DOM until we receive an animationend or\n// transitionend event. If the user screws up and forgets to add an animation\n// their node will be stuck in the DOM forever, so we detect if an animation\n// does not start and if it doesn't, we just call the end listener immediately.\nvar TICK = 17;\nvar NO_EVENT_TIMEOUT = 5000;\n\nvar noEventListener = null;\n\n\nif (\"production\" !== process.env.NODE_ENV) {\n  noEventListener = function() {\n    console.warn(\n      'transition(): tried to perform an animation without ' +\n      'an animationend or transitionend event after timeout (' +\n      NO_EVENT_TIMEOUT + 'ms). You should either disable this ' +\n      'transition in JS or add a CSS animation/transition.'\n    );\n  };\n}\n\nvar ReactCSSTransitionGroupChild = React.createClass({\n  displayName: 'ReactCSSTransitionGroupChild',\n\n  transition: function(animationType, finishCallback) {\n    var node = this.getDOMNode();\n    var className = this.props.name + '-' + animationType;\n    var activeClassName = className + '-active';\n    var noEventTimeout = null;\n\n    var endListener = function(e) {\n      if (e && e.target !== node) {\n        return;\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        clearTimeout(noEventTimeout);\n      }\n\n      CSSCore.removeClass(node, className);\n      CSSCore.removeClass(node, activeClassName);\n\n      ReactTransitionEvents.removeEndEventListener(node, endListener);\n\n      // Usually this optional callback is used for informing an owner of\n      // a leave animation and telling it to remove the child.\n      finishCallback && finishCallback();\n    };\n\n    ReactTransitionEvents.addEndEventListener(node, endListener);\n\n    CSSCore.addClass(node, className);\n\n    // Need to do this to actually trigger a transition.\n    this.queueClass(activeClassName);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);\n    }\n  },\n\n  queueClass: function(className) {\n    this.classNameQueue.push(className);\n\n    if (!this.timeout) {\n      this.timeout = setTimeout(this.flushClassNameQueue, TICK);\n    }\n  },\n\n  flushClassNameQueue: function() {\n    if (this.isMounted()) {\n      this.classNameQueue.forEach(\n        CSSCore.addClass.bind(CSSCore, this.getDOMNode())\n      );\n    }\n    this.classNameQueue.length = 0;\n    this.timeout = null;\n  },\n\n  componentWillMount: function() {\n    this.classNameQueue = [];\n  },\n\n  componentWillUnmount: function() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n  },\n\n  componentWillEnter: function(done) {\n    if (this.props.enter) {\n      this.transition('enter', done);\n    } else {\n      done();\n    }\n  },\n\n  componentWillLeave: function(done) {\n    if (this.props.leave) {\n      this.transition('leave', done);\n    } else {\n      done();\n    }\n  },\n\n  render: function() {\n    return onlyChild(this.props.children);\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroupChild;\n\nrequire(\"./mock-modules\").register(\"ReactCSSTransitionGroupChild\", module);\n",
"containsNode":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\nvar isTextNode = require(\"./isTextNode\");\n\n/*jslint bitwise:true */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if (outerNode.contains) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n\nrequire(\"./mock-modules\").register(\"containsNode\", module);\n",
"getReactRootElementInContainer":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getReactRootElementInContainer\n */\n\n\"use strict\";\n\nvar DOC_NODE_TYPE = 9;\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n *                                           a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nmodule.exports = getReactRootElementInContainer;\n\nrequire(\"./mock-modules\").register(\"getReactRootElementInContainer\", module);\n",
"shouldUpdateReactComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shouldUpdateReactComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  if (prevElement && nextElement &&\n      prevElement.type === nextElement.type &&\n      prevElement.key === nextElement.key &&\n      prevElement._owner === nextElement._owner) {\n    return true;\n  }\n  return false;\n}\n\nmodule.exports = shouldUpdateReactComponent;\n\nrequire(\"./mock-modules\").register(\"shouldUpdateReactComponent\", module);\n",
"warning":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));\n    }\n  };\n}\n\nmodule.exports = warning;\n\nrequire(\"./mock-modules\").register(\"warning\", module);\n",
"forEachAccumulated":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule forEachAccumulated\n */\n\n\"use strict\";\n\n/**\n * @param {array} an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\nvar forEachAccumulated = function(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n};\n\nmodule.exports = forEachAccumulated;\n\nrequire(\"./mock-modules\").register(\"forEachAccumulated\", module);\n",
"SyntheticUIEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticUIEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getEventTarget = require(\"./getEventTarget\");\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: function(event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target = getEventTarget(event);\n    if (target != null && target.window === target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc = target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function(event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports = SyntheticUIEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticUIEvent\", module);\n",
"TouchEventUtils":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TouchEventUtils\n */\n\nvar TouchEventUtils = {\n  /**\n   * Utility function for common case of extracting out the primary touch from a\n   * touch event.\n   * - `touchEnd` events usually do not have the `touches` property.\n   *   http://stackoverflow.com/questions/3666929/\n   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed\n   *\n   * @param {Event} nativeEvent Native event that may or may not be a touch.\n   * @return {TouchesObject?} an object with pageX and pageY or null.\n   */\n  extractSingleTouch: function(nativeEvent) {\n    var touches = nativeEvent.touches;\n    var changedTouches = nativeEvent.changedTouches;\n    var hasTouches = touches && touches.length > 0;\n    var hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n    return !hasTouches && hasChangedTouches ? changedTouches[0] :\n           hasTouches ? touches[0] :\n           nativeEvent;\n  }\n};\n\nmodule.exports = TouchEventUtils;\n\nrequire(\"./mock-modules\").register(\"TouchEventUtils\", module);\n",
"ViewportMetrics":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewportMetrics\n */\n\n\"use strict\";\n\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n\nvar ViewportMetrics = {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function() {\n    var scrollPosition = getUnboundedScrollPosition(window);\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;\n    ViewportMetrics.currentScrollTop = scrollPosition.y;\n  }\n\n};\n\nmodule.exports = ViewportMetrics;\n\nrequire(\"./mock-modules\").register(\"ViewportMetrics\", module);\n",
"ReactEventEmitterMixin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n\"use strict\";\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue();\n}\n\nvar ReactEventEmitterMixin = {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events = EventPluginHub.extractEvents(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;\n\nrequire(\"./mock-modules\").register(\"ReactEventEmitterMixin\", module);\n",
"SyntheticMouseEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticMouseEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\nvar ViewportMetrics = require(\"./ViewportMetrics\");\n\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function(event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button = event.button;\n    if ('which' in event) {\n      return button;\n    }\n    // IE<9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button === 2 ? 2 : button === 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function(event) {\n    return event.relatedTarget || (\n      event.fromElement === event.srcElement ?\n        event.toElement :\n        event.fromElement\n    );\n  },\n  // \"Proprietary\" Interface.\n  pageX: function(event) {\n    return 'pageX' in event ?\n      event.pageX :\n      event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function(event) {\n    return 'pageY' in event ?\n      event.pageY :\n      event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports = SyntheticMouseEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticMouseEvent\", module);\n",
"isTextInputElement":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextInputElement\n */\n\n\"use strict\";\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  'color': true,\n  'date': true,\n  'datetime': true,\n  'datetime-local': true,\n  'email': true,\n  'month': true,\n  'number': true,\n  'password': true,\n  'range': true,\n  'search': true,\n  'tel': true,\n  'text': true,\n  'time': true,\n  'url': true,\n  'week': true\n};\n\nfunction isTextInputElement(elem) {\n  return elem && (\n    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||\n    elem.nodeName === 'TEXTAREA'\n  );\n}\n\nmodule.exports = isTextInputElement;\n\nrequire(\"./mock-modules\").register(\"isTextInputElement\", module);\n",
"ReactRootIndex":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRootIndex\n * @typechecks\n */\n\n\"use strict\";\n\nvar ReactRootIndexInjection = {\n  /**\n   * @param {function} _createReactRootIndex\n   */\n  injectCreateReactRootIndex: function(_createReactRootIndex) {\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;\n  }\n};\n\nvar ReactRootIndex = {\n  createReactRootIndex: null,\n  injection: ReactRootIndexInjection\n};\n\nmodule.exports = ReactRootIndex;\n\nrequire(\"./mock-modules\").register(\"ReactRootIndex\", module);\n",
"SyntheticClipboardEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function(event) {\n    return (\n      'clipboardData' in event ?\n        event.clipboardData :\n        window.clipboardData\n    );\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;\n\n\nrequire(\"./mock-modules\").register(\"SyntheticClipboardEvent\", module);\n",
"SyntheticFocusEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticFocusEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports = SyntheticFocusEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticFocusEvent\", module);\n",
"SyntheticKeyboardEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\nvar getEventCharCode = require(\"./getEventCharCode\");\nvar getEventKey = require(\"./getEventKey\");\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticKeyboardEvent\", module);\n",
"SyntheticDragEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticDragEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports = SyntheticDragEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticDragEvent\", module);\n",
"SyntheticTouchEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTouchEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports = SyntheticTouchEvent;\n\nrequire(\"./mock-modules\").register(\"SyntheticTouchEvent\", module);\n",
"getEventCharCode":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventCharCode\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nmodule.exports = getEventCharCode;\n\nrequire(\"./mock-modules\").register(\"getEventCharCode\", module);\n",
"getEventTarget":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventTarget\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nmodule.exports = getEventTarget;\n\nrequire(\"./mock-modules\").register(\"getEventTarget\", module);\n",
"adler32":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n/* jslint bitwise:true */\n\n\"use strict\";\n\nvar MOD = 65521;\n\n// This is a clean-room implementation of adler32 designed for detecting\n// if markup is not what we expect it to be. It does not need to be\n// cryptographically strong, only reasonably good at detecting if markup\n// generated on the server is different than that on the client.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  for (var i = 0; i < data.length; i++) {\n    a = (a + data.charCodeAt(i)) % MOD;\n    b = (b + a) % MOD;\n  }\n  return a | (b << 16);\n}\n\nmodule.exports = adler32;\n\nrequire(\"./mock-modules\").register(\"adler32\", module);\n",
"CallbackQueue":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n\"use strict\";\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function(callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function() {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        callbacks.length === contexts.length,\n        \"Mismatched list of contexts in callback queue\"\n      ) : invariant(callbacks.length === contexts.length));\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0, l = callbacks.length; i < l; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function() {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function() {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;\n\nrequire(\"./mock-modules\").register(\"CallbackQueue\", module);\n",
"ReactInputSelection":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n\"use strict\";\n\nvar ReactDOMSelection = require(\"./ReactDOMSelection\");\n\nvar containsNode = require(\"./containsNode\");\nvar focusNode = require(\"./focusNode\");\nvar getActiveElement = require(\"./getActiveElement\");\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function(elem) {\n    return elem && (\n      (elem.nodeName === 'INPUT' && elem.type === 'text') ||\n      elem.nodeName === 'TEXTAREA' ||\n      elem.contentEditable === 'true'\n    );\n  },\n\n  getSelectionInformation: function() {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange:\n          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?\n          ReactInputSelection.getSelection(focusedElem) :\n          null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function(priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem &&\n        isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(\n          priorFocusedElem,\n          priorSelectionRange\n        );\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function(input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {start: 0, end: 0};\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function(input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n\nrequire(\"./mock-modules\").register(\"ReactInputSelection\", module);\n",
"ReactPutListenerQueue":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPutListenerQueue\n */\n\n\"use strict\";\n\nvar PooledClass = require(\"./PooledClass\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar assign = require(\"./Object.assign\");\n\nfunction ReactPutListenerQueue() {\n  this.listenersToPut = [];\n}\n\nassign(ReactPutListenerQueue.prototype, {\n  enqueuePutListener: function(rootNodeID, propKey, propValue) {\n    this.listenersToPut.push({\n      rootNodeID: rootNodeID,\n      propKey: propKey,\n      propValue: propValue\n    });\n  },\n\n  putListeners: function() {\n    for (var i = 0; i < this.listenersToPut.length; i++) {\n      var listenerToPut = this.listenersToPut[i];\n      ReactBrowserEventEmitter.putListener(\n        listenerToPut.rootNodeID,\n        listenerToPut.propKey,\n        listenerToPut.propValue\n      );\n    }\n  },\n\n  reset: function() {\n    this.listenersToPut.length = 0;\n  },\n\n  destructor: function() {\n    this.reset();\n  }\n});\n\nPooledClass.addPoolingTo(ReactPutListenerQueue);\n\nmodule.exports = ReactPutListenerQueue;\n\nrequire(\"./mock-modules\").register(\"ReactPutListenerQueue\", module);\n",
"ReactServerRenderingTransaction":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n\"use strict\";\n\nvar PooledClass = require(\"./PooledClass\");\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  PUT_LISTENER_QUEUEING,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap proceedures.\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\n\n\nassign(\n  ReactServerRenderingTransaction.prototype,\n  Transaction.Mixin,\n  Mixin\n);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;\n\nrequire(\"./mock-modules\").register(\"ReactServerRenderingTransaction\", module);\n",
"CompositionEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar useCompositionEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\nvar useFallbackData = (\n  !useCompositionEvent ||\n  (\n    'documentMode' in document &&\n    document.documentMode > 8 &&\n    document.documentMode <= 11\n  )\n);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText = function() {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData = function() {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n\n  return endValue.substr(\n    prefixLength,\n    endValue.length - suffixLength - prefixLength\n  );\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n    }\n\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition && eventType === eventTypes.compositionStart) {\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      } else if (eventType === eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data = currentComposition.getData();\n          currentComposition = null;\n        }\n      }\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(\n        eventType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\n\nmodule.exports = CompositionEventPlugin;\n\nrequire(\"./mock-modules\").register(\"CompositionEventPlugin\", module);\n",
"BeforeInputEventPlugin":"/**\n * Copyright 2013 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar canUseTextInputEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'TextEvent' in window &&\n  !('documentMode' in document || isPresto())\n);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return (\n    typeof opera === 'object' &&\n    typeof opera.version === 'function' &&\n    parseInt(opera.version(), 10) <= 12\n  );\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBeforeInput: null}),\n      captured: keyOf({onBeforeInputCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topTextInput,\n      topLevelTypes.topPaste\n    ]\n  }\n};\n\n// Track characters inserted via keypress and composition events.\nvar fallbackChars = null;\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n  );\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var chars;\n\n    if (canUseTextInputEvent) {\n      switch (topLevelType) {\n        case topLevelTypes.topKeyPress:\n          /**\n           * If native `textInput` events are available, our goal is to make\n           * use of them. However, there is a special case: the spacebar key.\n           * In Webkit, preventing default on a spacebar `textInput` event\n           * cancels character insertion, but it *also* causes the browser\n           * to fall back to its default spacebar behavior of scrolling the\n           * page.\n           *\n           * Tracking at:\n           * https://code.google.com/p/chromium/issues/detail?id=355103\n           *\n           * To avoid this issue, use the keypress event as if no `textInput`\n           * event is available.\n           */\n          var which = nativeEvent.which;\n          if (which !== SPACEBAR_CODE) {\n            return;\n          }\n\n          hasSpaceKeypress = true;\n          chars = SPACEBAR_CHAR;\n          break;\n\n        case topLevelTypes.topTextInput:\n          // Record the characters to be added to the DOM.\n          chars = nativeEvent.data;\n\n          // If it's a spacebar character, assume that we have already handled\n          // it at the keypress level and bail immediately. Android Chrome\n          // doesn't give us keycodes, so we need to blacklist it.\n          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n            return;\n          }\n\n          // Otherwise, carry on.\n          break;\n\n        default:\n          // For other native event types, do nothing.\n          return;\n      }\n    } else {\n      switch (topLevelType) {\n        case topLevelTypes.topPaste:\n          // If a paste event occurs after a keypress, throw out the input\n          // chars. Paste events should not lead to BeforeInput events.\n          fallbackChars = null;\n          break;\n        case topLevelTypes.topKeyPress:\n          /**\n           * As of v27, Firefox may fire keypress events even when no character\n           * will be inserted. A few possibilities:\n           *\n           * - `which` is `0`. Arrow keys, Esc key, etc.\n           *\n           * - `which` is the pressed key code, but no char is available.\n           *   Ex: 'AltGr + d` in Polish. There is no modified character for\n           *   this key combination and no character is inserted into the\n           *   document, but FF fires the keypress for char code `100` anyway.\n           *   No `input` event will occur.\n           *\n           * - `which` is the pressed key code, but a command combination is\n           *   being used. Ex: `Cmd+C`. No character is inserted, and no\n           *   `input` event will occur.\n           */\n          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n            fallbackChars = String.fromCharCode(nativeEvent.which);\n          }\n          break;\n        case topLevelTypes.topCompositionEnd:\n          fallbackChars = nativeEvent.data;\n          break;\n      }\n\n      // If no changes have occurred to the fallback string, no relevant\n      // event has fired and we're done.\n      if (fallbackChars === null) {\n        return;\n      }\n\n      chars = fallbackChars;\n    }\n\n    // If no characters are being inserted, no BeforeInput event should\n    // be fired.\n    if (!chars) {\n      return;\n    }\n\n    var event = SyntheticInputEvent.getPooled(\n      eventTypes.beforeInput,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    event.data = chars;\n    fallbackChars = null;\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n\nrequire(\"./mock-modules\").register(\"BeforeInputEventPlugin\", module);\n",
"HTMLDOMPropertyConfig":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE =\n  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE =\n  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar hasSVG;\nif (ExecutionEnvironment.canUseDOM) {\n  var implementation = document.implementation;\n  hasSVG = (\n    implementation &&\n    implementation.hasFeature &&\n    implementation.hasFeature(\n      'http://www.w3.org/TR/SVG11/feature#BasicStructure',\n      '1.1'\n    )\n  );\n}\n\n\nvar HTMLDOMPropertyConfig = {\n  isCustomAttribute: RegExp.prototype.test.bind(\n    /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/\n  ),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: null,\n    acceptCharset: null,\n    accessKey: null,\n    action: null,\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    allowTransparency: MUST_USE_ATTRIBUTE,\n    alt: null,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: null,\n    // autoFocus is polyfilled/normalized by AutoFocusMixin\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    cellPadding: null,\n    cellSpacing: null,\n    charSet: MUST_USE_ATTRIBUTE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    classID: MUST_USE_ATTRIBUTE,\n    // To set className on SVG elements, it's necessary to use .setAttribute;\n    // this works on HTML elements too in all browsers except IE8. Conveniently,\n    // IE8 doesn't support SVG and so we can simply use the attribute in\n    // browsers that support SVG and the property in browsers that don't,\n    // regardless of whether the element is HTML or SVG.\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: null,\n    content: null,\n    contentEditable: null,\n    contextMenu: MUST_USE_ATTRIBUTE,\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    coords: null,\n    crossOrigin: null,\n    data: null, // For `<object />` acts as `src`.\n    dateTime: MUST_USE_ATTRIBUTE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: null,\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: null,\n    encType: null,\n    form: MUST_USE_ATTRIBUTE,\n    formAction: MUST_USE_ATTRIBUTE,\n    formEncType: MUST_USE_ATTRIBUTE,\n    formMethod: MUST_USE_ATTRIBUTE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    formTarget: MUST_USE_ATTRIBUTE,\n    frameBorder: MUST_USE_ATTRIBUTE,\n    height: MUST_USE_ATTRIBUTE,\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    href: null,\n    hrefLang: null,\n    htmlFor: null,\n    httpEquiv: null,\n    icon: null,\n    id: MUST_USE_PROPERTY,\n    label: null,\n    lang: null,\n    list: MUST_USE_ATTRIBUTE,\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    manifest: MUST_USE_ATTRIBUTE,\n    marginHeight: null,\n    marginWidth: null,\n    max: null,\n    maxLength: MUST_USE_ATTRIBUTE,\n    media: MUST_USE_ATTRIBUTE,\n    mediaGroup: null,\n    method: null,\n    min: null,\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: null,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: null,\n    pattern: null,\n    placeholder: null,\n    poster: null,\n    preload: null,\n    radioGroup: null,\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    rel: null,\n    required: HAS_BOOLEAN_VALUE,\n    role: MUST_USE_ATTRIBUTE,\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: null,\n    sandbox: null,\n    scope: null,\n    scrolling: null,\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: null,\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: MUST_USE_ATTRIBUTE,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: null,\n    src: null,\n    srcDoc: MUST_USE_PROPERTY,\n    srcSet: MUST_USE_ATTRIBUTE,\n    start: HAS_NUMERIC_VALUE,\n    step: null,\n    style: null,\n    tabIndex: null,\n    target: null,\n    title: null,\n    type: null,\n    useMap: null,\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,\n    width: MUST_USE_ATTRIBUTE,\n    wmode: MUST_USE_ATTRIBUTE,\n\n    /**\n     * Non-standard Properties\n     */\n    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints\n    autoCorrect: null, // Supported in Mobile Safari for keyboard hints\n    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html\n    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html\n    property: null // Supports OG in meta tags\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMPropertyNames: {\n    autoCapitalize: 'autocapitalize',\n    autoComplete: 'autocomplete',\n    autoCorrect: 'autocorrect',\n    autoFocus: 'autofocus',\n    autoPlay: 'autoplay',\n    encType: 'enctype',\n    hrefLang: 'hreflang',\n    radioGroup: 'radiogroup',\n    spellCheck: 'spellcheck',\n    srcDoc: 'srcdoc',\n    srcSet: 'srcset'\n  }\n};\n\nmodule.exports = HTMLDOMPropertyConfig;\n\nrequire(\"./mock-modules\").register(\"HTMLDOMPropertyConfig\", module);\n",
"ClientReactRootIndex":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ClientReactRootIndex\n * @typechecks\n */\n\n\"use strict\";\n\nvar nextReactRootIndex = 0;\n\nvar ClientReactRootIndex = {\n  createReactRootIndex: function() {\n    return nextReactRootIndex++;\n  }\n};\n\nmodule.exports = ClientReactRootIndex;\n\nrequire(\"./mock-modules\").register(\"ClientReactRootIndex\", module);\n",
"MobileSafariClickEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MobileSafariClickEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n/**\n * Mobile Safari does not fire properly bubble click events on non-interactive\n * elements, which means delegated click listeners do not fire. The workaround\n * for this bug involves attaching an empty click listener on the target node.\n *\n * This particular plugin works around the bug by attaching an empty click\n * listener on `touchstart` (which does fire on every element).\n */\nvar MobileSafariClickEventPlugin = {\n\n  eventTypes: null,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType === topLevelTypes.topTouchStart) {\n      var target = nativeEvent.target;\n      if (target && !target.onclick) {\n        target.onclick = emptyFunction;\n      }\n    }\n  }\n\n};\n\nmodule.exports = MobileSafariClickEventPlugin;\n\nrequire(\"./mock-modules\").register(\"MobileSafariClickEventPlugin\", module);\n",
"ReactBrowserComponentMixin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserComponentMixin\n */\n\n\"use strict\";\n\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\n\nvar ReactBrowserComponentMixin = {\n  /**\n   * Returns the DOM node rendered by this component.\n   *\n   * @return {DOMElement} The root node of this component.\n   * @final\n   * @protected\n   */\n  getDOMNode: function() {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isMounted(),\n      'getDOMNode(): A component must be mounted to have a DOM node.'\n    ) : invariant(this.isMounted()));\n    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {\n      return null;\n    }\n    return ReactMount.getNode(this._rootNodeID);\n  }\n};\n\nmodule.exports = ReactBrowserComponentMixin;\n\nrequire(\"./mock-modules\").register(\"ReactBrowserComponentMixin\", module);\n",
"ReactComponentBrowserEnvironment":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\nvar ReactComponentBrowserEnvironment = {\n  ReactReconcileTransaction: ReactReconcileTransaction,\n\n  BackendIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function(rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: ReactPerf.measure(\n    'ReactComponentBrowserEnvironment',\n    'mountImageIntoNode',\n    function(markup, container, shouldReuseMarkup) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        container && (\n          container.nodeType === ELEMENT_NODE_TYPE ||\n            container.nodeType === DOC_NODE_TYPE\n        ),\n        'mountComponentIntoNode(...): Target container is not valid.'\n      ) : invariant(container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n          container.nodeType === DOC_NODE_TYPE\n      )));\n\n      if (shouldReuseMarkup) {\n        if (ReactMarkupChecksum.canReuseMarkup(\n          markup,\n          getReactRootElementInContainer(container))) {\n          return;\n        } else {\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            container.nodeType !== DOC_NODE_TYPE,\n            'You\\'re trying to render a component to the document using ' +\n            'server rendering but the checksum was invalid. This usually ' +\n            'means you rendered a different component type or props on ' +\n            'the client from the one on the server, or your render() ' +\n            'methods are impure. React cannot handle this case due to ' +\n            'cross-browser quirks by rendering at the document root. You ' +\n            'should look for environment dependent code in your components ' +\n            'and ensure the props are the same client and server side.'\n          ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n          if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\n              'React attempted to use reuse markup in a container but the ' +\n              'checksum was invalid. This generally means that you are ' +\n              'using server rendering and the markup generated on the ' +\n              'server was not what the client was expecting. React injected ' +\n              'new markup to compensate which works but you have lost many ' +\n              'of the benefits of server rendering. Instead, figure out ' +\n              'why the markup being generated is different on the client ' +\n              'or server.'\n            );\n          }\n        }\n      }\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        container.nodeType !== DOC_NODE_TYPE,\n        'You\\'re trying to render a component to the document but ' +\n          'you didn\\'t use server rendering. We can\\'t do this ' +\n          'without using server rendering due to cross-browser quirks. ' +\n          'See renderComponentToString() for server rendering.'\n      ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n      setInnerHTML(container, markup);\n    }\n  )\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;\n\nrequire(\"./mock-modules\").register(\"ReactComponentBrowserEnvironment\", module);\n",
"ReactDefaultBatchingStrategy":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n\"use strict\";\n\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function() {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(\n  ReactDefaultBatchingStrategyTransaction.prototype,\n  Transaction.Mixin,\n  {\n    getTransactionWrappers: function() {\n      return TRANSACTION_WRAPPERS;\n    }\n  }\n);\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function(callback, a, b) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b);\n    } else {\n      transaction.perform(callback, null, a, b);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n\nrequire(\"./mock-modules\").register(\"ReactDefaultBatchingStrategy\", module);\n",
"ReactDOMButton":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMButton\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar keyMirror = require(\"./keyMirror\");\n\n// Store a reference to the <button> `ReactDOMComponent`. TODO: use string\nvar button = ReactElement.createFactory(ReactDOM.button.type);\n\nvar mouseListenerNames = keyMirror({\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n});\n\n/**\n * Implements a <button> native component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMButton',\n\n  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],\n\n  render: function() {\n    var props = {};\n\n    // Copy the props; except the mouse listeners if we're disabled\n    for (var key in this.props) {\n      if (this.props.hasOwnProperty(key) &&\n          (!this.props.disabled || !mouseListenerNames[key])) {\n        props[key] = this.props[key];\n      }\n    }\n\n    return button(props, this.props.children);\n  }\n\n});\n\nmodule.exports = ReactDOMButton;\n\nrequire(\"./mock-modules\").register(\"ReactDOMButton\", module);\n",
"ReactDOMForm":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMForm\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\n\n// Store a reference to the <form> `ReactDOMComponent`. TODO: use string\nvar form = ReactElement.createFactory(ReactDOM.form.type);\n\n/**\n * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need\n * to capture it on the <form> element itself. There are lots of hacks we could\n * do to accomplish this, but the most reliable is to make <form> a\n * composite component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMForm = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMForm',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,\n    // `jshint` fails to parse JSX so in order for linting to work in the open\n    // source repo, we need to just use `ReactDOM.form`.\n    return form(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');\n  }\n});\n\nmodule.exports = ReactDOMForm;\n\nrequire(\"./mock-modules\").register(\"ReactDOMForm\", module);\n",
"ReactDOMImg":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMImg\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\n\n// Store a reference to the <img> `ReactDOMComponent`. TODO: use string\nvar img = ReactElement.createFactory(ReactDOM.img.type);\n\n/**\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to\n * capture it on the <img> element itself. There are lots of hacks we could do\n * to accomplish this, but the most reliable is to make <img> a composite\n * component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMImg = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMImg',\n  tagName: 'IMG',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    return img(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');\n  }\n});\n\nmodule.exports = ReactDOMImg;\n\nrequire(\"./mock-modules\").register(\"ReactDOMImg\", module);\n",
"ReactDOMInput":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\n// Store a reference to the <input> `ReactDOMComponent`. TODO: use string\nvar input = ReactElement.createFactory(ReactDOM.input.type);\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll(\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n\nrequire(\"./mock-modules\").register(\"ReactDOMInput\", module);\n",
"ReactDOMOption":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n\"use strict\";\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar warning = require(\"./warning\");\n\n// Store a reference to the <option> `ReactDOMComponent`. TODO: use string\nvar option = ReactElement.createFactory(ReactDOM.option.type);\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMOption',\n\n  mixins: [ReactBrowserComponentMixin],\n\n  componentWillMount: function() {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        this.props.selected == null,\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\n        'setting `selected` on <option>.'\n      ) : null);\n    }\n  },\n\n  render: function() {\n    return option(this.props, this.props.children);\n  }\n\n});\n\nmodule.exports = ReactDOMOption;\n\nrequire(\"./mock-modules\").register(\"ReactDOMOption\", module);\n",
"ReactDOMSelect":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\n// Store a reference to the <select> `ReactDOMComponent`. TODO: use string\nvar select = ReactElement.createFactory(ReactDOM.select.type);\n\nfunction updateWithPendingValueIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.setState({value: this._pendingValue});\n    this._pendingValue = 0;\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ?\n      selectedValue.hasOwnProperty(options[i].value) :\n      options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};\n  },\n\n  componentWillMount: function() {\n    this._pendingValue = null;\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    var prevMultiple = !!prevProps.multiple;\n    var multiple = !!this.props.multiple;\n    if (value != null || prevMultiple !== multiple) {\n      updateOptions(this, value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this._pendingValue = selectedValue;\n    ReactUpdates.asap(updateWithPendingValueIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n\nrequire(\"./mock-modules\").register(\"ReactDOMSelect\", module);\n",
"ReactDOMTextarea":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\n// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string\nvar textarea = ReactElement.createFactory(ReactDOM.textarea.type);\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMTextarea',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        ) : null);\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n\nrequire(\"./mock-modules\").register(\"ReactDOMTextarea\", module);\n",
"ReactInjection":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInjection\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactRootIndex = require(\"./ReactRootIndex\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar ReactInjection = {\n  Component: ReactComponent.injection,\n  CompositeComponent: ReactCompositeComponent.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  NativeComponent: ReactNativeComponent.injection,\n  Perf: ReactPerf.injection,\n  RootIndex: ReactRootIndex.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports = ReactInjection;\n\nrequire(\"./mock-modules\").register(\"ReactInjection\", module);\n",
"ServerReactRootIndex":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ServerReactRootIndex\n * @typechecks\n */\n\n\"use strict\";\n\n/**\n * Size of the reactRoot ID space. We generate random numbers for React root\n * IDs and if there's a collision the events and DOM update system will\n * get confused. In the future we need a way to generate GUIDs but for\n * now this will work on a smaller scale.\n */\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);\n\nvar ServerReactRootIndex = {\n  createReactRootIndex: function() {\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);\n  }\n};\n\nmodule.exports = ServerReactRootIndex;\n\nrequire(\"./mock-modules\").register(\"ServerReactRootIndex\", module);\n",
"SelectEventPlugin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getActiveElement = require(\"./getActiveElement\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\nvar shallowEqual = require(\"./shallowEqual\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSelect: null}),\n      captured: keyOf({onSelectCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topContextMenu,\n      topLevelTypes.topFocus,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topMouseDown,\n      topLevelTypes.topMouseUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node &&\n      ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown ||\n      activeElement == null ||\n      activeElement != getActiveElement()) {\n    return;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(\n      eventTypes.select,\n      activeElementID,\n      nativeEvent\n    );\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) ||\n            topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE fires selectionchange before input\n      // while Chrome fires in the opposite order.\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n\nrequire(\"./mock-modules\").register(\"SelectEventPlugin\", module);\n",
"SVGDOMPropertyConfig":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\n\nvar SVGDOMPropertyConfig = {\n  Properties: {\n    cx: MUST_USE_ATTRIBUTE,\n    cy: MUST_USE_ATTRIBUTE,\n    d: MUST_USE_ATTRIBUTE,\n    dx: MUST_USE_ATTRIBUTE,\n    dy: MUST_USE_ATTRIBUTE,\n    fill: MUST_USE_ATTRIBUTE,\n    fillOpacity: MUST_USE_ATTRIBUTE,\n    fontFamily: MUST_USE_ATTRIBUTE,\n    fontSize: MUST_USE_ATTRIBUTE,\n    fx: MUST_USE_ATTRIBUTE,\n    fy: MUST_USE_ATTRIBUTE,\n    gradientTransform: MUST_USE_ATTRIBUTE,\n    gradientUnits: MUST_USE_ATTRIBUTE,\n    markerEnd: MUST_USE_ATTRIBUTE,\n    markerMid: MUST_USE_ATTRIBUTE,\n    markerStart: MUST_USE_ATTRIBUTE,\n    offset: MUST_USE_ATTRIBUTE,\n    opacity: MUST_USE_ATTRIBUTE,\n    patternContentUnits: MUST_USE_ATTRIBUTE,\n    patternUnits: MUST_USE_ATTRIBUTE,\n    points: MUST_USE_ATTRIBUTE,\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,\n    r: MUST_USE_ATTRIBUTE,\n    rx: MUST_USE_ATTRIBUTE,\n    ry: MUST_USE_ATTRIBUTE,\n    spreadMethod: MUST_USE_ATTRIBUTE,\n    stopColor: MUST_USE_ATTRIBUTE,\n    stopOpacity: MUST_USE_ATTRIBUTE,\n    stroke: MUST_USE_ATTRIBUTE,\n    strokeDasharray: MUST_USE_ATTRIBUTE,\n    strokeLinecap: MUST_USE_ATTRIBUTE,\n    strokeOpacity: MUST_USE_ATTRIBUTE,\n    strokeWidth: MUST_USE_ATTRIBUTE,\n    textAnchor: MUST_USE_ATTRIBUTE,\n    transform: MUST_USE_ATTRIBUTE,\n    version: MUST_USE_ATTRIBUTE,\n    viewBox: MUST_USE_ATTRIBUTE,\n    x1: MUST_USE_ATTRIBUTE,\n    x2: MUST_USE_ATTRIBUTE,\n    x: MUST_USE_ATTRIBUTE,\n    y1: MUST_USE_ATTRIBUTE,\n    y2: MUST_USE_ATTRIBUTE,\n    y: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    fillOpacity: 'fill-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    gradientTransform: 'gradientTransform',\n    gradientUnits: 'gradientUnits',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    patternContentUnits: 'patternContentUnits',\n    patternUnits: 'patternUnits',\n    preserveAspectRatio: 'preserveAspectRatio',\n    spreadMethod: 'spreadMethod',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strokeDasharray: 'stroke-dasharray',\n    strokeLinecap: 'stroke-linecap',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    textAnchor: 'text-anchor',\n    viewBox: 'viewBox'\n  }\n};\n\nmodule.exports = SVGDOMPropertyConfig;\n\nrequire(\"./mock-modules\").register(\"SVGDOMPropertyConfig\", module);\n",
"createFullPageComponent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n\n\"use strict\";\n\n// Defeat circular references by requiring this directly.\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like <html> <head> and <body> can't be removed or added\n * easily in a cross-browser way, however it's valuable to be able to\n * take advantage of React's reconciliation for styling and <title>\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {string} tag The tag to wrap\n * @return {function} convenience constructor of new component\n */\nfunction createFullPageComponent(tag) {\n  var elementFactory = ReactElement.createFactory(tag);\n\n  var FullPageComponent = ReactCompositeComponent.createClass({\n    displayName: 'ReactFullPageComponent' + tag,\n\n    componentWillUnmount: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        false,\n        '%s tried to unmount. Because of cross-browser quirks it is ' +\n        'impossible to unmount some top-level components (eg <html>, <head>, ' +\n        'and <body>) reliably and efficiently. To fix this, have a single ' +\n        'top-level component that never unmounts render these elements.',\n        this.constructor.displayName\n      ) : invariant(false));\n    },\n\n    render: function() {\n      return elementFactory(this.props);\n    }\n  });\n\n  return FullPageComponent;\n}\n\nmodule.exports = createFullPageComponent;\n\nrequire(\"./mock-modules\").register(\"createFullPageComponent\", module);\n",
"monitorCodeUse":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule monitorCodeUse\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Provides open-source compatible instrumentation for monitoring certain API\n * uses before we're ready to issue a warning or refactor. It accepts an event\n * name which may only contain the characters [a-z0-9_] and an optional data\n * object with further information.\n */\n\nfunction monitorCodeUse(eventName, data) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    eventName && !/[^a-z0-9_]/.test(eventName),\n    'You must provide an eventName using only the characters [a-z0-9_]'\n  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));\n}\n\nmodule.exports = monitorCodeUse;\n\nrequire(\"./mock-modules\").register(\"monitorCodeUse\", module);\n",
"ReactDefaultPerf":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  getMeasurementsSummaryMap: function(measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    return summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (moduleName === 'ReactDOMIDOperations' ||\n        moduleName === 'ReactComponentBrowserEnvironment') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === 'mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || // TODO: receiveComponent()?\n        fnName === '_renderValidatedComponent')) {\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.constructor.displayName,\n          owner: this._owner ? this._owner.constructor.displayName : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n\nrequire(\"./mock-modules\").register(\"ReactDefaultPerf\", module);\n",
"ReactOwner":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n\"use strict\";\n\nvar emptyObject = require(\"./emptyObject\");\nvar invariant = require(\"./invariant\");\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function(object) {\n    return !!(\n      object &&\n      typeof object.attachRef === 'function' &&\n      typeof object.detachRef === 'function'\n    );\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to add a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to remove a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.refs[ref] === component) {\n      owner.detachRef(ref);\n    }\n  },\n\n  /**\n   * A ReactComponent must mix this in to have refs.\n   *\n   * @lends {ReactOwner.prototype}\n   */\n  Mixin: {\n\n    construct: function() {\n      this.refs = emptyObject;\n    },\n\n    /**\n     * Lazily allocates the refs object and stores `component` as `ref`.\n     *\n     * @param {string} ref Reference name.\n     * @param {component} component Component to store as `ref`.\n     * @final\n     * @private\n     */\n    attachRef: function(ref, component) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        component.isOwnedBy(this),\n        'attachRef(%s, ...): Only a component\\'s owner can store a ref to it.',\n        ref\n      ) : invariant(component.isOwnedBy(this)));\n      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;\n      refs[ref] = component;\n    },\n\n    /**\n     * Detaches a reference name.\n     *\n     * @param {string} ref Name to dereference.\n     * @final\n     * @private\n     */\n    detachRef: function(ref) {\n      delete this.refs[ref];\n    }\n\n  }\n\n};\n\nmodule.exports = ReactOwner;\n\nrequire(\"./mock-modules\").register(\"ReactOwner\", module);\n",
"ReactMultiChildUpdateTypes":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n\"use strict\";\n\nvar keyMirror = require(\"./keyMirror\");\n\n/**\n * When a component's children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes = keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports = ReactMultiChildUpdateTypes;\n\nrequire(\"./mock-modules\").register(\"ReactMultiChildUpdateTypes\", module);\n",
"flattenChildren":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenChildren\n */\n\n\"use strict\";\n\nvar ReactTextComponent = require(\"./ReactTextComponent\");\n\nvar traverseAllChildren = require(\"./traverseAllChildren\");\nvar warning = require(\"./warning\");\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {\n  // We found a component instance.\n  var result = traverseContext;\n  var keyUnique = !result.hasOwnProperty(name);\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    keyUnique,\n    'flattenChildren(...): Encountered two children with the same key, ' +\n    '`%s`. Child keys must be unique; when two children share a key, only ' +\n    'the first child will be used.',\n    name\n  ) : null);\n  if (keyUnique && child != null) {\n    var type = typeof child;\n    var normalizedValue;\n\n    if (type === 'string') {\n      normalizedValue = ReactTextComponent(child);\n    } else if (type === 'number') {\n      normalizedValue = ReactTextComponent('' + child);\n    } else {\n      normalizedValue = child;\n    }\n\n    result[name] = normalizedValue;\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  var result = {};\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  return result;\n}\n\nmodule.exports = flattenChildren;\n\nrequire(\"./mock-modules\").register(\"flattenChildren\", module);\n",
"DOMChildrenOperations":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar Danger = require(\"./Danger\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar invariant = require(\"./invariant\");\n\n/**\n * The DOM property to use when setting text content.\n *\n * @type {string}\n * @private\n */\nvar textContentAccessor = getTextContentAccessor();\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(\n    childNode,\n    parentNode.childNodes[index] || null\n  );\n}\n\nvar updateTextContent;\nif (textContentAccessor === 'textContent') {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function(node, text) {\n    node.textContent = text;\n  };\n} else {\n  /**\n   * Sets the text content of `node` to `text`.\n   *\n   * @param {DOMElement} node Node to change\n   * @param {string} text New text content\n   */\n  updateTextContent = function(node, text) {\n    // In order to preserve newlines correctly, we can't use .innerText to set\n    // the contents (see #1080), so we empty the element then append a text node\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    if (text) {\n      var doc = node.ownerDocument || document;\n      node.appendChild(doc.createTextNode(text));\n    }\n  };\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: updateTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function(updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; update = updates[i]; i++) {\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||\n          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          updatedChild,\n          'processUpdates(): Unable to find child %s of element. This ' +\n          'probably means the DOM was unexpectedly mutated (e.g., by the ' +\n          'browser), usually due to forgetting a <tbody> when using tables, ' +\n          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+\n          'in an <svg> parent. Try inspecting the child nodes of the element ' +\n          'with React ID `%s`.',\n          updatedIndex,\n          parentID\n        ) : invariant(updatedChild));\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; update = updates[k]; k++) {\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(\n            update.parentNode,\n            renderedMarkup[update.markupIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(\n            update.parentNode,\n            initialChildren[update.parentID][update.fromIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          updateTextContent(\n            update.parentNode,\n            update.textContent\n          );\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;\n\nrequire(\"./mock-modules\").register(\"DOMChildrenOperations\", module);\n",
"getUnboundedScrollPosition":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getUnboundedScrollPosition\n * @typechecks\n */\n\n\"use strict\";\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable === window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;\n\nrequire(\"./mock-modules\").register(\"getUnboundedScrollPosition\", module);\n",
"setInnerHTML":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function(node, html) {\n  node.innerHTML = html;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function(node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) ||\n          html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML = '\\uFEFF' + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;\n\nrequire(\"./mock-modules\").register(\"setInnerHTML\", module);\n",
"hyphenateStyleName":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenateStyleName\n * @typechecks\n */\n\n\"use strict\";\n\nvar hyphenate = require(\"./hyphenate\");\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;\n\nrequire(\"./mock-modules\").register(\"hyphenateStyleName\", module);\n",
"camelizeStyleName":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelizeStyleName\n * @typechecks\n */\n\n\"use strict\";\n\nvar camelize = require(\"./camelize\");\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;\n\nrequire(\"./mock-modules\").register(\"camelizeStyleName\", module);\n",
"dangerousStyleValue":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar CSSProperty = require(\"./CSSProperty\");\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 ||\n      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;\n\nrequire(\"./mock-modules\").register(\"dangerousStyleValue\", module);\n",
"ReactNativeComponent":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags\nvar tagToComponentClass = {};\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function(componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function(componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Create an internal class for a specific tag.\n *\n * @param {string} tag The tag for which to create an internal instance.\n * @param {any} props The props passed to the instance constructor.\n * @return {ReactComponent} component The injected empty component.\n */\nfunction createInstanceForTag(tag, props, parentType) {\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      genericComponentClass,\n      'There is no registered component for the tag %s',\n      tag\n    ) : invariant(genericComponentClass));\n    return new genericComponentClass(tag, props);\n  }\n  if (parentType === tag) {\n    // Avoid recursion\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      genericComponentClass,\n      'There is no registered component for the tag %s',\n      tag\n    ) : invariant(genericComponentClass));\n    return new genericComponentClass(tag, props);\n  }\n  // Unwrap legacy factories\n  return new componentClass.type(props);\n}\n\nvar ReactNativeComponent = {\n  createInstanceForTag: createInstanceForTag,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n\nrequire(\"./mock-modules\").register(\"ReactNativeComponent\", module);\n",
"ReactEmptyComponent":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIdsRegistry = {};\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function(emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\n/**\n * @return {ReactComponent} component The injected empty component.\n */\nfunction getEmptyComponent() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    component,\n    'Trying to return null from a render, but no null placeholder component ' +\n    'was injected.'\n  ) : invariant(component));\n  return component();\n}\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIdsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIdsRegistry[id];\n}\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return nullComponentIdsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  deregisterNullComponentID: deregisterNullComponentID,\n  getEmptyComponent: getEmptyComponent,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID,\n  registerNullComponentID: registerNullComponentID\n};\n\nmodule.exports = ReactEmptyComponent;\n\nrequire(\"./mock-modules\").register(\"ReactEmptyComponent\", module);\n",
"createNodesFromMarkup":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*jslint evil: true, sub: true */\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createArrayFrom = require(\"./createArrayFrom\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      handleScript,\n      'createNodesFromMarkup(...): Unexpected <script> element rendered.'\n    ) : invariant(handleScript));\n    createArrayFrom(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFrom(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n\nrequire(\"./mock-modules\").register(\"createNodesFromMarkup\", module);\n",
"getMarkupWrap":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getMarkupWrap\n */\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\nvar shouldWrap = {\n  // Force wrapping for SVG elements because if they get created inside a <div>,\n  // they will be initialized in the wrong namespace (and will not display).\n  'circle': true,\n  'defs': true,\n  'ellipse': true,\n  'g': true,\n  'line': true,\n  'linearGradient': true,\n  'path': true,\n  'polygon': true,\n  'polyline': true,\n  'radialGradient': true,\n  'rect': true,\n  'stop': true,\n  'text': true\n};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg>', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap,\n\n  'circle': svgWrap,\n  'defs': svgWrap,\n  'ellipse': svgWrap,\n  'g': svgWrap,\n  'line': svgWrap,\n  'linearGradient': svgWrap,\n  'path': svgWrap,\n  'polygon': svgWrap,\n  'polyline': svgWrap,\n  'radialGradient': svgWrap,\n  'rect': svgWrap,\n  'stop': svgWrap,\n  'text': svgWrap\n};\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\n\nmodule.exports = getMarkupWrap;\n\nrequire(\"./mock-modules\").register(\"getMarkupWrap\", module);\n",
"ReactPropTypeLocationNames":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n\"use strict\";\n\nvar ReactPropTypeLocationNames = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;\n\nrequire(\"./mock-modules\").register(\"ReactPropTypeLocationNames\", module);\n",
"ReactPropTransferer":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar invariant = require(\"./invariant\");\nvar joinClasses = require(\"./joinClasses\");\nvar warning = require(\"./warning\");\n\nvar didWarn = false;\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function(a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  },\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactElement} element Component receiving the properties.\n     * @return {ReactElement} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function(element) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        element._owner === this,\n        '%s: You can\\'t call transferPropsTo() on a component that you ' +\n        'don\\'t own, %s. This usually means you are calling ' +\n        'transferPropsTo() on a component passed in as props or children.',\n        this.constructor.displayName,\n        typeof element.type === 'string' ?\n        element.type :\n        element.type.displayName\n      ) : invariant(element._owner === this));\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (!didWarn) {\n          didWarn = true;\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            'transferPropsTo is deprecated. ' +\n            'See http://fb.me/react-transferpropsto for more information.'\n          ) : null);\n        }\n      }\n\n      // Because elements are immutable we have to merge into the existing\n      // props object rather than clone it.\n      transferInto(element.props, this.props);\n\n      return element;\n    }\n\n  }\n};\n\nmodule.exports = ReactPropTransferer;\n\nrequire(\"./mock-modules\").register(\"ReactPropTransferer\", module);\n",
"isNode":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isNode\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  return !!(object && (\n    typeof Node === 'function' ? object instanceof Node :\n      typeof object === 'object' &&\n      typeof object.nodeType === 'number' &&\n      typeof object.nodeName === 'string'\n  ));\n}\n\nmodule.exports = isNode;\n\nrequire(\"./mock-modules\").register(\"isNode\", module);\n",
"mergeHelpers":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nvar MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nvar isTerminal = function(o) {\n  return typeof o !== 'object' || o === null;\n};\n\nvar mergeHelpers = {\n\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two\n    ) : invariant(Array.isArray(one) && Array.isArray(two)));\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg\n    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),\n      'Tried to merge into an object, instead got %s.',\n      arg\n    ) : invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg)));\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n      'circular structures in an unsupported way.'\n    ) : invariant(level < MAX_MERGE_DEPTH));\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n      'instruct the deep merge how to resolve merging two arrays.'\n    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: keyMirror({\n    Clobber: true,\n    IndexByIndex: true\n  })\n\n};\n\nmodule.exports = mergeHelpers;\n\nrequire(\"./mock-modules\").register(\"mergeHelpers\", module);\n",
"CSSCore":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\n\nvar invariant = require(\"./invariant\");\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.addClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.removeClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className\n          .replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1')\n          .replace(/\\s+/g, ' ') // multiple spaces to one\n          .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function(element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSS.hasClass takes only a single class name.'\n    ) : invariant(!/\\s/.test(className)));\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n\n};\n\nmodule.exports = CSSCore;\n\nrequire(\"./mock-modules\").register(\"CSSCore\", module);\n",
"ReactTransitionEvents":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionEvents\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\n/**\n * EVENT_NAME_MAP is used to determine which event fired when a\n * transition/animation ends, based on the style property used to\n * define that event.\n */\nvar EVENT_NAME_MAP = {\n  transitionend: {\n    'transition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd',\n    'MozTransition': 'mozTransitionEnd',\n    'OTransition': 'oTransitionEnd',\n    'msTransition': 'MSTransitionEnd'\n  },\n\n  animationend: {\n    'animation': 'animationend',\n    'WebkitAnimation': 'webkitAnimationEnd',\n    'MozAnimation': 'mozAnimationEnd',\n    'OAnimation': 'oAnimationEnd',\n    'msAnimation': 'MSAnimationEnd'\n  }\n};\n\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are useable, and if not remove them\n  // from the map\n  if (!('AnimationEvent' in window)) {\n    delete EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  for (var baseEventName in EVENT_NAME_MAP) {\n    var baseEvents = EVENT_NAME_MAP[baseEventName];\n    for (var styleName in baseEvents) {\n      if (styleName in style) {\n        endEvents.push(baseEvents[styleName]);\n        break;\n      }\n    }\n  }\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  detectEvents();\n}\n\n// We use the raw {add|remove}EventListener() call because EventListener\n// does not know how to remove event listeners and we really should\n// clean up. Also, these events are not triggered in older browsers\n// so we should be A-OK here.\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar ReactTransitionEvents = {\n  addEndEventListener: function(node, eventListener) {\n    if (endEvents.length === 0) {\n      // If CSS transitions are not supported, trigger an \"end animation\"\n      // event immediately.\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function(endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n\n  removeEndEventListener: function(node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function(endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nmodule.exports = ReactTransitionEvents;\n\nrequire(\"./mock-modules\").register(\"ReactTransitionEvents\", module);\n",
"isTextNode":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextNode\n * @typechecks\n */\n\nvar isNode = require(\"./isNode\");\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n\nrequire(\"./mock-modules\").register(\"isTextNode\", module);\n",
"getEventModifierState":"/**\n * Copyright 2013 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventModifierState\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Meta': 'metaKey',\n  'Shift': 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  /*jshint validthis:true */\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports = getEventModifierState;\n\nrequire(\"./mock-modules\").register(\"getEventModifierState\", module);\n",
"getEventKey":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar getEventCharCode = require(\"./getEventCharCode\");\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;\n\nrequire(\"./mock-modules\").register(\"getEventKey\", module);\n",
"ReactDOMSelection":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(\n    selection.anchorNode,\n    selection.anchorOffset,\n    selection.focusNode,\n    selection.focusOffset\n  );\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(\n    tempRange.startContainer,\n    tempRange.startOffset,\n    tempRange.endContainer,\n    tempRange.endOffset\n  );\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ?\n            start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;\n\nrequire(\"./mock-modules\").register(\"ReactDOMSelection\", module);\n",
"focusNode":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule focusNode\n */\n\n\"use strict\";\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch(e) {\n  }\n}\n\nmodule.exports = focusNode;\n\nrequire(\"./mock-modules\").register(\"focusNode\", module);\n",
"getActiveElement":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getActiveElement\n * @typechecks\n */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document body is not yet defined.\n */\nfunction getActiveElement() /*?DOMElement*/ {\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n\nrequire(\"./mock-modules\").register(\"getActiveElement\", module);\n",
"SyntheticCompositionEvent":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticCompositionEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticCompositionEvent,\n  CompositionEventInterface\n);\n\nmodule.exports = SyntheticCompositionEvent;\n\n\nrequire(\"./mock-modules\").register(\"SyntheticCompositionEvent\", module);\n",
"getTextContentAccessor":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentAccessor\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ?\n      'textContent' :\n      'innerText';\n  }\n  return contentKey;\n}\n\nmodule.exports = getTextContentAccessor;\n\nrequire(\"./mock-modules\").register(\"getTextContentAccessor\", module);\n",
"SyntheticInputEvent":"/**\n * Copyright 2013 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticInputEvent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticInputEvent,\n  InputEventInterface\n);\n\nmodule.exports = SyntheticInputEvent;\n\n\nrequire(\"./mock-modules\").register(\"SyntheticInputEvent\", module);\n",
"AutoFocusMixin":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AutoFocusMixin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar focusNode = require(\"./focusNode\");\n\nvar AutoFocusMixin = {\n  componentDidMount: function() {\n    if (this.props.autoFocus) {\n      focusNode(this.getDOMNode());\n    }\n  }\n};\n\nmodule.exports = AutoFocusMixin;\n\nrequire(\"./mock-modules\").register(\"AutoFocusMixin\", module);\n",
"LocalEventTrapMixin":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LocalEventTrapMixin\n */\n\n\"use strict\";\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\nfunction remove(event) {\n  event.remove();\n}\n\nvar LocalEventTrapMixin = {\n  trapBubbledEvent:function(topLevelType, handlerBaseName) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));\n    var listener = ReactBrowserEventEmitter.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      this.getDOMNode()\n    );\n    this._localEventListeners =\n      accumulateInto(this._localEventListeners, listener);\n  },\n\n  // trapCapturedEvent would look nearly identical. We don't implement that\n  // method because it isn't currently needed.\n\n  componentWillUnmount:function() {\n    if (this._localEventListeners) {\n      forEachAccumulated(this._localEventListeners, remove);\n    }\n  }\n};\n\nmodule.exports = LocalEventTrapMixin;\n\nrequire(\"./mock-modules\").register(\"LocalEventTrapMixin\", module);\n",
"LinkedValueUtils":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checkedLink == null || input.props.valueLink == null,\n    'Cannot provide a checkedLink and a valueLink. If you want to use ' +\n    'checkedLink, you probably don\\'t want to use valueLink and vice versa.'\n  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));\n}\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.value == null && input.props.onChange == null,\n    'Cannot provide a valueLink and a value or onChange event. If you want ' +\n    'to use value or onChange, you probably don\\'t want to use valueLink.'\n  ) : invariant(input.props.value == null && input.props.onChange == null));\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checked == null && input.props.onChange == null,\n    'Cannot provide a checkedLink and a checked property or onChange event. ' +\n    'If you want to use checked or onChange, you probably don\\'t want to ' +\n    'use checkedLink'\n  ) : invariant(input.props.checked == null && input.props.onChange == null));\n}\n\n/**\n * @param {SyntheticEvent} e change event to handle\n */\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function(props, propName, componentName) {\n        if (!props[propName] ||\n            hasReadOnlyValue[props.type] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return;\n        }\n        return new Error(\n          'You provided a `value` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultValue`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      checked: function(props, propName, componentName) {\n        if (!props[propName] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return;\n        }\n        return new Error(\n          'You provided a `checked` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return input.props.valueLink.value;\n    }\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function(input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return input.props.checkedLink.value;\n    }\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return _handleLinkedCheckChange;\n    }\n    return input.props.onChange;\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n\nrequire(\"./mock-modules\").register(\"LinkedValueUtils\", module);\n",
"shallowEqual":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n\"use strict\";\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\nrequire(\"./mock-modules\").register(\"shallowEqual\", module);\n",
"ReactDefaultPerfAnalysis":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\nvar assign = require(\"./Object.assign\");\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  'mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  TEXT_CONTENT: 'set textContent',\n  'updatePropertyByID': 'update attribute',\n  'deletePropertyByID': 'delete attribute',\n  'updateStylesByID': 'update styles',\n  'updateInnerHTMLByID': 'set innerHTML',\n  'dangerouslyReplaceNodeWithMarkupByID': 'replace'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var id;\n\n    for (id in measurement.writes) {\n      measurement.writes[id].forEach(function(write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    }\n  }\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;\n\nrequire(\"./mock-modules\").register(\"ReactDefaultPerfAnalysis\", module);\n",
"performanceNow":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\nvar performance = require(\"./performance\");\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (!performance || !performance.now) {\n  performance = Date;\n}\n\nvar performanceNow = performance.now.bind(performance);\n\nmodule.exports = performanceNow;\n\nrequire(\"./mock-modules\").register(\"performanceNow\", module);\n",
"hyphenate":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenate\n * @typechecks\n */\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;\n\nrequire(\"./mock-modules\").register(\"hyphenate\", module);\n",
"camelize":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelize\n * @typechecks\n */\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function(_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;\n\nrequire(\"./mock-modules\").register(\"camelize\", module);\n",
"createArrayFrom":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFrom\n * @typechecks\n */\n\nvar toArray = require(\"./toArray\");\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj &&\n    // arrays are objects, NodeLists are functions in Safari\n    (typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    ('length' in obj) &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    (typeof obj.nodeType != 'number') &&\n    (\n      // a real array\n      (// HTMLCollection/NodeList\n      (Array.isArray(obj) ||\n      // arguments\n      ('callee' in obj) || 'item' in obj))\n    )\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFrom = require('createArrayFrom');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFrom(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFrom(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFrom;\n\nrequire(\"./mock-modules\").register(\"createArrayFrom\", module);\n",
"performance":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performance\n * @typechecks\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance =\n    window.performance ||\n    window.msPerformance ||\n    window.webkitPerformance;\n}\n\nmodule.exports = performance || {};\n\nrequire(\"./mock-modules\").register(\"performance\", module);\n",
"toArray":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule toArray\n * @typechecks\n */\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFrom.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in\n  // old versions of Safari).\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !Array.isArray(obj) &&\n    (typeof obj === 'object' || typeof obj === 'function'),\n    'toArray: Array-like object expected'\n  ) : invariant(!Array.isArray(obj) &&\n  (typeof obj === 'object' || typeof obj === 'function')));\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof length === 'number',\n    'toArray: Object needs a length property'\n  ) : invariant(typeof length === 'number'));\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    length === 0 ||\n    (length - 1) in obj,\n    'toArray: Object should have keys for indices'\n  ) : invariant(length === 0 ||\n  (length - 1) in obj));\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports = toArray;\n\nrequire(\"./mock-modules\").register(\"toArray\", module);\n"
});
